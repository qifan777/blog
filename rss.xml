<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://mister-hope.github.io/blog/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://mister-hope.github.io/blog/rss.xml" rel="self" type="application/rss+xml"/>
    <title>起凡Code闲聊</title>
    <link>https://mister-hope.github.io/blog/</link>
    <description>起凡Code闲聊</description>
    <language>zh-CN</language>
    <pubDate>Tue, 03 Sep 2024 09:59:18 GMT</pubDate>
    <lastBuildDate>Tue, 03 Sep 2024 09:59:18 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>消息角标</category>
    <category>SpringMVC</category>
    <category>IO</category>
    <category>ElementUI</category>
    <category>起凡商城</category>
    <category>前端基础</category>
    <category>前端工程化</category>
    <category>网站搭建</category>
    <category>ChatGPT</category>
    <category>多模块微服务</category>
    <category>IDEA技巧</category>
    <category>CI/CD</category>
    <category>JPA</category>
    <category>Spring</category>
    <item>
      <title>提交订单</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/box/box-order-create.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/box/box-order-create.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">提交订单</source>
      <description>提交订单 订单创建（图1）订单创建（图1） 页面：box-order-create.vue 表设计 从创建订单的页面中可以分成三类信息 盲盒信息，购买的盲盒id以及盲盒数量。 通用信息，地址/优惠券/备注/物流信息（发货后显示） 价格计算，vip优惠/优惠券优惠/邮费/商品总价/实付金额 盲盒订单 如果有做购物车功能，一次性可能会购买多个盲盒，每个盲盒...</description>
      <pubDate>Tue, 03 Sep 2024 09:57:40 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>订单创建（图1）</figcaption></figure>
<p>页面：<em>box-order-create.vue</em></p>
<h2>表设计</h2>
<p>从创建订单的页面中可以分成三类信息</p>
<ol>
<li>盲盒信息，购买的盲盒id以及盲盒数量。</li>
<li>通用信息，地址/优惠券/备注/物流信息（发货后显示）</li>
<li>价格计算，vip优惠/优惠券优惠/邮费/商品总价/实付金额</li>
</ol>
<h3>盲盒订单</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> mystery_box_order
<span class="token punctuation">(</span>
    id            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">status</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'订单状态'</span><span class="token punctuation">,</span>
    base_order_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'基础订单id'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'盲盒订单'</span><span class="token punctuation">;</span>
</code></pre></div><p>如果有做购物车功能，一次性可能会购买多个盲盒，每个盲盒的数量不一样。这样的需求就需要一个中间表来关联订单和盲盒的关系。</p>
<p>设计订单时要考虑到盲盒信息会发生变动，因此要把购买时的盲盒信息存入到数据库（盲盒快照），而不是只存储盲盒id。如果存储的是盲盒id，通过关联查询得到是最新的盲盒信息，而不是下单时的信息。</p>
<p>只有在支付成功后才会显示开盲盒得到的商品，同样也是存储商品快照。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> mystery_box_order_item
<span class="token punctuation">(</span>
    id                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time         <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time          <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    mystery_box_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒id'</span><span class="token punctuation">,</span>
    mystery_box          json        <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒信息'</span><span class="token punctuation">,</span>
    mystery_box_order_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒订单id'</span><span class="token punctuation">,</span>
    mystery_box_count    <span class="token keyword">int</span>         <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒数量'</span><span class="token punctuation">,</span>
    products             json        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'开盲盒得到的商品'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'盲盒订单项'</span><span class="token punctuation">;</span>
</code></pre></div><h3>基础订单</h3>
<p>基础订单是各种订单里面抽出来的通用字段组合成的一张表，并且关联了支付的详情信息，因为支付本身也是一种通用的信息。</p>
<p>基础订单里面存储的是地址的快照，而不是地址id。之所以能存储优惠券id是因为优惠券一般不会修改，只会作废下线再生成新的优惠券。</p>
<p>除了盲盒订单之外，<a href="/blog/project/mystery-box/vip.html" target="_blank">VIP订单</a>也用到了基础订单，所以这边<code>type</code>字段可以标识基础订单是来自于哪个业务。</p>
<p>除了理解字段外，可空性也比较重要。像有些订单不需要发货走线下自然就不会用到地址信息和物流单号，有些订单不需要优惠券，但是支付信息是必须要的。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> base_order
<span class="token punctuation">(</span>
    id              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time     <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    payment_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'支付订单id'</span><span class="token punctuation">,</span>
    address         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'地址详情'</span><span class="token punctuation">,</span>
    remark          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>
    tracking_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>   <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'物流单号'</span><span class="token punctuation">,</span>
    coupon_user_id  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户优惠券id'</span><span class="token punctuation">,</span>
    <span class="token keyword">type</span>            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'订单类型'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'基础订单'</span><span class="token punctuation">;</span>
</code></pre></div><h3>支付详情</h3>
<p>支付详情在创建订单的时候就有了，此时支付时间和外系统交易订单号还是为空的状态。</p>
<p>用户在小程序中发起支付后，微信支付收到金额再调用我们的后台。在我们的后台中收到微信回调的请求，并用私钥解密请求得到订单id，再更新订单状态和支付信息。</p>
<p>支付方式在这个项目中只用到了微信支付。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> payment
<span class="token punctuation">(</span>
    id             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    pay_type       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'支付方式（微信，支付宝等）'</span><span class="token punctuation">,</span>
    pay_time       <span class="token keyword">datetime</span>       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'支付时间'</span><span class="token punctuation">,</span>
    pay_amount     <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实付金额'</span><span class="token punctuation">,</span>
    vip_amount     <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'vip优惠金额'</span><span class="token punctuation">,</span>
    coupon_amount  <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'优惠券优惠金额'</span><span class="token punctuation">,</span>
    product_amount <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'商品总价'</span><span class="token punctuation">,</span>
    delivery_fee   <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'邮费'</span><span class="token punctuation">,</span>
    trade_no       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'外系统交易订单号'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'支付详情'</span><span class="token punctuation">;</span>
</code></pre></div><h2>地址选择</h2>
<p>点选择地址时跳转到<a href="/blog/project/mystery-box/address/address-list.html" target="_blank">地址列表</a>，并携带参数<code>from</code>标识跳转来源。</p>
<p>当用户在地址列表页选择完后，地址列表页会发送<code>address</code>事件，该事件携带了用户选择的地址详情。因此需要在当前页面监听<code>address</code>事件。</p>

<h2>优惠券选择</h2>
<p>点选择优惠券时跳转到<a href="/blog/project/mystery-box/coupon/coupon-user.html" target="_blank">优惠券列表</a>，并携带参数<code>amount</code>和<code>id</code>，详细内容请参考优惠券列表页面。</p>
<p>当用户在优惠券列表页选择完后，优惠券列表页会发送<code>coupon</code>事件，该事件携带了用户选择的优惠券详情，因此需要在当前页面监听<code>coupon</code>事件。</p>

<h2>计算价格</h2>
<ul>
<li>累加盲盒价格得到商品总价</li>
<li><a href="/blog/project/mystery-box/coupon/coupon.html#%E4%BC%98%E6%83%A0%E5%88%B8%E8%AE%A1%E7%AE%97" target="_blank">优惠券计算</a>得到优惠价格</li>
<li><a href="/blog/project/mystery-box/carriage-template.html#%E8%BF%90%E8%B4%B9%E8%AE%A1%E7%AE%97" target="_blank">运费计算</a>得到运费价格</li>
<li><a href="/blog/project/mystery-box/vip.html#vip%E6%8A%98%E6%89%A3%E8%AE%A1%E7%AE%97" target="_blank">vip计算</a>得到vip价格</li>
</ul>

<h2>创建订单</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">MysteryBoxOrderInput</span> mysteryBoxOrderInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">fastSimpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PaymentPriceView</span> calculated <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>mysteryBoxOrderInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 支付详情</span>
        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token class-name">PaymentDraft</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>
                calculated<span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                paymentDraft <span class="token operator">-&gt;</span> paymentDraft
                        <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setPayType</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>PayType</span><span class="token punctuation">.</span><span class="token constant">WE_CHAT_PAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Address</span> address <span class="token operator">=</span> addressRepository
                <span class="token punctuation">.</span><span class="token function">findUserAddressById</span><span class="token punctuation">(</span>mysteryBoxOrderInput<span class="token punctuation">.</span><span class="token function">getBaseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddressId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"地址不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MysteryBoxOrder</span> entity <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">createMysteryBoxOrder</span><span class="token punctuation">(</span>mysteryBoxOrderInput
                        <span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                draft <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 设置订单项关联的订单id，并且设置盲盒快照</span>
                    draft<span class="token punctuation">.</span><span class="token function">setItems</span><span class="token punctuation">(</span>draft
                            <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">createMysteryBoxOrderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> mysteryBoxOrderItemDraft <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                                <span class="token class-name">MysteryBox</span> box <span class="token operator">=</span> mysteryBoxRepository
                                        <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">mysteryBoxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MysteryBoxRepository</span><span class="token punctuation">.</span><span class="token constant">COMPLEX_FETCHER_FOR_FRONT</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"盲盒不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                mysteryBoxOrderItemDraft<span class="token punctuation">.</span><span class="token function">setMysteryBoxOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
                                        <span class="token comment">// 盲盒快照，购买时的盲盒详情存入</span>
                                        <span class="token punctuation">.</span><span class="token function">setMysteryBox</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MystryBoxView</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 设置订单的id和状态</span>
                    draft<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>ProductOrderStatus</span><span class="token punctuation">.</span><span class="token constant">TO_BE_PAID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 设置基础订单</span>
                    draft<span class="token punctuation">.</span><span class="token function">baseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>OrderType</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_ORDER</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">setPayment</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span>
                            <span class="token comment">// 地址快照</span>
                            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddressView</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同时创建mysteryBoxOrder, mysteryBoxOrderItem, baseOrder, payment</span>
        <span class="token class-name">MysteryBoxOrder</span> save <span class="token operator">=</span> mysteryBoxOrderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> save<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>运费模板</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/carriage-template.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/carriage-template.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">运费模板</source>
      <description>运费模板 运费模板运费模板 表设计 前端的输入表单可以看见是比较动态且复杂的，这种配置数据适合用json类型存储。configs字段用来存储运费配置。 valid字段标识全局唯一生效的运费模板。 模板创建 运费计算 传入地址id和商品总价计算运费。 根据省份匹配适合的模板 根据商品总价匹配适合的价格区间 </description>
      <pubDate>Tue, 03 Sep 2024 09:10:22 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>运费模板</figcaption></figure>
<h2>表设计</h2>
<p>前端的输入表单可以看见是比较动态且复杂的，这种配置数据适合用json类型存储。<code>configs</code>字段用来存储运费配置。</p>
<p><code>valid</code>字段标识全局唯一生效的运费模板。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> carriage_template
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'模板名称'</span><span class="token punctuation">,</span>
    description  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'运费模板描述'</span><span class="token punctuation">,</span>
    configs      json          <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'运费配置'</span><span class="token punctuation">,</span>
    valid        <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否生效（全局只能存在一个生效）'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'运费模板'</span><span class="token punctuation">;</span>
</code></pre></div><h2>模板创建</h2>

]]></content:encoded>
    </item>
    <item>
      <title>会员</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/vip.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/vip.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">会员</source>
      <description>会员 会员页面（图1）会员页面（图1） 开通会员（图2）开通会员（图2） 表设计 在图二中用户购买套餐（vip_package），在后端会生成一个vip订单(vip_order)记录了要购买的套餐，支付成功后会在vip中增加到期时间（图1中展示）。 开通会员 浏览套餐 如图二所示，加载后端（usePageHelper）的vip套牌，点击不同的套餐可以切...</description>
      <pubDate>Tue, 03 Sep 2024 09:10:22 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>会员页面（图1）</figcaption></figure>
<figure><figcaption>开通会员（图2）</figcaption></figure>
<h2>表设计</h2>
<p>在图二中用户购买套餐（<code>vip_package</code>），在后端会生成一个vip订单(<code>vip_order</code>)记录了要购买的套餐，支付成功后会在<code>vip</code>中增加到期时间（图1中展示）。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> vip
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    user_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>
    end_time     <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'到期时间'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'会员信息'</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> vip_package
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'套餐名称'</span><span class="token punctuation">,</span>
    price        <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>
    days         <span class="token keyword">int</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'天数'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'vip套餐'</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> vip_order
<span class="token punctuation">(</span>
    id             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    user_id        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>
    vip_package_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'vip套餐'</span><span class="token punctuation">,</span>
    base_order_id  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'基础订单'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'vip订单'</span><span class="token punctuation">;</span>
</code></pre></div><h2>开通会员</h2>
<h3>浏览套餐</h3>
<p>如图二所示，加载后端（<code>usePageHelper</code>）的vip套牌，点击不同的套餐可以切换颜色（<code>active</code>变量），点击立即购买提交订单（<code>api.vipOrderForFrontController.save</code>），得到支付参数在小程序端向微信付款(<code>Taro.requestPayment</code>)。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vip-package-page<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vip-package-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['vip-package', level.id == active ? 'active' : '']<span class="token punctuation">"</span></span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level in pageData.content<span class="token punctuation">"</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level.id<span class="token punctuation">"</span></span>
        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active = level.id<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ level.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ level.price }} ￥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>天数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ level.days }}天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nut-button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">block</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSubmit<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>立即购买
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nut-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
import { usePageHelper } from "@/utils/page";
import { api } from "@/utils/api-instance";
import { ref } from "vue";
import Taro from "@tarojs/taro";
// </code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>订单支付</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/box/box-order-pay.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/box/box-order-pay.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">订单支付</source>
      <description>订单支付 微信小程序支付流程图微信小程序支付流程图 1-3 ，包含盲盒、地址、优惠券等信息 4-8 预支付阶段，后端会调用微信支付接口生成一个预支付订单，订单信息，包括订单金额、支付人信息、支付相关参数等。 9-15 小程序支付，小程序端发起支付用户输入密码确认支付阶段。 16-19 支付回调，随机生成从盲盒中挑选商品生成 预支付 小程序支付 支付回调 </description>
      <pubDate>Tue, 03 Sep 2024 09:10:22 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><img src="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" alt="微信小程序支付流程图" tabindex="0" loading="lazy"><figcaption>微信小程序支付流程图</figcaption></figure>
<ul>
<li>
<p>1-3 <a href="/blog/project/mystery-box/box/box-order-create.html" target="_blank">订单创建阶段</a>，包含盲盒、地址、优惠券等信息</p>
</li>
<li>
<p>4-8 <a href="#%E9%A2%84%E6%94%AF%E4%BB%98">预支付阶段</a>，后端会调用微信支付接口生成一个预支付订单，订单信息，包括订单金额、支付人信息、支付相关参数等。</p>
</li>
<li>
<p>9-15 <a href="#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98">小程序支付</a>，小程序端发起支付用户输入密码确认支付阶段。</p>
</li>
<li>
<p>16-19 <a href="#%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83">支付回调</a>，随机生成从盲盒中挑选商品生成</p>
</li>
</ul>
<h2>预支付</h2>
<h2>小程序支付</h2>
<h2>支付回调</h2>
]]></content:encoded>
      <enclosure url="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" type="image/png"/>
    </item>
    <item>
      <title>用户优惠券</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/coupon/coupon-user.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/coupon/coupon-user.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">用户优惠券</source>
      <description>用户优惠券 优惠券列表优惠券列表 优惠券展示和选择 用户优惠券的入口有两个，一个是用户中心页面，一个是订单创建页面。下面介绍各种操作在不同的来源下的逻辑 优惠券列表查询 来自订单创建：传商品总金额过滤符合使用门槛且可使用的优惠券 来自用户中心：查询所有可使用的优惠券 立即使用按钮 来自订单创建：点击立即使用，返回到订单创建页面，并传送已选的优惠券 来自...</description>
      <pubDate>Tue, 03 Sep 2024 09:10:22 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>优惠券列表</figcaption></figure>
<h2>优惠券展示和选择</h2>
<p>用户优惠券的入口有两个，一个是用户中心页面，一个是订单创建页面。下面介绍各种操作在不同的来源下的逻辑</p>
<ul>
<li>优惠券列表查询
<ul>
<li>来自订单创建：传商品总金额过滤符合使用门槛且可使用的优惠券</li>
<li>来自用户中心：查询所有可使用的优惠券</li>
</ul>
</li>
<li>立即使用按钮
<ul>
<li>来自订单创建：点击立即使用，返回到订单创建页面，并传送已选的优惠券</li>
<li>来自用户中心：跳转到盲盒列表</li>
</ul>
</li>
<li>取消使用按钮：
<ul>
<li>来自订单创建：跳转到优惠券列表时传输已选的优惠券id，此时优惠券会显示取消使用，点击即可返回到订单创建页面并取消优惠券</li>
</ul>
</li>
</ul>

]]></content:encoded>
    </item>
    <item>
      <title>优惠券中心</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/coupon/</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/coupon/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">优惠券中心</source>
      <pubDate>Mon, 02 Sep 2024 06:35:25 GMT</pubDate>
    </item>
    <item>
      <title>优惠券</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/coupon/coupon.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/coupon/coupon.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">优惠券</source>
      <description>优惠券 优惠券创建（图1）优惠券创建（图1） 优惠券赠送（图2）优惠券赠送（图2） 表设计 图1中的表单字段和优惠券表的字段可以一一对应。如果优惠类型是打折，那么discount字段就是必填，amount字段可为空。如果优惠券类型是满减，那么相反。 用户优惠券关系表，优惠券的来源有很多种，可以使用receive_type表示。这边演示的来源方式只有后台...</description>
      <pubDate>Mon, 02 Sep 2024 06:35:25 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>优惠券创建（图1）</figcaption></figure>
<figure><figcaption>优惠券赠送（图2）</figcaption></figure>
<h2>表设计</h2>
<p>图1中的表单字段和优惠券表的字段可以一一对应。如果优惠类型是打折，那么<code>discount</code>字段就是必填，<code>amount</code>字段可为空。如果优惠券类型是满减，那么相反。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> coupon
<span class="token punctuation">(</span>
    id                <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time       <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'优惠券名称'</span><span class="token punctuation">,</span>
    threshold_amount  <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'使用门槛'</span><span class="token punctuation">,</span>
    released_quantity <span class="token keyword">int</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'发放数量'</span><span class="token punctuation">,</span>
    coupon_type       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'优惠类型（打折，满减）'</span><span class="token punctuation">,</span>
    scope_type        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'使用范围（通用，指定商品，类别）'</span><span class="token punctuation">,</span>
    amount            <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'优惠金额'</span><span class="token punctuation">,</span>
    discount          <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'折扣'</span><span class="token punctuation">,</span>
    <span class="token keyword">status</span>            <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否启用'</span><span class="token punctuation">,</span>
    effective_date    <span class="token keyword">datetime</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'生效日期'</span><span class="token punctuation">,</span>
    expiration_dae    <span class="token keyword">datetime</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'失效日期'</span><span class="token punctuation">,</span>
    <span class="token keyword">constraint</span> coupon_pk
        <span class="token keyword">unique</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'优惠券'</span><span class="token punctuation">;</span>
</code></pre></div><p>用户优惠券关系表，优惠券的来源有很多种，可以使用<code>receive_type</code>表示。这边演示的来源方式只有后台赠送一种。如图2所示，在优惠券上点赠送按钮即可批量选择用户赠送优惠券。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> coupon_user_rel
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    receive_type <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'获得渠道（后台赠送，手动领取）'</span><span class="token punctuation">,</span>
    coupon_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'优惠券id'</span><span class="token punctuation">,</span>
    <span class="token keyword">status</span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'使用状态（待使用，已使用，过期）'</span><span class="token punctuation">,</span>
    user_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户id'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'用户优惠券'</span><span class="token punctuation">;</span>
</code></pre></div><h2>优惠券赠送</h2>

<h2>优惠券计算</h2>
<p>传入优惠券id，校验是否符使用条件，并根据优惠券的优惠类型（满减，折扣）得到优惠金额。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token class-name">CouponUserRelTable</span><span class="token punctuation">.</span>$<span class="token punctuation">;</span>
        <span class="token class-name">CouponUserRel</span> couponUser <span class="token operator">=</span> couponUserRelRepository<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getLoginIdAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>CouponUseStatus</span><span class="token punctuation">.</span><span class="token constant">UNUSED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">coupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thresholdAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">coupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">effectiveDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">coupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name">CouponUserRelRepository</span><span class="token punctuation">.</span><span class="token constant">COMPLEX_FETCHER_FOR_ADMIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">fetchOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"优惠券失效"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Coupon</span> coupon <span class="token operator">=</span> couponUser<span class="token punctuation">.</span><span class="token function">coupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>coupon<span class="token punctuation">.</span><span class="token function">couponType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>CouponType</span><span class="token punctuation">.</span><span class="token constant">DISCOUNT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>coupon<span class="token punctuation">.</span><span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">DOWN</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>coupon<span class="token punctuation">.</span><span class="token function">couponType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DictConstants<span class="token punctuation">.</span>CouponType</span><span class="token punctuation">.</span><span class="token constant">REDUCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> coupon<span class="token punctuation">.</span><span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ParamSetIllegal</span><span class="token punctuation">,</span> <span class="token string">"优惠券类型错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>目前的优惠券的使用范围只有通用券一种，如果要拓展品类券和商品券则需要增加两种配置表，并且优惠券计算参数也需要修改。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>地址簿</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/address/</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/address/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址簿</source>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
    </item>
    <item>
      <title>地址列表</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/address/address-list.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/address/address-list.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址列表</source>
      <description>地址列表 地址列表地址列表 长按菜单长按菜单 表设计 地址表没有太复杂的逻辑，结合页面就可以看出每个字段的含义了 地址展示 首先使用usePageHelper分页加载地址列表，v-for遍历地址列表并使用address-row组件渲染地址 在地址上有四种操作 编辑操作 删除操作 点击操作，当订单创建页面跳转到地址列表页面时，点击地址就代表选择该地址作为...</description>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>地址列表</figcaption></figure>
<figure><figcaption>长按菜单</figcaption></figure>
<h2>表设计</h2>
<p>地址表没有太复杂的逻辑，结合页面就可以看出每个字段的含义了</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> address
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    latitude     <span class="token keyword">double</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'维度'</span><span class="token punctuation">,</span>
    longitude    <span class="token keyword">double</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'经度'</span><span class="token punctuation">,</span>
    details      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'详细地址'</span><span class="token punctuation">,</span>
    province     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'省'</span><span class="token punctuation">,</span>
    city         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'市'</span><span class="token punctuation">,</span>
    district     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'区'</span><span class="token punctuation">,</span>
    phone_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span>
    real_name    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'真实姓名'</span><span class="token punctuation">,</span>
    house_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'门牌号'</span><span class="token punctuation">,</span>
    <span class="token keyword">top</span>          <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否置顶'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'地址表'</span><span class="token punctuation">;</span>
</code></pre></div><h2>地址展示</h2>
<ul>
<li>首先使用<code>usePageHelper</code>分页加载地址列表，<code>v-for</code>遍历地址列表并使用<code>address-row</code>组件渲染地址</li>
<li>在地址上有四种操作
<ul>
<li>编辑操作</li>
<li>删除操作</li>
<li>点击操作，当订单创建页面跳转到地址列表页面时，点击地址就代表选择该地址作为收货地址</li>
<li>长按操作，弹出菜单，菜单中包含了两种操作
<ul>
<li>复制地址</li>
<li>设置默认</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>点击操作</h3>
<p>进入到地址列表有两个入口，一个是通过用户中小页面的地址簿，第二个是从创建订单页面地址选择跳转。如果是来自订单创建，点击地址后要回退，并且在回退成功后发送地址到订单创建页面。</p>
<p>在<code>Taro.useLoad</code>的回调函数中可以获取别的页面传入的参数，订单创建页面会传<code>from</code>参数，通过这个参数来判断跳转来源。</p>
<h3>长按操作</h3>
<p>监听<code>longpress</code>事件修改<code>show</code>变量弹出<code>&lt;nut-action-sheet/&gt;</code>。因为每个菜单项都对应一种操作，这边可以使用策略模式的技巧，将菜单的名字和操作通过map绑定。</p>
<p>当用户点击菜单的时候通过名字从<code>actionMap</code>取出菜单对应的操作。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address-list-page<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address-row</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address.id<span class="token punctuation">"</span></span>
      <span class="token attr-name">:address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address in pageData.content<span class="token punctuation">"</span></span>
      <span class="token attr-name">@longpress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showActionSheet(address)<span class="token punctuation">"</span></span>
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleAddressChoose(address)<span class="token punctuation">"</span></span>
    <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#operation</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operations<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDelete(address.id)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edit</span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span>
            <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switchPage(`./address-save?id=${address.id}`)<span class="token punctuation">"</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>edit</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address-row</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-address<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switchPage('./address-save')<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plus</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plus</span><span class="token punctuation">&gt;</span></span>
        添加收货地址
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nut-action-sheet</span>
      <span class="token attr-name"><span class="token namespace">v-model:</span>visible</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span>
      <span class="token attr-name">:menu-items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actions<span class="token punctuation">"</span></span>
      <span class="token attr-name">@choose</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleActionChoose<span class="token punctuation">"</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span>
import { api } from "@/utils/api-instance";
import { switchPage } from "@/utils/common";
import AddressRow from "@/components/address/address-row.vue";
import Taro from "@tarojs/taro";
import { Edit, Del, Plus } from "@nutui/icons-vue-taro";
import { ref } from "vue";
import { AddressDto } from "@/apis/__generated/model/dto";
import { menuItems } from "@nutui/nutui-taro/dist/types/__VUE/actionsheet/index.taro.vue";
import { usePageHelper } from "@/utils/page";
// </code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>地址保存</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/address/address-save.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/address/address-save.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址保存</source>
      <description>地址保存 地址保存（图1）地址保存（图1） 地址选择（图2）地址选择（图2） 实现解析 整个代码可以分3块 调用Taro.chooseLocation选地点，如图2所示，选择完后只会返回经度、维度、地址详情。少了省、市、区。 地址回显，如果是编辑地址，需要加载地址信息回显。创建地址则不需要 地址保存，填写完地址，进行字段校验后提交到后端 地址保存接口 ...</description>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>地址保存（图1）</figcaption></figure>
<figure><figcaption>地址选择（图2）</figcaption></figure>
<h2>实现解析</h2>
<p>整个代码可以分3块</p>
<ol>
<li>调用<code>Taro.chooseLocation</code>选地点，如图2所示，选择完后只会返回经度、维度、地址详情。少了省、市、区。</li>
<li>地址回显，如果是编辑地址，需要加载地址信息回显。创建地址则不需要</li>
<li>地址保存，填写完地址，进行字段校验后提交到后端</li>
</ol>

<h2>地址保存接口</h2>
<p>地址保存时后端做了4个步骤</p>
<ol>
<li><code>@Validated</code>地址校验</li>
<li>编辑人校验</li>
<li>设置默认地址</li>
<li>地址解析并入库</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">AddressInput</span> addressInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>addressInput<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Address</span> address <span class="token operator">=</span> addressRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>addressInput<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AddressRepository</span><span class="token punctuation">.</span><span class="token constant">COMPLEX_FETCHER_FOR_FRONT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"数据不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>address<span class="token punctuation">.</span><span class="token function">creator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getLoginIdAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"只能修改自己的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 首个地址设为默认</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addressRepository<span class="token punctuation">.</span><span class="token function">findUserAll</span><span class="token punctuation">(</span><span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getLoginIdAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            addressInput<span class="token punctuation">.</span><span class="token function">setTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> addressRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">AddressDraft</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>addressInput<span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> draft <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeoCoderResponse</span> geoCoderResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"https://apis.map.qq.com/ws/geocoder/v1/?address="</span> <span class="token operator">+</span> addressInput<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;key="</span> <span class="token operator">+</span> tenantMapProperty<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token class-name">GeoCoderResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">GeoCoderResponse<span class="token punctuation">.</span>Address</span> addressComponents <span class="token operator">=</span> geoCoderResponse<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddressComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            draft<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            draft<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            draft<span class="token punctuation">.</span><span class="token function">setDistrict</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getDistrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>地址解析</h3>
<p>由于地址选点缺少了省、市、区，所以后端在入库之前需要通过腾讯地图的地址解析api根据地址详情解析出省市区。</p>
<p>定义腾讯地址解析的返回结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GeoCoderResponse</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Result</span> result<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Location</span> location<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"address_components"</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">Address</span> addressComponents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Double</span> lat<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Double</span> lng<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> district<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">GeoCoderResponse</span> geoCoderResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"https://apis.map.qq.com/ws/geocoder/v1/?address="</span> <span class="token operator">+</span> addressInput<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;key="</span> <span class="token operator">+</span> tenantMapProperty<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">GeoCoderResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">GeoCoderResponse<span class="token punctuation">.</span>Address</span> addressComponents <span class="token operator">=</span> geoCoderResponse<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddressComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
draft<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
draft<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
draft<span class="token punctuation">.</span><span class="token function">setDistrict</span><span class="token punctuation">(</span>addressComponents<span class="token punctuation">.</span><span class="token function">getDistrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>参数校验</h2>
<p>地址保存的时候使用<code>jarkata validation</code>的注解校验规范在需要校验的字段上添加响应的注解和报错信息。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 详细地址
     */</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"详细地址不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 手机号
     */</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"手机号不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">phoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 真实姓名
     */</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"真实姓名不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">realName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 门牌号
     */</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"门牌号不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">houseNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>地址保存接口，使用<code>@Validated</code>注解校验输入表单。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">AddressInput</span> addressInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 忽略....</span>
    <span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>@Validated</code>注解是在<code>jarkata validation</code>校验注解规范的<code>@Valid</code>之上拓展了分组校验功能。如果是使用spring框架那使用<code>@Validated</code>就行了</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>盲盒中心</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/box/</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/box/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">盲盒中心</source>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
    </item>
    <item>
      <title>盲盒详情页</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/box/box-details.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/box/box-details.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">盲盒详情页</source>
      <description>盲盒详情页 首页首页 商品详情对话框商品详情对话框 表设计 订单详情页中多了商品信息，一个盲盒可以关联多个商品，商品可以被多个盲盒关联。 商品表 盲盒商品关系表 通过下面的sql即可查询出盲盒内的商品 盲盒信息 </description>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>首页</figcaption></figure>
<figure><figcaption>商品详情对话框</figcaption></figure>
<h2>表设计</h2>
<p>订单详情页中多了商品信息，一个盲盒可以关联多个商品，商品可以被多个盲盒关联。</p>
<h3>商品表</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> product
<span class="token punctuation">(</span>
    id             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>
    price          <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>
    cover          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'封面'</span><span class="token punctuation">,</span>
    brand          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'品牌'</span><span class="token punctuation">,</span>
    specifications <span class="token keyword">text</span>           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'规格参数'</span><span class="token punctuation">,</span>
    quality_type   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'品质类型（普通款，隐藏款，超神款）'</span>
    category_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'类别id（未用）'</span><span class="token punctuation">,</span>
    description    <span class="token keyword">text</span>           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'描述（未用）'</span><span class="token punctuation">,</span>
    tags           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'标签（未用）'</span><span class="token punctuation">,</span>
    attributes     <span class="token keyword">text</span>           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'属性（未用）'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'商品表'</span><span class="token punctuation">;</span>
</code></pre></div><h3>盲盒商品关系表</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> mystery_box_product_rel
<span class="token punctuation">(</span>
    id             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    mystery_box_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒'</span><span class="token punctuation">,</span>
    product_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'商品'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'盲盒-商品中间表'</span><span class="token punctuation">;</span>
</code></pre></div><p>通过下面的sql即可查询出盲盒内的商品</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">from</span> mystery_box t1
         <span class="token keyword">left</span> <span class="token keyword">join</span> mystery_box_product_rel t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>mystery_box_id
         <span class="token keyword">left</span> <span class="token keyword">join</span> product t3 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>product_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>id
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'ebf8f84d60814944a847e0de4bb1d8b4'</span> <span class="token comment">-- 盲盒id</span>
</code></pre></div><h2>盲盒信息</h2>

]]></content:encoded>
    </item>
    <item>
      <title>盲盒</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/box/box.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/box/box.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">盲盒</source>
      <description>盲盒 首页首页 表设计 观察首页可以看出和盲盒相关的表有“盲盒表”和“盲盒类别表”。 盲盒表 下面的这几个字段都很明显，除了“盲盒详情”这个字段目前没用到其他的在首页都可以看见 盲盒类别表 盲盒类别要支持可排序，图标和描述目前没用到。如果用侧边类别，可以使用图标。 盲盒展示 首先通过usePageHelper调用api.mysteryBoxForFro...</description>
      <pubDate>Sat, 31 Aug 2024 13:59:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>首页</figcaption></figure>
<h2>表设计</h2>
<p>观察首页可以看出和盲盒相关的表有“盲盒表”和“盲盒类别表”。</p>
<ul>
<li>
<p>盲盒表</p>
<p>下面的这几个字段都很明显，除了“盲盒详情”这个字段目前没用到其他的在首页都可以看见</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> mystery_box
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒名字'</span><span class="token punctuation">,</span>
    details      <span class="token keyword">text</span>           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'盲盒详情'</span><span class="token punctuation">,</span>
    tips         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'购买提示'</span><span class="token punctuation">,</span>
    price        <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>
    cover        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'封面'</span><span class="token punctuation">,</span>
    category_id  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'类别id'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'盲盒'</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p>盲盒类别表</p>
<p>盲盒类别要支持可排序，图标和描述目前没用到。如果用侧边类别，可以使用图标。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> mystery_box_category
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'类别名称'</span><span class="token punctuation">,</span>
    icon         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'类别图标'</span><span class="token punctuation">,</span>
    description  <span class="token keyword">text</span>         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>
    sort_order   <span class="token keyword">int</span>          <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'排序号'</span>
<span class="token punctuation">)</span>
    <span class="token keyword">comment</span> <span class="token string">'盲盒类别'</span><span class="token punctuation">;</span>
</code></pre></div></li>
</ul>
<h2>盲盒展示</h2>
<ul>
<li>首先通过<code>usePageHelper</code>调用<code>api.mysteryBoxForFrontController.query</code>（盲盒分页接口）</li>
<li><code>usePageHelper</code>会监听下拉触底事件并加载下一页</li>
<li>将盲盒数据传入<code>walter-fall</code>瀑布流组件，数据会被分割成左右两边，左右两边分的插槽用户传入自定义组件</li>
<li>在插槽中使用<code>product-cover</code>组件展示盲盒</li>
<li>触发点击事件跳转盲盒详情页</li>
</ul>

<h2>盲盒类别</h2>

<h3>类别展示</h3>
<ul>
<li>调用盲盒类别分页接口，<code>pageSize</code>设置到1000可以获取所有的类别，<code>sorts</code>设置按<code>sortOrder</code>升序</li>
<li>使用<code>scroll-view</code>组件使得类别可以横向滚动，需要搭配<code>white-space: nowrap;</code>，让所有内容强制在一行这样才会触发x轴滚动。</li>
</ul>
<h3>类别切换</h3>
<ul>
<li>定义<code>activeCategory</code>表示当前激活的类别</li>
<li>动态class，如果当前的类别id和激活的类别id相等用<code>active</code>class表示，在css中设置<code>active</code>的样式</li>
<li>点击类别时触发<code>handleChangeCategory</code>设置激活的类别，并重新加载盲盒信息，附带类别查询条件</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>观察<code>MysteryBoxRepository</code>你会发现我没有写任何查询条件的拼接，这边我使用了jimmer的<a href="https://babyfish-ct.github.io/jimmer-doc/zh/docs/quick-view/dsl/super_qbe" target="_blank" rel="noopener noreferrer">超级QBE</a>。</p>
<p>可以看见我这边定义了<code>id(category)</code>，意思就是当前端传入<code>categoryId</code>就会自动拼接到查询条件中。依次类推传入<code>details</code>就会使用<code>like '%details文本内容%'</code>自动拼接到查询条件中。</p>
<div class="language-txt" data-ext="txt" data-title="txt"><pre class="language-txt"><code>// src/main/dto/box/MysteryBox.dto
specification MysteryBoxSpec {
    #allScalars
    like/i(name)
    like/i(details)
    like/i(tips)
    id(creator)
    id(category)
}
</code></pre></div></div>
]]></content:encoded>
    </item>
    <item>
      <title>魔力赏盲盒小程序</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">魔力赏盲盒小程序</source>
      <pubDate>Mon, 26 Aug 2024 09:50:53 GMT</pubDate>
    </item>
    <item>
      <title>项目介绍</title>
      <link>https://mister-hope.github.io/blog/project/mystery-box/intro.html</link>
      <guid>https://mister-hope.github.io/blog/project/mystery-box/intro.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">项目介绍</source>
      <description>项目介绍 本项目模仿b站的魔力赏盲盒，每个盲盒中可以添加多个商品，支付成功后根据概率随机挑选盲盒内的商品。同时加入了VIP，优惠券，运费计算等功能。 项目预览 功能点 技术栈 微信小程序端 在小程序端我选择使用京东的Taro小程序开发框架。其实采用Taro，Uni-App，微信小程序官方语法这三个框架开发并没有多大的差别。它们的配置，目录结构，API，...</description>
      <pubDate>Mon, 26 Aug 2024 09:50:53 GMT</pubDate>
      <content:encoded><![CDATA[
<p>本项目模仿b站的魔力赏盲盒，每个盲盒中可以添加多个商品，支付成功后根据概率随机挑选盲盒内的商品。同时加入了VIP，优惠券，运费计算等功能。</p>
<h2>项目预览</h2>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<!-- ![地址列表](image-5.png =x500)

![长按地址-复制、设置默认](image-6.png =x500)

![地址保存](image-8.png =x500)

![地点选择](image-7.png =x500)

![优惠券选择](image-9.png =x500)

![选择地址和优惠券后的订单提交](image-10.png =x500)

![订单详情（可以支付或者取消订单）](image-11.png =x500)

![订单列表](image-12.png =x500)

![会员服务](image-13.png =x500)

![会员套餐](image-14.png =x500)

![个人页面](image-15.png =x500)

![个人资料](image-16.png =x500)

![问题反馈](image-17.png =x500) -->
<h2>功能点</h2>
]]></content:encoded>
    </item>
    <item>
      <title>文件问答</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/file-chat.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/file-chat.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">文件问答</source>
      <description>文件问答 如果你的数据量并没有非常的庞大，也不想做复杂的向量数据库构建，还有一种知识库方案就是直接读取文件的内容作为上下文问答。 文件问答文件问答 后端消息接收 之前接收前端的提问内容和拓展参数是这样的 现在为了接收文件，之前的json体就不适用了。因此需要将Content-Type 从 application/json 修改为 multipart/f...</description>
      <pubDate>Mon, 12 Aug 2024 08:32:44 GMT</pubDate>
      <content:encoded><![CDATA[
<p>如果你的数据量并没有非常的庞大，也不想做复杂的向量数据库构建，还有一种知识库方案就是直接读取文件的内容作为上下文问答。</p>
<figure><figcaption>文件问答</figcaption></figure>
<h2>后端消息接收</h2>
<p>之前接收前端的提问内容和拓展参数是这样的</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageWrapper</span> input<span class="token punctuation">)</span>
</code></pre></div><p>现在为了接收文件，之前的json体就不适用了。因此需要将Content-Type 从 <code>application/json</code> 修改为 <code>multipart/form-data</code>。<code>multipart/form-data</code>顾名思义可以接收多个part，每个part都可以有自己的内容类型。所以它支持既可以上次json，也可以上传文件二进制流。</p>
<p>参数解释：</p>
<ul>
<li>
<p>input: <code>AiMessageWrapper</code> json体。之前接收请求参数是用@RequestBody, 现在使用@RequestPart 接收json字符串再手动转成AiMessageWrapper.</p>
</li>
<li>
<p>file: 需要问答的文件。</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span> <span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>SpringMVC的<code>@RequestPart</code>是支持自动将Json字符串转换为Java对象，也就是说可以等效<code>@RequestBody</code>，但是由于前端FormData无法设置Part的Content-Type，所以只能手动转json字符串再转成Java对象。</p>
</div>
<h2>文件读取</h2>
<p>将接收到的文件传给<code>useFile</code>，该方法会使用<code>TikaDocumentReader</code>读取文件内容，并拼接到<code>System</code>中。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span> <span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AiMessageWrapper</span> aiMessageWrapper <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">AiMessageWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        * 忽略...
        */</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 启用文件问答</span>
                <span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>promptSystemSpec <span class="token operator">-&gt;</span> <span class="token function">useFile</span><span class="token punctuation">(</span>promptSystemSpec<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                * 忽略...
                */</span>                
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 和前端监听的事件相对应</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useFile</span><span class="token punctuation">(</span><span class="token class-name">ChatClient<span class="token punctuation">.</span>PromptSystemSpec</span> spec<span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">""</span>"
                已下内容是额外的知识，在你回答问题时可以参考下面的内容
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>图片理解</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/vision.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/vision.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">图片理解</source>
      <description>图片理解 模型配置 选择支持图片理解的模型 注意 如果使用的是灵积，需要注入private final DashScopeAiVLChatModel dashScopeAiVLChatModel;。 而不是private final DashScopeAiChatModel dashScopeAiChatModel;要不会报错。 图片上传 依赖引用 我...</description>
      <pubDate>Thu, 18 Jul 2024 09:55:53 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>模型配置</h2>
<p>选择支持图片理解的模型</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>    <span class="token key atrule">dash-scope</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">model</span><span class="token punctuation">:</span> qwen<span class="token punctuation">-</span>vl<span class="token punctuation">-</span>plus
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>如果使用的是灵积，需要注入<code>private final DashScopeAiVLChatModel dashScopeAiVLChatModel;</code>。<br>
而不是<code>private final DashScopeAiChatModel dashScopeAiChatModel;</code>要不会报错。</p>
</div>
<h2>图片上传</h2>
<h3>依赖引用</h3>
<p>我自己封装了一下阿里云、腾讯云、本地nginx的OSS上传starter</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.qifan777<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><h3>OSS配置</h3>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">oss</span><span class="token punctuation">:</span>
  <span class="token key atrule">provider</span><span class="token punctuation">:</span> ali_yun
  <span class="token comment"># 阿里云oss配置</span>
  <span class="token key atrule">ali-yun</span><span class="token punctuation">:</span>
    <span class="token key atrule">access-key-id</span><span class="token punctuation">:</span> xxx
    <span class="token key atrule">access-key-secret</span><span class="token punctuation">:</span> xxx
    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>qingdao.aliyuncs.com
    <span class="token key atrule">bucket-name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>community
  <span class="token comment"># 腾讯云oss配置</span>
  <span class="token key atrule">tencent</span><span class="token punctuation">:</span>
    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> wechat<span class="token punctuation">-</span>aaa
    <span class="token key atrule">secret-id</span><span class="token punctuation">:</span> xxx
    <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> xxx
    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing
</code></pre></div><h3>图片上传Controller</h3>
<p>接收前端图片，返回url</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"oss"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OSSController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OSSService</span> ossService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ossService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>前端上传</h3>
<p>使用<code>image-upload</code>组件，可以快速上传图片</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image-upload</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.image<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image-upload</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>发送媒体（图片）消息</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">发送消息</a>，在用户发送消息时，判断是否有图片，如果有，则添加到<code>medias</code>中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 图片/语音</span>
  <span class="token keyword">const</span> <span class="token literal-property property">medias</span><span class="token operator">:</span> AiMessage<span class="token punctuation">[</span><span class="token string">'medias'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    medias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'image'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> message<span class="token punctuation">.</span>image <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>SpringAI的<code>UserMessage</code>支持发送媒体对象，因此只需将接收的<code>medias</code>添加的<code>UserMessage</code>即可。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toPrompt</span><span class="token punctuation">(</span><span class="token class-name">ChatClient<span class="token punctuation">.</span>PromptUserSpec</span> promptUserSpec<span class="token punctuation">,</span> <span class="token class-name">AiMessageInput</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// AiMessageInput转成Message</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">AiMessageChatMemory</span><span class="token punctuation">.</span><span class="token function">toSpringAiMessage</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 用户发送的图片/语言</span>
            <span class="token class-name">Media</span><span class="token punctuation">[</span><span class="token punctuation">]</span> medias <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Media</span><span class="token punctuation">[</span>message<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            promptUserSpec<span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>medias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 用户发送的文本</span>
        promptUserSpec<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Company构建</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/company.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/company.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Company构建</source>
      <description>Company构建 Company节点 Company和Form的关联 通过cusip6关联Company和Form，然后使用merge语句创建FILED关系。 </description>
      <pubDate>Thu, 18 Jul 2024 07:14:16 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Company节点</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CompanyRepository</span> companyRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"nodes"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fileDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\workspace\\code\\learn\\sec-edgar-notebooks\\data\\sample\\form10k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> fileDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> form10K <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Form10K</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> company <span class="token operator">=</span> <span class="token class-name">Company</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cusip6</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getCusip6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">cusips</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getCusip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">names</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            companyRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>Company和Form的关联</h2>
<p>通过<code>cusip6</code>关联<code>Company</code>和<code>Form</code>，然后使用<code>merge</code>语句创建<code>FILED</code>关系。</p>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token keyword">match</span> <span class="token punctuation">(</span>com<span class="token operator">:</span><span class="token class-name">Company</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span> <span class="token keyword">where</span> com<span class="token punctuation">.</span>cusip6 <span class="token operator">=</span> f<span class="token punctuation">.</span>cusip6
<span class="token keyword">merge</span> <span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FILED</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"relationship/filed"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createFiledRelationship</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建公司和form关系</span>
        neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                        match (com:Company), (f:Form) where com.cusip6 = f.cusip6
                        merge (com)-[:FILED]-&gt;(form)
                        """</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>GraphRag案例</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/graph-rag.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/graph-rag.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">GraphRag案例</source>
      <description>GraphRag案例 Chunk RAG 为了防止大模型的context过大，我们一般会把原始的文本切割成小块然后嵌入到向量数据库中。当用户提问的时候就去向量数据库中查询相关的Chunk，这样就可以只取出原始文本的一小部分作为上下文信息给AI。 这样也会产生一个弊端，就是原始文本的结构丢失了，比如有些信息在这个Chunk的上面或者下面，但是被切割了导致...</description>
      <pubDate>Thu, 18 Jul 2024 07:14:16 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Chunk RAG</h2>
<p>为了防止大模型的context过大，我们一般会把原始的文本切割成小块然后嵌入到向量数据库中。当用户提问的时候就去向量数据库中查询相关的Chunk，这样就可以只取出原始文本的一小部分作为上下文信息给AI。</p>
<p>这样也会产生一个弊端，就是原始文本的结构丢失了，比如有些信息在这个Chunk的上面或者下面，但是被切割了导致信息丢失。下面我们借助图数据库的关系查询能力将Chunk结合上下游还原文本。</p>
<h3>关联上下游Chunk Cypher</h3>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token keyword">CALL</span> db<span class="token punctuation">.</span><span class="token keyword">index</span><span class="token punctuation">.</span>vector<span class="token punctuation">.</span><span class="token function">queryNodes</span><span class="token punctuation">(</span><span class="token string">'form_10k_chunks'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$embedding</span><span class="token punctuation">)</span>
<span class="token keyword">yield</span> <span class="token keyword">node</span><span class="token punctuation">,</span> score
<span class="token keyword">match</span> window<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">NEXT</span><span class="token operator">*</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token keyword">node</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">NEXT</span><span class="token operator">*</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token function">nodes</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token keyword">as</span> chunkList<span class="token punctuation">,</span> <span class="token keyword">node</span><span class="token punctuation">,</span> score
<span class="token keyword">unwind</span> chunkList <span class="token keyword">as</span> chunkRows
<span class="token keyword">with</span> <span class="token function">collect</span><span class="token punctuation">(</span>chunkRows<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token keyword">as</span> textList<span class="token punctuation">,</span> <span class="token keyword">node</span><span class="token punctuation">,</span> score
<span class="token keyword">return</span> apoc<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">(</span>textList<span class="token punctuation">,</span> <span class="token string">" \n "</span><span class="token punctuation">)</span>
</code></pre></div><ol>
<li>
<p><strong>查询相似节点</strong></p>
<p>查询语句接收一个向量，然后返回最相关的节点。这个向量一般是用户的提问通过模型生成的向量。如果你是要做推荐系统，这个地方的向量可以是其他节点的向量。<br>
<a href="/blog/project/spring-ai/graph/chunk.html#chunk%E5%B5%8C%E5%85%A5" target="_blank">Chunk Embeding</a>中已经创建了一个索引，使用<code>db.index.vector.queryNodes</code>在索引上查询到最相关的Chunk。</p>
</li>
<li>
<p><strong>窗口捕获</strong></p>
<p>可以看到，在查询语句中，最相关的Chunk以及下游节点被赋值到<code>window</code>中。由于<br>
并把这些Chunk距离为1的下游和下游节点也查出来，最大程度保证原始的文本结构不会丢失。</p>
<p>查询出来的结果差不多是这样的。由于我上面限制了只查询最相关的1个chunk，因此实际查询出来只有一条链。<br>
</p>
</li>
<li>
<p><strong>字符串拼接</strong><br>
通过<code>nodes</code>函数将Chunk链转成Chunk列表，然后使用<a href="https://neo4j.com/docs/cypher-manual/current/clauses/unwind/" target="_blank" rel="noopener noreferrer">unwind</a>关键字将Chunk列表转成行。<br>
使用<code>collect</code>函数对chunkRows转成文本列表，并调用存储过程<code>apoc.text.join</code>将文本列表转成文本。</p>
</li>
</ol>
<h3>Chunk RAG实现</h3>
<ol>
<li>用户的提问<code>query</code>转向量（<code>embed</code>）</li>
<li>使用<code>embed</code>作为查询参数传给上面介绍的查询语句，查询最相关的Chunk以及下游节点并转成文本（<code>result</code>）</li>
<li>创建<code>promptTemplate</code>模板，用于拼接上下文。</li>
<li><code>result</code>填充<code>promptTemplate</code>模板得到<code>content</code></li>
<li>将用户提问<code>query</code>和<code>content</code>拼接起来，调用chat模型</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 嵌入模型用灵积</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiEmbeddingModel</span> embeddingModel<span class="token punctuation">;</span>
    <span class="token comment">// 推荐使用kimi，上下文支持的token数比较大</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MoonshotChatModel</span> chatModel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Neo4jClient</span> neo4jClient<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">""</span>"
            <span class="token class-name">Context</span> information is below<span class="token punctuation">.</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Manager构建</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/manager.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/manager.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Manager构建</source>
      <description>Manager构建 Manager节点 使用easy-excel读取form13.csv文件，将数据映射成Manager对象，并保存到数据库中。 Manager和Company的关联 因为Manager和Company是多对多的关系，form13.csv相当于是中间表，通过它可以创建OWNS_STOCK_IN关系。因此下面我们遍历form13.csv，...</description>
      <pubDate>Thu, 18 Jul 2024 07:14:16 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Manager节点</h2>
<p>使用<code>easy-excel</code>读取<code>form13.csv</code>文件，将数据映射成<code>Manager</code>对象，并保存到数据库中。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Neo4jClient</span> neo4jClient<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> jacksonObjectMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ManagerRepository</span> managerRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Form13</span><span class="token punctuation">&gt;</span></span> <span class="token function">readForm13List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SyncReadListener</span> syncReadListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncReadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\workspace\\code\\learn\\sec-edgar-notebooks\\data\\sample\\form13.csv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Form13</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> syncReadListener<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> syncReadListener<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Form13</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"nodes"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Form13</span><span class="token punctuation">&gt;</span></span> form13List <span class="token operator">=</span> <span class="token function">readForm13List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 投资方可能投资了多个证券，所以会有重复的投资方记录，去重一下</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cikList <span class="token operator">=</span> form13List<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Form13</span><span class="token operator">::</span><span class="token function">getManagerCik</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 每个cik代表一个投资方，映射成Manager对象</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Manager</span><span class="token punctuation">&gt;</span></span> managerList <span class="token operator">=</span> cikList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cik <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Form13</span> manager <span class="token operator">=</span> form13List<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>form13 <span class="token operator">-&gt;</span> form13<span class="token punctuation">.</span><span class="token function">getManagerCik</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cik<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"投资公司不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setCik</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span><span class="token function">getManagerCik</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span><span class="token function">getManagerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span><span class="token function">getManagerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        managerRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>managerList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>Manager和Company的关联</h2>
<p>因为<code>Manager</code>和<code>Company</code>是多对多的关系，<code>form13.csv</code>相当于是中间表，通过它可以创建<code>OWNS_STOCK_IN</code>关系。因此下面我们遍历<code>form13.csv</code>，创建<code>OWNS_STOCK_IN</code>关系。</p>
<ol>
<li>根据<code>managerCik</code>和<code>cusip6</code>查询<code>Manager</code>和<code>Company</code>节点</li>
<li>创建<code>OWNS_STOCK_IN</code>关系，更新或者创建<code>OWNS_STOCK_IN</code>关系，如果已存在，则更新<code>reportCalendarOrQuarter</code></li>
<li>第一次创建设置关系的<code>value</code>、<code>shares</code>属性</li>
</ol>
<p>由于这个<code>Cypher</code>语句需要较多的参数，通过<code>toMap</code>方法将<code>Form13</code>对象转换为<code>Map</code>，然后通过<code>neo4jClient</code>的<code>bindAll</code>方法执行将参数传给<code>Cypher</code>语句。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"relationship/stock-in"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createStockInRelationship</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Form13</span><span class="token punctuation">&gt;</span></span> form13List <span class="token operator">=</span> <span class="token function">readForm13List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        form13List<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>form13 <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                            match (m:Manager {cik: $managerCik}), (com:Company {cusip6: $cusip6})
                            merge (m)-[owns:OWNS_STOCK_IN {reportCalendarOrQuarter: $reportCalendarOrQuarter}]-&gt;(com)
                            on create set
                                owns.value = $value,
                                owns.shares = $shares
                            """</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">bindAll</span><span class="token punctuation">(</span><span class="token function">toMap</span><span class="token punctuation">(</span>form13<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Form13</span> form13<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jacksonObjectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jacksonObjectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>form13<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>知识图谱RAG</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">知识图谱RAG</source>
      <pubDate>Wed, 17 Jul 2024 14:13:35 GMT</pubDate>
    </item>
    <item>
      <title>Chunk构建</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/chunk.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/chunk.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Chunk构建</source>
      <description>Chunk构建 nero4j安装 安装完neo4j访问localhost:7474, 默认的账号密码都是neo4j和neo4j。 依赖 配置 模型必须选上下文比较大的，下面这两个都可以，其他的ai厂家可以参考官网描述。 构建Chunk节点 节点定义 读取form10k文件夹下的json文件，每个json文件就代表一个form10k报表信息 将form1...</description>
      <pubDate>Wed, 17 Jul 2024 14:13:35 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>nero4j安装</h2>
<p>安装完neo4j访问<code>localhost:7474</code>, 默认的账号密码都是<code>neo4j</code>和<code>neo4j</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\</span>
    <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
    <span class="token parameter variable">-p</span> <span class="token number">7474</span>:7474 <span class="token parameter variable">-p</span> <span class="token number">7687</span>:7687 <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> neo4j-data:/data <span class="token parameter variable">-v</span> neo4j-data:/plugins <span class="token punctuation">\</span>
    <span class="token parameter variable">--name</span> neo4j <span class="token punctuation">\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">NEO4J_apoc_export_file_enabled</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">NEO4J_apoc_import_file_enabled</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">NEO4J_apoc_import_file_use__neo4j__config</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">NEO4JLABS_PLUGINS</span><span class="token operator">=</span><span class="token punctuation">\</span><span class="token punctuation">[</span><span class="token punctuation">\</span>"apoc<span class="token punctuation">\</span>"<span class="token punctuation">\</span><span class="token punctuation">]</span> <span class="token punctuation">\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">NEO4J_dbms_security_procedures_unrestricted</span><span class="token operator">=</span>apoc.<span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span>* <span class="token punctuation">\</span>
    neo4j
</code></pre></div><h2>依赖</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-neo4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>配置</h2>
<p>模型必须选上下文比较大的，下面这两个都可以，其他的ai厂家可以参考官网描述。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">neo4j</span><span class="token punctuation">:</span>
    <span class="token key atrule">authentication</span><span class="token punctuation">:</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> neo4j
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">12345678</span>
    <span class="token key atrule">uri</span><span class="token punctuation">:</span> bolt<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">7687</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">dash-scope</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">model</span><span class="token punctuation">:</span> qwen<span class="token punctuation">-</span>max<span class="token punctuation">-</span>longcontext
    <span class="token key atrule">moonshot</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> moonshot<span class="token punctuation">-</span>v1<span class="token punctuation">-</span>128k
</code></pre></div><h2>构建Chunk节点</h2>
<p>节点定义</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Node</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chunk</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token comment">// 切割后的文本</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token comment">// item1, item1a, item7, item7a</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item<span class="token punctuation">;</span>
    <span class="token comment">// Chunk序列号</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> chunkSeqId<span class="token punctuation">;</span>
    <span class="token comment">// 属于的Form</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> formId<span class="token punctuation">;</span>
    <span class="token comment">// text的embedding</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> textEmbedding<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol>
<li>读取form10k文件夹下的json文件，每个json文件就代表一个form10k报表信息</li>
<li>将form10k的json文件解析成Chunk节点，每个item会变解析成一个<code>List&lt;Chunk&gt;</code>，因此一个form节点有4个<code>List&lt;Chunk&gt;</code>。</li>
<li>将每个Chunk节点保存到neo4j中。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 创建Chunk节点，
     */</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fileDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\workspace\\code\\learn\\sec-edgar-notebooks\\data\\sample\\form10k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> fileDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            chunkRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span><span class="token function">fileToChunkList</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 解析form10k的中的item属性切割成Chunk
     *
     * <span class="token keyword">@param</span> <span class="token parameter">file</span> form10k的json文件
     * <span class="token keyword">@return</span> Chunk节点
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chunk</span><span class="token punctuation">&gt;</span></span> <span class="token function">fileToChunkList</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ObjectNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">ObjectNode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 每个form10k有item1，item1a，item7，item7a四种文本信息，都需要将切割</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item1a"</span><span class="token punctuation">,</span> <span class="token string">"item7"</span><span class="token punctuation">,</span> <span class="token string">"item7a"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chunk</span><span class="token punctuation">&gt;</span></span> chunks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 切割文本成</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 最多不超过20 Chunk</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> chunkSeqId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> chunkSeqId <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>documents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> chunkSeqId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> formId <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                chunks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Chunk</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"%s-%s-chunk%04d"</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>formId<span class="token punctuation">,</span> item<span class="token punctuation">,</span> chunkSeqId<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">chunkSeqId</span><span class="token punctuation">(</span>chunkSeqId<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">formId</span><span class="token punctuation">(</span>formId<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>documents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chunkSeqId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chunks<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>Chunk链接创建</h2>
<p>上面已经将Chunk节点保存到neo4j中，下面需要将同一个item的Chunk节点链接起来。</p>
<ol>
<li>查询所有的formId</li>
<li>查询每个formId下item1，item1a，item7，item7a四种文本信息对应的Chunk列表</li>
<li>然后按照chunkSeqId进行排序，然后通过<code>apoc.nodes.link</code>创建连接</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> formIds <span class="token operator">=</span> neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"match (c:Chunk) return distinct c.formId as formId"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">fetchAs</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 每个form10k有item1，item1a，item7，item7a四种文本信息，都需要将切割后的Chunk通过NEXT关联起来</span>
        formIds<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>formId <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item1a"</span><span class="token punctuation">,</span> <span class="token string">"item7"</span><span class="token punctuation">,</span> <span class="token string">"item7a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                                MATCH (c:Chunk) // 匹配所有的节点
                                WHERE c.formId = $formId // 属于同一个form和同一个item的节点
                                  AND c.item = $item
                                WITH c
                                  ORDER BY c.chunkSeqId ASC // 根据seqId排序一下节点
                                WITH collect(c) as section_chunk_list // 转成list
                                  CALL apoc.nodes.link(section_chunk_list, "NEXT", {avoidDuplicates: true}) // 节点之间依按顺序创建连接
                                RETURN size(section_chunk_list)
                                """</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>formId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">"formId"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>Chunk嵌入</h2>
<p>对所有Chunk进行embedding，neo4j中支持向量索引，只有创建索引之后才可以查询相似的向量</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"embedding"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createEmbedding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 随便将一段文本转成向量，看看这个嵌入模型的向量维度是多少</span>
        <span class="token keyword">int</span> dimension <span class="token operator">=</span> embeddingModel<span class="token punctuation">.</span><span class="token function">embed</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 在Chunk节点创建索引，使用cosine求向量之间的相似度</span>
        neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                        CREATE VECTOR INDEX `form_10k_chunks` IF NOT EXISTS
                        FOR (c:Chunk) ON (c.textEmbedding)
                        OPTIONS { indexConfig: {
                        `vector.dimensions`: $dimensions,
                        `vector.similarity_function`: 'cosine'
                        }}
                        """</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>dimension<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">"dimensions"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对那些没有嵌入的Chunk进行embedding</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chunk</span><span class="token punctuation">&gt;</span></span> waitToEmbedList <span class="token operator">=</span> chunkRepository<span class="token punctuation">.</span><span class="token function">findByTextEmbeddingIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        waitToEmbedList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>chunk <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//  调用嵌入模型将文本转向量</span>
            chunk<span class="token punctuation">.</span><span class="token function">setTextEmbedding</span><span class="token punctuation">(</span>embeddingModel<span class="token punctuation">.</span><span class="token function">embed</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chunkRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>waitToEmbedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>数据集</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/dataset.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/dataset.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">数据集</source>
      <description>数据集 本项目使用的数据集是美国证券交易委员会数据集，将该项目的python技术栈langchain+neo4j转成java的SpringDataNeo4j+SpringAI。 下面认识一下本次构建知识图谱使用的数据集 Form 10K Form 10-K是美国证券交易委员会（SEC）要求上市公司必须每年提交的有关其财务表现与公司运营的综合性报告，具体...</description>
      <pubDate>Wed, 17 Jul 2024 14:13:35 GMT</pubDate>
      <content:encoded><![CDATA[
<p>本项目使用的数据集是<a href="https://github.com/neo4j-examples/sec-edgar-notebooks/tree/main/data/sample" target="_blank" rel="noopener noreferrer">美国证券交易委员会数据集</a>，将该项目的python技术栈<code>langchain</code>+<code>neo4j</code>转成java的<code>SpringDataNeo4j</code>+<code>SpringAI</code>。</p>
<p>下面认识一下本次构建知识图谱使用的数据集</p>
<h2>Form 10K</h2>
<p>Form 10-K是美国证券交易委员会（SEC）要求上市公司必须每年提交的有关其财务表现与公司运营的综合性报告，具体来说包括公司历史，组织架构，财务状况，每股收益，分支机构，高管薪酬等信息。</p>
<p>下面是Form10K每个字段的解释</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Form10K</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 业务
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item1<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 危险因素
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item1a<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 管理层对财务状况及经营成果的探讨与分析。
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item7<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 市场风险的定量和定性披露
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item7a<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 中央索引键(CIK)用于证券交易委员会的计算机系统，用于识别已向证券交易委员会提交披露文件的公司和个人。
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cik<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 。CUSIP的创立是为了给北美的每一个证券一个唯一的代码，这样在清算的时候就不会因为名字相似而出错。
     * 注意它是为了给每一个证券一个唯一的代码，这个证券包括股票，期权，期货，政府债券，企业债券等所有的证券
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cusip<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * CUSIP的前六位是企业的代码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cusip6<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 公司的名称（包含别名，所以有多个）列表
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 该Form 10-K报告的原文
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个数据集可以构建<code>Company</code>、<code>Form</code>、<code>Chunk</code>三个节点。</p>
<p>也可以构建<code>FILED</code>、<code>SECTION</code>、<code>PART_OF</code>、<code>NEXT</code>这四种联。</p>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Company</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">FILED</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span> <span class="token comment">// 公司发布了Form10K报告</span>
<span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">SECTION</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span> <span class="token comment">// Form10K报告包含了多个段落</span>
<span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">PART_OF</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span> <span class="token comment">// Chunk属于Form10K</span>
<span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">NEXT</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>Chunk<span class="token punctuation">)</span>    <span class="token comment">// 比如item1被切割成4个段，这4个通过next依次连接。</span>
</code></pre></div><h2>Form13</h2>
<p>Form13包含投资方公司投资的其他公司、所持股份数量和投资价值的信息。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Form13</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * From13表格的原文链接
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> source<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 投资方公司的CIK，参考Form10K中的CIK解释
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> managerCik<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 投资方公司的名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> managerName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 投资方公司的地址
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> managerAddress<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * Form13报告发布的日期
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> reportCalendarOrQuarter<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 参考Form10K中的CUSIP6解释
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cusip6<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 参考Form10K中的CUSIP解释
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cusip<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 被投资公司的名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> companyName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 投资的金额
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> value<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 投资份额
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> shares<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Form13可以构建<code>Manager</code>节点和<code>OWNS_STOCK_IN</code>关联。</p>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Manager</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">OWNS_STOCK_IN</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token class-name">Company</span><span class="token punctuation">)</span> <span class="token comment">// 投资公司投资了其他公司</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Form构建</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/graph/form.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/graph/form.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Form构建</source>
      <description>Form构建 Form节点 先读取form10k数据，构建form节点 Form与Chunk的关联 PartOf关系 根据formId关联Chunk节点和Form节点，然后使用merge创建PART_OF关系。 Section关系 form关联Chunk链接的头节点，c.chunkSeqId=0代表该节点是开头。{item:c.item}是给SECTI...</description>
      <pubDate>Wed, 17 Jul 2024 14:13:35 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Form节点</h2>
<p>先读取form10k数据，构建form节点</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FormRepository</span> formRepository<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fileDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\workspace\\code\\learn\\sec-edgar-notebooks\\data\\sample\\form10k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> fileDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> form10K <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Form10K</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> fullText <span class="token operator">=</span> <span class="token string">"About "</span> <span class="token operator">+</span>
                           <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> form10K<span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                           <span class="token string">"..."</span> <span class="token operator">+</span>
                           form10K<span class="token punctuation">.</span><span class="token function">getItem1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                           <span class="token string">"\n"</span> <span class="token operator">+</span>
                           form10K<span class="token punctuation">.</span><span class="token function">getItem1a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                           <span class="token string">"\n"</span> <span class="token operator">+</span>
                           form10K<span class="token punctuation">.</span><span class="token function">getItem7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                           <span class="token string">"\n"</span> <span class="token operator">+</span>
                           form10K<span class="token punctuation">.</span><span class="token function">getItem7a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> formId <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token class-name">Form</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>formId<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">fullText</span><span class="token punctuation">(</span>fullText<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">cusip6</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getCusip6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>form10K<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            formRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>Form与Chunk的关联</h2>
<h3>PartOf关系</h3>
<p>根据formId关联<code>Chunk</code>节点和<code>Form</code>节点，然后使用<code>merge</code>创建<code>PART_OF</code>关系。</p>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token keyword">match</span> <span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span> <span class="token keyword">where</span> c<span class="token punctuation">.</span>formId<span class="token operator">=</span>f<span class="token punctuation">.</span>id
<span class="token keyword">merge</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">PART_OF</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"relationship/section"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createSectionRelationship</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                        match (c:Chunk),(f:Form) where c.chunkSeqId=0 and f.id = c.formId
                        merge (f)-[r:SECTION {item:c.item}] -&gt; (c)
                        return count(r)
                        """</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>Section关系</h3>
<p>form关联Chunk链接的头节点，<code>c.chunkSeqId=0</code>代表该节点是开头。<code>{item:c.item}</code>是给<code>SECTION</code>关系添加属性。之前说过一个form有多个<code>item</code>因此需要该属性做区分。</p>
<div class="language-cypher" data-ext="cypher" data-title="cypher"><pre class="language-cypher"><code><span class="token keyword">match</span> <span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token class-name">Chunk</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>f<span class="token operator">:</span><span class="token class-name">Form</span><span class="token punctuation">)</span> <span class="token keyword">where</span> c<span class="token punctuation">.</span>chunkSeqId<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">and</span> f<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>formId
<span class="token keyword">merge</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token class-name">SECTION</span> <span class="token punctuation">{</span>item<span class="token operator">:</span>c<span class="token punctuation">.</span>item<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"relationship/section"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createSectionRelationship</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        neo4jClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
                        match (c:Chunk),(f:Form) where c.chunkSeqId=0 and f.id = c.formId
                        merge (f)-[r:SECTION {item:c.item}] -&gt; (c)
                        return count(r)
                        """</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>V2fly内网穿透</title>
      <link>https://mister-hope.github.io/blog/tools/v2fly/</link>
      <guid>https://mister-hope.github.io/blog/tools/v2fly/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">V2fly内网穿透</source>
      <description>V2fly内网穿透 </description>
      <pubDate>Mon, 15 Jul 2024 02:36:05 GMT</pubDate>
      <content:encoded><![CDATA[
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> v2ray <span class="token parameter variable">-v</span> /home/v2ray/config.json:/etc/v2ray/config.json <span class="token parameter variable">-p</span> <span class="token number">9990</span>:9990 <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 v2fly/v2fly-core run <span class="token parameter variable">-c</span> /etc/v2ray/config.json 
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Agent（智能体）</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/agent.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/agent.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Agent（智能体）</source>
      <description>Agent（智能体） agent实际上也是一种Function call但是它内部还包含了一些Function call也就是tool。在Function Call中可以编写数据库查询，或者调用其他接口。也就是AI的记忆部分了。 前端实现 在前端的参数面板增加一个启用agent的按钮，点击后后端会把所有的agent加入function call中。 a...</description>
      <pubDate>Mon, 24 Jun 2024 06:11:39 GMT</pubDate>
      <content:encoded><![CDATA[
<p>agent实际上也是一种<code>Function call</code>但是它内部还包含了一些<code>Function call</code>也就是<code>tool</code>。在<code>Function Call</code>中可以编写数据库查询，或者调用其他接口。也就是AI的记忆部分了。</p>
<h2>前端实现</h2>
<p>在前端的参数面板增加一个启用agent的按钮，点击后后端会把所有的agent加入<code>function call</code>中。</p>
<h3>agent开关按钮</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>agent（智能体）<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options.enableAgent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>新增<code>enableAgent</code>记录是否启用agent</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>AiMessageParams<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  enableVectorStore<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  enableAgent<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>后端实现</h2>
<h3>@Agent注解</h3>
<p>在类上添加注解<code>@Agent</code>标识当前的类是一个<code>agent</code>。被<code>@Agent</code>标记的类意味着也被<code>@Component</code>标记了，也就是说它会注册为一个<code>Bean</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Agent</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre></div><p>可以从<code>ApplicationContext</code>中获取被<code>@Agent</code>标记的<code>Bean</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取带有Agent注解的bean</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beansWithAnnotation <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Agent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>抽象Agent</h3>
<p>有一些比较通用的方法可以抽取到抽象父类里面</p>
<ol>
<li>要实现<code>Function</code>接口</li>
<li>都要创建一个<code>ChatClient</code></li>
<li>获取内嵌的<code>Function</code>列表</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAgent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">,</span> <span class="token class-name">Resp</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">,</span> <span class="token class-name">Resp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> client<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 构建ChatClient方便子类使用
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatModel</span> 聊天模型
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractAgent</span><span class="token punctuation">(</span><span class="token class-name">DashScopeAiChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token class-name">ChatClient</span>
                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultFunctions</span><span class="token punctuation">(</span><span class="token function">getFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatClient</span> <span class="token function">getChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取内嵌的Function Call也就是Agent的Tools
     *
     * <span class="token keyword">@return</span> Function Call名称列表
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> classList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>aClass <span class="token operator">-&gt;</span> aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Description</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>classList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        classList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aClass <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> names<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>例子 电脑助手Agent</h3>
<ol>
<li>首先需要继承<code>AbstractAgent</code>，实现<code>Function</code>接口要填写两个泛型<code>Req</code>和<code>Resp</code>, 也就是当前<code>Agent</code>的入参类型和返类型。<br>
下面这个例子的入参是<code>ComputerAssistant.Request</code>，返回类型是<code>String</code>。</li>
<li>实现<code>apply</code>方法，调用父类的<code>getChatClient</code>它会自动将当前<code>Agent</code>中的<code>Function</code>加入到<code>Function Call</code>中，也就是将<code>DirectoryReader</code>和<code>CpuAnalyzer</code>自动添加。参考<a href="#%E6%8A%BD%E8%B1%A1agent">父类</a>的构造函数中的<code>.defaultFunctions(getFunctions())</code></li>
<li>使用<code>@Agent</code>标识，这样才会注册到容器中，并且被启用。</li>
<li>使用<code>@Description</code>描述<code>Agent</code>的作用，这样可以在多个<code>Agent</code>中根据意图选择相应的<code>Agent</code>。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Agent</span>
<span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">"提供关于当前主机的cpu，文件，文件夹相关问题的有用回答"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerAssistant</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAgent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ComputerAssistant<span class="token punctuation">.</span>Request</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>


    <span class="token keyword">protected</span> <span class="token class-name">ComputerAssistant</span><span class="token punctuation">(</span><span class="token class-name">DashScopeAiChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户原始的提问"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Component</span>
    <span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">"读取用户给定的文件夹，列出文件夹下的所有文件"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DirectoryReader</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DirectoryReader<span class="token punctuation">.</span>Request</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    out <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>
                <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">"本机文件夹的绝对路径"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Component</span>
    <span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">"读取CPU的数量"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CpuAnalyzer</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CpuAnalyzer<span class="token punctuation">.</span>Request</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>扫描Agent并启用</h3>
<p>当用户传入提问之后，大模型会从已有的<code>Agent</code>（被<code>@Agent</code>标注的类）中选择一个执行，如果没有匹配到大模型会自己回答。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageWrapper</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> functionBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果启用Agent则获取Agent的bean</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnableAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取带有Agent注解的bean</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beansWithAnnotation <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Agent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            functionBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>beansWithAnnotation<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            functionBeanNames <span class="token operator">=</span> beansWithAnnotation<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>functionBeanNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>promptUserSpec <span class="token operator">-&gt;</span> <span class="token function">toPrompt</span><span class="token punctuation">(</span>promptUserSpec<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// agent列表</span>
                <span class="token punctuation">.</span><span class="token function">functions</span><span class="token punctuation">(</span>functionBeanNames<span class="token punctuation">)</span>
                <span class="token comment">// 忽略...</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 和前端监听的事件相对应</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>知识库</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/knowledge.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/knowledge.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">知识库</source>
      <description>知识库 前端实现 参数面板参数面板 前端需要有一个知识库开关让用户决定本次的查询是否要使用知识库。也需要有一个上传文件的功能，提取出文件中的内容，然后转向量再存入向量数据库。 额外参数面板 这个面板可以放一些额外的参数，如后面还可以选择function call，设置模型参数等。 目前在这个面板我放了上传文档功能和知识库开关。 上传文件的时候要load...</description>
      <pubDate>Mon, 24 Jun 2024 06:11:39 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前端实现</h2>
<figure><figcaption>参数面板</figcaption></figure>
<p>前端需要有一个知识库开关让用户决定本次的查询是否要使用知识库。也需要有一个上传文件的功能，提取出文件中的内容，然后转向量再存入向量数据库。</p>
<h3>额外参数面板</h3>
<p>这个面板可以放一些额外的参数，如后面还可以选择<code>function call</code>，设置模型参数等。</p>
<p>目前在这个面板我放了上传文档功能和知识库开关。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>
            <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>embeddingLoading<span class="token punctuation">"</span></span>
            <span class="token attr-name">:action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`${API_PREFIX}/document/embedding`<span class="token punctuation">"</span></span>
            <span class="token attr-name">:show-file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
            <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onUploadSuccess<span class="token punctuation">"</span></span>
            <span class="token attr-name">:before-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeUpload<span class="token punctuation">"</span></span>
        <span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上传文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>知识库<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options.enableVectorStore<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上传文件的时候要loading一下，避免用户多次重复上传。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">API_PREFIX</span> <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_PREFIX</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  enableVectorStore<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> embeddingLoading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">onUploadSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  embeddingLoading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
  ElMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> beforeUpload<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'beforeUpload'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  embeddingLoading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>发送消息携带额外的参数</h3>
<p>根据后端实现可以知道，前端发送消息的时候，需要携带额外的参数，这里我直接在<code>body</code>中添加了<code>params</code>字段。也就是是否启用知识库</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>     
  <span class="token keyword">const</span> body<span class="token operator">:</span> AiMessageWrapper <span class="token operator">=</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> chatMessage<span class="token punctuation">,</span> params<span class="token operator">:</span> options<span class="token punctuation">.</span>value <span class="token punctuation">}</span>
  <span class="token keyword">const</span> evtSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">SSE</span></span><span class="token punctuation">(</span><span class="token constant">API_PREFIX</span> <span class="token operator">+</span> <span class="token string">'/message/chat'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 禁用自动启动，需要调用stream()方法才能发起请求</span>
    start<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">'POST'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>后续的消息回复逻辑请参考<a href="/blog/project/spring-ai/chat-page/frontend.html" target="_blank">聊天面板前端实现</a></p>
<h2>后端实现</h2>
<h3>消息dto改造</h3>
<p>将之前的 <code>AiMessageInput</code> 改造成 <code>AiMessageWrapper</code>，新增了一个 <code>params</code> 属性，用来传递一些参数。前端可以选择是否开启知识库。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageWrapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">AiMessageInput</span> message<span class="token punctuation">;</span>
    <span class="token class-name">AiMessageParams</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageParams</span> <span class="token punctuation">{</span>
    <span class="token class-name">Boolean</span> enableVectorStore<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>QuestionAnswerAdvisor</h3>
<p>之前已经介绍过<a href="/blog/project/spring-ai/rag.html" target="_blank">RAG</a>，请参考之前的教程。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">input</span> 消息包含文本信息，会话id，多媒体信息（图片语言）。参考src/main/dto/AiMessage.dto
     * <span class="token keyword">@return</span> SSE流
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithHistory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageWrapper</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>promptUserSpec <span class="token operator">-&gt;</span> <span class="token function">toPrompt</span><span class="token punctuation">(</span>promptUserSpec<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>advisorSpec <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 使用历史消息</span>
                    <span class="token function">useChatHistory</span><span class="token punctuation">(</span>advisorSpec<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果启用向量数据库</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnableVectorStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 使用向量数据库w</span>
                        <span class="token function">useVectorStore</span><span class="token punctuation">(</span>advisorSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 和前端监听的事件相对应</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useVectorStore</span><span class="token punctuation">(</span><span class="token class-name">ChatClient<span class="token punctuation">.</span>AdvisorSpec</span> advisorSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// question_answer_context是一个占位符，会替换成向量数据库中查询到的文档。QuestionAnswerAdvisor会替换。</span>
        <span class="token class-name">String</span> promptWithContext <span class="token operator">=</span> <span class="token string">""</span>"
                下面是上下文信息
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>知识库</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/knowledge/</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/knowledge/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">知识库</source>
      <pubDate>Thu, 20 Jun 2024 02:02:33 GMT</pubDate>
    </item>
    <item>
      <title>后端实现</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/knowledge/backend.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/knowledge/backend.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">后端实现</source>
      <description>后端实现 消息dto改造 将之前的 AiMessageInput 改造成 AiMessageWrapper，新增了一个 params 属性，用来传递一些参数。前端可以选择是否开启知识库。 QuestionAnswerAdvisor 之前已经介绍过，请参考之前的教程。 </description>
      <pubDate>Thu, 20 Jun 2024 02:02:33 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>消息dto改造</h2>
<p>将之前的 <code>AiMessageInput</code> 改造成 <code>AiMessageWrapper</code>，新增了一个 <code>params</code> 属性，用来传递一些参数。前端可以选择是否开启知识库。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageWrapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">AiMessageInput</span> message<span class="token punctuation">;</span>
    <span class="token class-name">AiMessageParams</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageParams</span> <span class="token punctuation">{</span>
    <span class="token class-name">Boolean</span> enableVectorStore<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>QuestionAnswerAdvisor</h2>
<p>之前已经介绍过<a href="/blog/project/spring-ai/rag.html" target="_blank">RAG</a>，请参考之前的教程。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">input</span> 消息包含文本信息，会话id，多媒体信息（图片语言）。参考src/main/dto/AiMessage.dto
     * <span class="token keyword">@return</span> SSE流
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithHistory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageWrapper</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>promptUserSpec <span class="token operator">-&gt;</span> <span class="token function">toPrompt</span><span class="token punctuation">(</span>promptUserSpec<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>advisorSpec <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 使用历史消息</span>
                    <span class="token function">useChatHistory</span><span class="token punctuation">(</span>advisorSpec<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果启用向量数据库</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnableVectorStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 使用向量数据库w</span>
                        <span class="token function">useVectorStore</span><span class="token punctuation">(</span>advisorSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 和前端监听的事件相对应</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useVectorStore</span><span class="token punctuation">(</span><span class="token class-name">ChatClient<span class="token punctuation">.</span>AdvisorSpec</span> advisorSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// question_answer_context是一个占位符，会替换成向量数据库中查询到的文档。QuestionAnswerAdvisor会替换。</span>
        <span class="token class-name">String</span> promptWithContext <span class="token operator">=</span> <span class="token string">""</span>"
                下面是上下文信息
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>前端实现</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/knowledge/frontend.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/knowledge/frontend.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">前端实现</source>
      <description>前端实现 </description>
      <pubDate>Thu, 20 Jun 2024 02:02:33 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>聊天面板</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/chat-page/</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/chat-page/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">聊天面板</source>
      <pubDate>Tue, 18 Jun 2024 14:44:49 GMT</pubDate>
    </item>
    <item>
      <title>后端实现</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/chat-page/backend.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/chat-page/backend.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">后端实现</source>
      <description>后端实现 后端实现会话和消息记录必然要先从建表开始，然后编写增删改查，最后实现一些功能。 会话 会话保存接口 会话保存dto 会话列表接口 获取当前登录用户id作为查询条件 一对多关联获取会话内的消息 会话删除接口 根据会话id列表批量删除 删除会话时，会话内的消息也一并级联删除 会话id查询接口 一对多关联获取会话内的消息 消息 消息发送接口 消息保...</description>
      <pubDate>Tue, 18 Jun 2024 14:44:49 GMT</pubDate>
      <content:encoded><![CDATA[
<p>后端实现会话和消息记录必然要先从建表开始，然后编写增删改查，最后实现一些功能。</p>
<p>会话</p>
<ul>
<li>会话保存接口
<ul>
<li>会话保存dto</li>
</ul>
</li>
<li>会话列表接口
<ul>
<li>获取当前登录用户id作为查询条件</li>
<li>一对多关联获取会话内的消息</li>
</ul>
</li>
<li>会话删除接口
<ul>
<li>根据会话id列表批量删除</li>
<li>删除会话时，会话内的消息也一并级联删除</li>
</ul>
</li>
<li>会话id查询接口
<ul>
<li>一对多关联获取会话内的消息</li>
</ul>
</li>
</ul>
<p>消息</p>
<ul>
<li>消息发送接口
<ul>
<li>消息保存dto（接收前端发送的消息）</li>
<li>消息实体内容设计，支持图片/语音/文字</li>
<li><code>MessageChatMemoryAdvisor</code>历史消息增强和消息自动保存，调用<code>AiMessageChatMemory</code>的<code>get</code>方法获取会话的历史消息和<code>add</code>方法保存消息。</li>
<li>使用<code>ChatClient</code>填写用户发送的消息（可能包含图片/语言），填写<code>MessageChatMemoryAdvisor</code>。最后发起流式请求，获取AI回复的消息。</li>
</ul>
</li>
<li>历史消息实现
<ul>
<li><code>add</code>方法，保存用户发送的消息和AI回复的消息。因为需要填写创建人id，创建人id是在请求里面存储的。保存的时候是在异步的线程里面，要模拟请求环境才能插入数据到数据库。</li>
<li><code>get</code>方法，获取会话历史消息</li>
<li><code>clear</code>方法，清空会话的历史消息</li>
<li>消息转换器，将消息实体转换为SpringAI的<code>Message</code>，将<code>Message</code>转换为消息实体。互相转换。</li>
</ul>
</li>
</ul>
<h2>实体设计</h2>
<h3>消息实体设计</h3>
<p>消息表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> ai_message
<span class="token punctuation">(</span>
    id            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time   <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">type</span>          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'消息类型(用户/ 助手/ 系统)'</span><span class="token punctuation">,</span>
    text_content  <span class="token keyword">text</span>        <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'消息内容'</span><span class="token punctuation">,</span>
    medias        json        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'媒体内容如图片链接、语音链接'</span><span class="token punctuation">,</span>
    ai_session_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'会话id'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>消息实体类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 历史消息
 */</span> 
<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AiMessage</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 消息类型(用户/助手/系统)
     */</span>
    <span class="token class-name">MessageType</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 消息内容
     */</span>
    <span class="token class-name">String</span> <span class="token function">textContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Serialized</span>
    <span class="token annotation punctuation">@Null</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Media</span><span class="token punctuation">&gt;</span></span> <span class="token function">medias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@IdView</span>
    <span class="token class-name">String</span> <span class="token function">sessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 会话
     */</span>
    <span class="token annotation punctuation">@ManyToOne</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ai_session_id"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@OnDissociate</span><span class="token punctuation">(</span><span class="token class-name">DissociateAction</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>
    <span class="token class-name">AiSession</span> <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@AllArgsConstructor</span>
    <span class="token keyword">class</span> <span class="token class-name">Media</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3>会话实体设计</h3>
<p>会话表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> ai_session
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'会话名称'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>会话实体类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 会话
 */</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AiSession</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 会话名称
     */</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 一对多关联消息，按创建时间升序
     */</span>

    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"session"</span><span class="token punctuation">,</span> orderedProps <span class="token operator">=</span> <span class="token annotation punctuation">@OrderedProp</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"createdTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AiMessage</span><span class="token punctuation">&gt;</span></span> <span class="token function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>AiMessageChatMemory（数据库消息记录）</h2>
<p><code>AiMessageChatMemory</code>实现了<code>ChatMemory</code>接口，用于保存聊天记录到数据库。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageChatMemory</span> <span class="token keyword">implements</span> <span class="token class-name">ChatMemory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AiMessageRepository</span> messageRepository<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 不实现，手动前端发起请求保存用户的消息和大模型回复的消息
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> conversationId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询会话内的消息最新n条历史记录
     *
     * <span class="token keyword">@param</span> <span class="token parameter">conversationId</span> 会话id
     * <span class="token keyword">@param</span> <span class="token parameter">lastN</span>          最近n条
     * <span class="token keyword">@return</span> org.springframework.ai.chat.messages.Message格式的消息
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> conversationId<span class="token punctuation">,</span> <span class="token keyword">int</span> lastN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> messageRepository
                <span class="token comment">// 查询会话内的最新n条消息</span>
                <span class="token punctuation">.</span><span class="token function">findBySessionId</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">,</span> lastN<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 转成Message对象</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AiMessageChatMemory</span><span class="token operator">::</span><span class="token function">toSpringAiMessage</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 清除会话内的消息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">conversationId</span> 会话id
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token class-name">String</span> conversationId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messageRepository<span class="token punctuation">.</span><span class="token function">deleteBySessionId</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 忽略...
     */</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以把<code>AiMessageChatMemory</code>注入到<code>MessageChatMemoryAdvisor</code>中。</p>
<p>MessageChatMemoryAdvisor的作用有下面三个</p>
<ol>
<li>用户消息发送给大模型之前，获取会话内的最新n条记录和用户的消息拼接在一起，形成历史消息记录。</li>
<li>拼接完历史消息之后把用户发送的消息保存到数据库。</li>
<li>大模型回复完消息之后，将回复的消息保存到数据库。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 注入chatMemory</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AiMessageChatMemory</span> chatMemory<span class="token punctuation">;</span>
<span class="token comment">// 传入chatMemory，会话id，查询最近n条历史消息</span>
<span class="token keyword">var</span> messageChatMemoryAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>消息发送接口</h2>
<p>通常来说发送消息给大模型只需要填写用户的消息就行，但是要支持历史会话需要获取历史消息。这个功能可以使用<a href="#aimessagechatmemory%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B6%88%E6%81%AF%E8%AE%B0%E5%BD%95">MessageChatMemoryAdvisor</a>来实现。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AiMessageController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AiMessageChatMemory</span> chatMemory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AiMessageRepository</span> messageRepository<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 消息保存
     * <span class="token keyword">@param</span> <span class="token parameter">input</span> 用户发送的消息/AI回复的消息
     */</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageInput</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     *
     * <span class="token keyword">@param</span> <span class="token parameter">input</span> 消息包含文本信息，会话id，多媒体信息（图片语言）。参考src/main/dto/AiMessage.dto
     * <span class="token keyword">@return</span> SSE流
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithHistory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AiMessageInput</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// MessageChatMemoryAdvisor的三个参数解释。</span>
        <span class="token comment">// 1. 如果需要存储会话和消息到数据库，自己可以实现ChatMemory接口，这里使用自己实现的AiMessageChatMemory，数据库存储。</span>
        <span class="token comment">// 2. 传入会话id，MessageChatMemoryAdvisor会根据会话id去查找消息。</span>
        <span class="token comment">// 3. 只需要携带最近10条消息</span>
        <span class="token keyword">var</span> messageChatMemoryAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>promptUserSpec <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// AiMessageInput转成Message</span>
                    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">AiMessageChatMemory</span><span class="token punctuation">.</span><span class="token function">toSpringAiMessage</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token keyword">instanceof</span> <span class="token class-name">UserMessage</span> userMessage <span class="token operator">&amp;&amp;</span>
                            <span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userMessage<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 用户发送的图片/语言</span>
                        <span class="token class-name">Media</span><span class="token punctuation">[</span><span class="token punctuation">]</span> medias <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Media</span><span class="token punctuation">[</span>userMessage<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        promptUserSpec<span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span>userMessage<span class="token punctuation">.</span><span class="token function">getMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>medias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 用户发送的文本</span>
                    promptUserSpec<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">// MessageChatMemoryAdvisor会在消息发送给大模型之前，从ChatMemory中获取会话的历史消息，然后一起发送给大模型。</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>messageChatMemoryAdvisor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token comment">// 和前端监听的事件相对应</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token class-name">ChatResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>前端实现</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/chat-page/frontend.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/chat-page/frontend.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">前端实现</source>
      <description>前端实现 聊天面板 前端的聊天面板组件是以chat-view.vue为核心，聊天面板的结构如下 聊天面板 会话面板（左） 标题（上） 会话列表（中），进入页面的时候获取用户的会话列表使用session-item组件，该组件有删除按钮点击触发handleDeleteSession 创建会话按钮（下）, 触发点击事件调用handleCreateSessio...</description>
      <pubDate>Tue, 18 Jun 2024 14:44:49 GMT</pubDate>
      <content:encoded><![CDATA[
<p><br>
前端的聊天面板组件是以<code>chat-view.vue</code>为核心，聊天面板的结构如下</p>
<ul>
<li>聊天面板
<ul>
<li>会话面板（左）
<ul>
<li>标题（上）</li>
<li>会话列表（中），进入页面的时候获取用户的会话列表使用<code>session-item</code>组件，该组件有删除按钮点击触发<code>handleDeleteSession</code></li>
<li>创建会话按钮（下）, 触发点击事件调用<code>handleCreateSession</code></li>
</ul>
</li>
<li>消息面板（右）
<ul>
<li>会话详情（上），可编辑会话名称调用<code>handleUpdateSession</code></li>
<li>消息列表（中），for循环遍历<code>activeSession</code>当前会话中的消息使用<code>message-row</code>组件展示文本消息、图片消息、语音消息</li>
<li>输入框使用（下），<code>message-input</code>组件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>会话列表</h2>
<figure><figcaption>会话列表</figcaption></figure>
<p>for循环遍历会话列表用会话组件显示，并监听点击事件和删除事件。点击时切换到被点击的会话，删除时从会话列表中提出被删除的会话。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 左侧的会话列表 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>AI助手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session-list<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 遍历会话列表 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-item</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session in sessionList<span class="token punctuation">"</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session.id<span class="token punctuation">"</span></span>
      <span class="token attr-name">:active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session.id === activeSession.id<span class="token punctuation">"</span></span>
      <span class="token attr-name">:session</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span>
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession = session<span class="token punctuation">"</span></span>
      <span class="token attr-name">@delete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDeleteSession<span class="token punctuation">"</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>
      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-right</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">"</span></span></span>
      <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ChatRound<span class="token punctuation">"</span></span>
      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSessionCreate<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>创建会话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>
    <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>会话的创建、删除、加载逻辑。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> activeSession <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>AiSession<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> sessionList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>AiSession<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleCreateSession</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>session<span class="token operator">:</span> AiSessionInput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>aiSessionController<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span> body<span class="token operator">:</span> session <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> sessionRes <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>aiSessionController<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> res <span class="token punctuation">}</span><span class="token punctuation">)</span>
  sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>sessionRes<span class="token punctuation">)</span>
  activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从会话列表中删除会话</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleDeleteSession</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>session<span class="token operator">:</span> AiSession<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> api<span class="token punctuation">.</span>aiSessionController<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> body<span class="token operator">:</span> <span class="token punctuation">[</span>session<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span>id <span class="token operator">===</span> session<span class="token punctuation">.</span>id
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查询自己的聊天会话</span>
  api<span class="token punctuation">.</span>aiSessionController<span class="token punctuation">.</span><span class="token function">findByUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 讲会话添加到列表中</span>
    sessionList<span class="token punctuation">.</span>value <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>row<span class="token punctuation">,</span> checked<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 默认选中的聊天会话是第一个</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">handleSessionCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><h2>消息发送和展示</h2>
<figure><figcaption>消息发送和展示</figcaption></figure>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 监听发送事件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message-input</span> <span class="token attr-name">@send</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSendMessage<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message-input</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>用户发送的逻辑，使用<code>sse.js</code>发送消息，并监听sse消息。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 回复消息的格式</span>
<span class="token keyword">type</span> <span class="token class-name">ChatResponse</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    usage<span class="token operator">:</span> <span class="token punctuation">{</span>
      totalTokens<span class="token operator">:</span> <span class="token builtin">number</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  result<span class="token operator">:</span> <span class="token punctuation">{</span>
    metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
      finishReason<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
    output<span class="token operator">:</span> <span class="token punctuation">{</span>
      messageType<span class="token operator">:</span> <span class="token builtin">string</span>
      content<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleSendMessage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> image<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeSession<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ElMessage<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'请创建会话'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 图片/语音</span>
  <span class="token keyword">const</span> medias<span class="token operator">:</span> AiMessage<span class="token punctuation">[</span><span class="token string">'medias'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    medias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">'image'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> message<span class="token punctuation">.</span>image <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 用户的提问</span>
  <span class="token keyword">const</span> chatMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sessionId<span class="token operator">:</span> activeSession<span class="token punctuation">.</span>value<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    medias<span class="token punctuation">,</span>
    textContent<span class="token operator">:</span> message<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token string">'USER'</span>
  <span class="token punctuation">}</span> satisfies AiMessage

  <span class="token comment">// 新建一个ChatGPT回复对象，不能重复使用同一个对象。</span>
  responseMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token string">'ASSISTANT'</span><span class="token punctuation">,</span>
    textContent<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    sessionId<span class="token operator">:</span> activeSession<span class="token punctuation">.</span>value<span class="token punctuation">.</span>id
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> evtSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">SSE</span></span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_PREFIX</span> <span class="token operator">+</span> <span class="token string">'/message/chat'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 禁用自动启动，需要调用stream()方法才能发起请求</span>
    start<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">'POST'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  evtSource<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token keyword">as</span> ChatResponse
    <span class="token keyword">const</span> finishReason <span class="token operator">=</span> response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>finishReason
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>output<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// dashscope不需要累加回复结果</span>
      responseMessage<span class="token punctuation">.</span>value<span class="token punctuation">.</span>textContent <span class="token operator">=</span> response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>output<span class="token punctuation">.</span>content
      <span class="token comment">// responseMessage.value.textContent += response.result.output.content</span>
      <span class="token comment">// 滚动到底部</span>
      <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        messageListRef<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> messageListRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>finishReason <span class="token operator">&amp;&amp;</span> finishReason<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'stop'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      evtSource<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 保存用户的提问</span>
      <span class="token keyword">await</span> api<span class="token punctuation">.</span>aiMessageController<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span> body<span class="token operator">:</span> chatMessage <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 保存大模型的回复</span>
      <span class="token keyword">await</span> api<span class="token punctuation">.</span>aiMessageController<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span> body<span class="token operator">:</span> responseMessage<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 调用stream，发起请求。</span>
  evtSource<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 将两条消息显示在页面中</span>
  activeSession<span class="token punctuation">.</span>value<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span>chatMessage<span class="token punctuation">,</span> responseMessage<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    messageListRef<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> messageListRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>遍历会话中的消息并展示</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageListRef<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 过渡效果 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message-row</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message in activeSession.messages<span class="token punctuation">"</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.id<span class="token punctuation">"</span></span>
      <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message-row</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>UNI-AI（AI聚合）</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/intro.html</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/intro.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">UNI-AI（AI聚合）</source>
      <description>UNI-AI（AI聚合） 项目内容 知识库 知识库知识库 图片生成 图片生成图片生成 图片理解 千问VL千问VL 智谱清言VL智谱清言VL 文本对话 markdown解析+流式对话+多种模型markdown解析+流式对话+多种模型 项目安装 docker-compose方式快速安装 源码方式安装 项目结构 uni-ai-admin 聊天界面+后台管理 ...</description>
      <pubDate>Tue, 18 Jun 2024 07:16:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>项目内容</h2>
<p>| 厂家     | 文本对话 | 图片理解 | 图片生成 | 知识库（向量数据库） | 预置角色 | 插件系统 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>嵌入模型</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/embedding.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/embedding.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">嵌入模型</source>
      <description>嵌入模型 如何用一段话去数据库查找数据？答案是向量求相似度。在高中的时候我们学过可以用cos求两个向量之间的夹角，cos值越大，夹角越小，夹角越小，相似度越高。 所以第一件事情需要将句子向量化，然后和向量数据库中的向量进行比较，找到最相似的向量。 嵌入模型就可以帮我们做到这件事情。 使用嵌入模型 请参考。本例使用的是阿里嵌入模型。 选择模型 文本嵌入 </description>
      <pubDate>Mon, 17 Jun 2024 02:38:08 GMT</pubDate>
      <content:encoded><![CDATA[
<p>如何用一段话去数据库查找数据？答案是向量求相似度。在高中的时候我们学过可以用cos求两个向量之间的夹角，cos值越大，夹角越小，夹角越小，相似度越高。</p>
<p>所以第一件事情需要将句子向量化，然后和向量数据库中的向量进行比较，找到最相似的向量。</p>
<p>嵌入模型就可以帮我们做到这件事情。</p>
<h2>使用嵌入模型</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">基础配置</a>。本例使用的是阿里嵌入模型。</p>
<p>选择模型</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>    <span class="token comment"># 阿里灵积</span>
    <span class="token key atrule">dash-scope</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">model</span><span class="token punctuation">:</span> qwen<span class="token punctuation">-</span>max
      <span class="token key atrule">embedding</span><span class="token punctuation">:</span>
        <span class="token comment"># 嵌入模型</span>
        <span class="token key atrule">model</span><span class="token punctuation">:</span> text<span class="token punctuation">-</span>embedding<span class="token punctuation">-</span>v2
</code></pre></div><p>文本嵌入</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 阿里嵌入模型</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiEmbeddingModel</span> embeddingModel<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">embeddingTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文本嵌入</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> embed <span class="token operator">=</span> embeddingModel<span class="token punctuation">.</span><span class="token function">embed</span><span class="token punctuation">(</span><span class="token string">"你好，我的名字是起凡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文本转换得到的向量: {}"</span><span class="token punctuation">,</span> embed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>ETL Pipeline</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/etl-pipeline.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/etl-pipeline.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">ETL Pipeline</source>
      <description>ETL Pipeline ETL是提取、转换、加载的缩写，从原始的文档到数据库需要经历提取（.doc、.ppt、.xlsx等）、转换（数据结构化、清理数据、数据分块）、写入向量数据库。这个过程可以进行多种处理，确保最后的数据适合AI问答。 SpringAI提供了ETL框架。它是搭建知识库框架的基石。 框架介绍 DocumentReader：文档读取器，...</description>
      <pubDate>Mon, 17 Jun 2024 02:38:08 GMT</pubDate>
      <content:encoded><![CDATA[
<p>ETL是提取、转换、加载的缩写，从原始的文档到数据库需要经历提取（.doc、.ppt、.xlsx等）、转换（数据结构化、清理数据、数据分块）、写入向量数据库。这个过程可以进行多种处理，确保最后的数据适合AI问答。</p>
<p>SpringAI提供了ETL框架。它是搭建知识库框架的基石。</p>
<h2>框架介绍</h2>
<ol>
<li>DocumentReader：文档读取器，读取文档，比如PDF、Word、Excel等。如：<code>JsonReader</code>（读取JSON）,<code>TextReader</code>（读取文本）,<code>PagePdfDocumentReader</code>（读取PDF）,<code>TikaDocumentReader</code>（读取各种文件，大部分都可以支持.pdf,.xlsx,.docx,.pptx,.md,.json等）。上诉的这些reader都是<code>DocumentReader</code>的实现类。</li>
<li>DocumentTransformer：文档转换器，处理文档。<code>TextSplitter</code>（文档切割成小块），<code>ContentFormatTransformer</code>（将文档变成键值对），<code>SummaryMetadataEnricher</code>（使用大模型总结文档），<code>KeywordMetadataEnricher</code>（使用大模型提取文档关键词）。</li>
<li>DocumentWriter: 文档写入器，将文档写入向量数据库或者本地文件。<code>VectorStore</code>（向量数据库写入器），<code>FileDocumentWriter</code>（文件写入器）。</li>
</ol>
<figure><figcaption>ETL 流水线结构图</figcaption></figure>
<h2>读取文件</h2>
<p><code>TikaDocumentReader</code>比较全能大部分文件都可以读取，支持的文件格式可以参考<a href="https://tika.apache.org/2.9.0/formats.html" target="_blank" rel="noopener noreferrer">官方文档</a>。如果是比较个性化文档的场景，最好自己实现一个<code>Reader</code>，比如我们公司的有些excel里面存了各种的表格数据这种只能自己去读取处理。使用读取器读出来的数据乱乱的。</p>
<p>引入依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><p>首先要明白<code>DocumentReader</code>会从<code>Resource</code>中读取文件。<code>Resource</code>是SpringIO中的一个接口，它表示一个资源，可以是文件、网络资源、内存资源等。<br>
下面举几个读取文件的例子</p>
<ol>
<li>
<p>从输入流中读取文件。像后端接收前端文件时，就可以使用。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SneakyThrows</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"read/multipart-file"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readMultipartFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从IO流中读取文件</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p>从本地文件读取文件。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">"D:\\简历.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p>从网络资源读取文件。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SneakyThrows</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span><span class="token string">"http://localhost/简历.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
</ol>
<p>为了体现资源的统一性我特意用<code>Resource</code>表示<code>InputStreamResource</code>、<code>FileSystemResource</code>、<code>UrlResource</code>。对于文档读取器来说，它不在乎文档来自哪里，只要它是一个<code>Resource</code>，它都可以读取。</p>
<h2>转换文档</h2>
<p><code>Document</code>对象是<code>ETL Pipeline</code>的核心对象，它包含了文档的元数据和内容。</p>
<p>内容转换器：</p>
<ul>
<li><code>TokenTextSplitter</code>：可以把内容切割成更小的块方便<code>RAG</code>的时候提升响应速度节省<code>Token</code>。</li>
<li><code>ContentFormatTransformer</code>：可以把元数据的内容变成键值对字符串。</li>
</ul>
<p>元数据转换器：</p>
<ul>
<li><code>SummaryMetadataEnricher</code>：使用大模型总结文档。会在元数据里面增加一个<code>summary</code>字段。</li>
<li><code>KeywordMetadataEnricher</code>：使用大模型提取文档关键词。可以在元数据里面增加一个<code>keywords</code>字段。</li>
</ul>
<p>从前端传来文件，使用<code>TikaDocumentReader</code>读取文件，然后使用<code>TokenTextSplitter</code>将文本内容划分成更小的块。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>存储文档</h2>
<p>经过前面的步骤，我们得到了一个文档列表，然后就可以将其存储到向量数据库或者本地文件中了。</p>
<p>向量数据库的依赖和创建请参考<a href="/blog/project/spring-ai/vector-database.html" target="_blank">向量数据库</a>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 注入向量数据库。</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"embedding"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">embedding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存入向量数据库，这个过程会自动调用embeddingModel,将文本变成向量再存入。</span>
        vectorStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>splitDocuments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>ChatClient发送消息</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/chat.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/chat.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">ChatClient发送消息</source>
      <description>ChatClient发送消息 下面是一个简单的ChatClient结合ChatModel的消息发送实例。 AI厂商接入 本案例使用的是阿里的灵积AI服务请参考。 其他AI厂商接入方式请参考下面的链接： 注入AI模型 我这边使用的阿里的灵积模型 非流式消息发送 需要注意ChatResponse来自org.springframework.ai.chat.m...</description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>下面是一个简单的ChatClient结合ChatModel的消息发送实例。</p>
<h2>AI厂商接入</h2>
<p>本案例使用的是阿里的灵积AI服务请参考<a href="/blog/project/spring-ai/config/dash-scope.html" target="_blank">灵积接入</a>。</p>
<p>其他AI厂商接入方式请参考下面的链接：<br>
<a href="/blog/project/spring-ai/config/qian-fan.html" target="_blank">百度千帆</a><br>
<a href="/blog/project/spring-ai/config/zhi-pu.html" target="_blank">智谱清言</a><br>
<a href="/blog/project/spring-ai/config/spark.html" target="_blank">讯飞星火</a><br>
<a href="/blog/project/spring-ai/config/kimi.html" target="_blank">kimi</a></p>
<h2>注入AI模型</h2>
<p>我这边使用的阿里的灵积模型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>非流式消息发送</h2>
<p>需要注意<code>ChatResponse</code>来自<code>org.springframework.ai.chat.model</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// AI模型基座，可以切换不同的AI厂商模型</span>
    <span class="token comment">// 阿里灵积</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 讯飞星火</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SparkAiChatModel</span> sparkAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 百度千帆</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">QianFanChatModel</span> qianFanChatModel<span class="token punctuation">;</span>
    <span class="token comment">// Kimi</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MoonshotChatModel</span> moonshotChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 智谱清言</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> zhiPuAiChatModel<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 非流式问答
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户提问
     * <span class="token keyword">@return</span> org.springframework.ai.chat.model.ChatResponse
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"chat"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatClient</span> chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 输入单条提示词</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
                <span class="token comment">// call代表非流式问答，返回的结果可以是ChatResponse，也可以是Entity（转成java类型），也可以是字符串直接提取回答结果。</span>
                <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>响应结果</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span>
    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"你好！有什么我能为你效劳的吗？"</span><span class="token punctuation">,</span>
    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>流式消息发送</h2>
<p>声明该接口的返回类型是文本流，然后将回答结果转成SSE格式的文本流，再配合前端sse请求，就可以实现流式问答了。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat/stream"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 流式问答
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户提问
     * <span class="token keyword">@return</span> Flux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ServerSentEvent</span> <span class="token attr-name">&lt;</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span>&gt; 流式响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat/stream"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStream</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 输入多条消息，可以将历史记录传入</span>
                <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span><span class="token string">"你是一个Java智能助手，应用你的Java知识帮助用户解决问题或者编写程序"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 流式返回</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 构造SSE（ServerSendEvent）格式返回结果</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将流式回答结果转json字符串
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatResponse</span> 流式回答结果
     * <span class="token keyword">@return</span> String json字符串
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token class-name">ChatResponse</span> chatResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>可以看到接口流式的响应，并且系统指令生效，AI知道自己是一个Java助手。</p>
<p>注意：灵积会把之前的响应内容累加起来。其他的AI厂家模型不会。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>event:message
data:{"result":{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好"},"metadata":{"finishReason":"null","contentFilterMetadata":null}},"metadata":{},"results":[{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好"},"metadata":{"finishReason":"null","contentFilterMetadata":null}}]}

event:message
data:{"result":{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好！很高兴"},"metadata":{"finishReason":"null","contentFilterMetadata":null}},"metadata":{},"results":[{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好！很高兴"},"metadata":{"finishReason":"null","contentFilterMetadata":null}}]}

....省略
event:message
data:{"result":{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好！很高兴能在这里帮助你。如果你有任何关于Java编程的问题、需要解决特定问题的代码示例或是想要了解Java某个概念，请随时告诉我。无论是基础语法、面向对象编程、集合框架、多线程、网络编程还是其他高级话题，我都乐于协助。你现在需要帮助吗？"},"metadata":{"finishReason":"stop","contentFilterMetadata":null}},"metadata":{},"results":[{"output":{"messageType":"ASSISTANT","media":[],"metadata":{"messageType":"ASSISTANT"},"content":"你好！很高兴能在这里帮助你。如果你有任何关于Java编程的问题、需要解决特定问题的代码示例或是想要了解Java某个概念，请随时告诉我。无论是基础语法、面向对象编程、集合框架、多线程、网络编程还是其他高级话题，我都乐于协助。你现在需要帮助吗？"},"metadata":{"finishReason":"stop","contentFilterMetadata":null}}]}
.....
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>FunctionCall</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/function-call.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/function-call.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">FunctionCall</source>
      <description>FunctionCall 本节的内容是：编写文档解析函数来学习SpringAi风格的Function Call 我们知道 AI 的能力是文本生成，但是遇到一些复杂的需求时如何让 ai 可以回答出用户的提问。比如我想让 ai 读取本地的某个文件然后回答文件里面的内容，那读取文件这个操作 ai 明显不会。因此我们可以编写函数来拓展 ai 的能力。 结构描述...</description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>本节的内容是：编写文档解析函数来学习<code>SpringAi</code>风格的<code>Function Call</code></p>
<p>我们知道 AI 的能力是文本生成，但是遇到一些复杂的需求时如何让 ai 可以回答出用户的提问。比如我想让 ai 读取本地的某个文件然后回答文件里面的内容，那读取文件这个操作 ai 明显不会。因此我们可以编写函数来拓展 ai 的能力。</p>
<h2>结构描述</h2>
<p>下面是一个简单的函数描述，把我们代码里面已有的函数转化成这种格式的描述。这样 ai 就可以知道什么时候去调用函数，以及调用函数时需要填哪些参数。</p>
<p>更加详细的结构请参考<a href="https://json-schema.org/understanding-json-schema/" target="_blank" rel="noopener noreferrer">JSON Scheme reference</a></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span>
  <span class="token property">"function"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"documentAnalyzerFunction"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"文档解析函数"</span><span class="token punctuation">,</span>
    <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>
          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"需要解析的文档路径"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"required"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>编写函数</h2>
<p>引入依赖，用于读取本地的文档</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>编写函数的步骤</p>
<ol>
<li>定义函数的入参和返回结果</li>
<li>实现<code>java.util.function.Function</code>表示它的一个可以被AI调用的函数</li>
<li>描述函数，SpringAi会自动将下面的Java注解转换成<a href="#function-call">function call</a>格式的描述
<ul>
<li><code>function.name</code>：<code>@Service</code>将该类注册为 spring bean，bean的名字会作为函数的名称。</li>
<li><code>function.description</code>: <code>@Description</code>可以描述函数的用途</li>
<li><code>function.parameters.properties.xxx</code>:  <code>@JsonProperty</code>描述参数的属性名称</li>
<li><code>function.parameters.required</code>: <code>@JsonProperty</code>是否必填</li>
<li><code>function.parameters.properties.xxx.description</code>: <code>@JsonPropertyDescription</code>描述参数的作用</li>
<li><code>function.parameters.properties.xxx.type</code>: String类型会自动生成<a href="https://json-schema.org/understanding-json-schema/reference/type" target="_blank" rel="noopener noreferrer">JSON Scheme reference</a>下的<code>string</code>类型，其他的<code>Integer</code>,<code>List</code>等类型也一样。</li>
</ul>
</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 通过@Description描述函数的用途，这样ai在多个函数中可以根据描述进行选择。
 */</span>
<span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">"文档解析函数"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocumentAnalyzerFunction</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DocumentAnalyzerFunction<span class="token punctuation">.</span>Request</span><span class="token punctuation">,</span> <span class="token class-name">DocumentAnalyzerFunction<span class="token punctuation">.</span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 通过@JsonProperty声明属性名称和是否必填
     * 通过@JsonPropertyDescription描述属性的用途，这样ai可以提取出符合参数描述的内容。
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">)</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"需要解析的文档路径"</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> path<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ai解析用户的提问得到path参数，使用tika读取本地文件获取内容。把读取到的内容再返回给ai作为上下文去回答用户的问题。</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre></div><h2>使用函数</h2>
<p>注入AI模型基座，可以切换不同的AI厂商模型。本案例使用的是阿里的灵积AI服务请参考<a href="/blog/project/spring-ai/config/dash-scope.html" target="_blank">灵积接入</a>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
</code></pre></div><p>具体哪些模型可以支持<code>function call</code>请阅读各个AI厂商的文档。其他AI厂商接入方式请参考下面的链接：<br>
<a href="/blog/project/spring-ai/config/qian-fan.html" target="_blank">百度千帆</a><br>
<a href="/blog/project/spring-ai/config/zhi-pu.html" target="_blank">智谱清言</a><br>
<a href="/blog/project/spring-ai/config/kimi.html" target="_blank">kimi</a><br>
星火模型目前还未适配<code>function call</code>功能。</p>
<p>在实际的开发中可以接收多个函数，通过<code>functions</code>参数传入。然后ai会根据提问从这些函数中选择一个执行。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 调用自定义函数回答用户的提问
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span>       用户的提问
     * <span class="token keyword">@param</span> <span class="token parameter">functionName</span> 函数名称（bean的名称，类名小写）
     * <span class="token keyword">@return</span> SSE流式响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat/stream/function"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithFunction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> functionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>kimiAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// spring ai会从已注册为bean的function中查找函数，将它添加到请求中。如果成功触发就会调用函数</span>
                <span class="token punctuation">.</span><span class="token function">functions</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>请求调用实例：</p>
<div class="language-txt" data-ext="txt" data-title="txt"><pre class="language-txt"><code>GET http://localhost:9902/message/chat/stream/function?prompt=D:\简历.pdf，这份简历的亮点是什么？&amp;functionName=documentAnalyzerFunction
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>对话记录（内存存储）</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/history.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/history.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">对话记录（内存存储）</source>
      <description>对话记录（内存存储） 为了让AI记住你和它的对话，需要把对话信息存储起来。当你N+1次和AI聊天的时候，需要把之前的N次对话都带上这样AI才能记住你和它的对话。 不过有时候为了节省Token，并不一定把所有的对话都带上，可以只携带前面几条对话。 基础模型的接入 本案例使用的是阿里的灵积AI服务请参考。 其他AI厂商接入方式请参考下面的链接： Messa...</description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>为了让AI记住你和它的对话，需要把对话信息存储起来。当你N+1次和AI聊天的时候，需要把之前的N次对话都带上这样AI才能记住你和它的对话。<br>
不过有时候为了节省<code>Token</code>，并不一定把所有的对话都带上，可以只携带前面几条对话。</p>
<h2>基础模型的接入</h2>
<p>本案例使用的是阿里的灵积AI服务请参考<a href="/blog/project/spring-ai/config/dash-scope.html" target="_blank">灵积接入</a>。</p>
<p>其他AI厂商接入方式请参考下面的链接：<br>
<a href="/blog/project/spring-ai/config/qian-fan.html" target="_blank">百度千帆</a><br>
<a href="/blog/project/spring-ai/config/zhi-pu.html" target="_blank">智谱清言</a><br>
<a href="/blog/project/spring-ai/config/spark.html" target="_blank">讯飞星火</a><br>
<a href="/blog/project/spring-ai/config/kimi.html" target="_blank">kimi</a></p>
<h2>MessageChatMemoryAdvisor</h2>
<p><code>MessageChatMemoryAdvisor</code>会读取会话id对应的消息列表，并把消息列表拼接到历史的消息中。</p>
<p>历史消息的实现过程：</p>
<ol>
<li>提供ChatMemory，通过会话id查找历史消息。下面的例子提供的是<code>InMemoryChatMemory</code>，内存存储。</li>
<li><code>MessageChatMemoryAdvisor</code>会在运行时调用<code>ChatMemory</code>，通过会话id查找历史消息。然后把消息列表拼接到历史的消息中。</li>
<li>发送消息给大模型得到答案</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// AI模型基座，可以切换不同的AI厂商模型</span>
    <span class="token comment">// 阿里灵积</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 模拟数据库存储会话和消息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMemory</span> chatMemory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryChatMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 根据会话id，从数据库中查找历史消息，并将消息作为上下文回答。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span>    用户的提问
     * <span class="token keyword">@param</span> <span class="token parameter">sessionId</span> 会话id
     * <span class="token keyword">@return</span> SSE流响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat/stream/history"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithHistory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">,</span>
                                                               <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> sessionId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 如果需要存储会话和消息到数据库，自己可以实现ChatMemory接口，</span>
        <span class="token comment">//    这里使用InMemoryChatMemory，内存存储。</span>
        <span class="token comment">// 2. 传入会话id，MessageChatMemoryAdvisor会根据会话id去查找消息。</span>
        <span class="token comment">// 3. 只需要携带最近10条消息</span>
        <span class="token keyword">var</span> messageChatMemoryAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
                <span class="token comment">// MessageChatMemoryAdvisor会在消息发送给大模型之前，从ChatMemory中获取会话的历史消息，</span>
                <span class="token comment">// 然后一起发送给大模型。</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>messageChatMemoryAdvisor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>项目介绍</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/intro.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/intro.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">项目介绍</source>
      <description>项目介绍 《动手学SpringAI》包含SSE流/Agent智能体/知识图谱RAG/FunctionCall/历史消息/图片生成/图片理解/Embedding/VectorDatabase/RAG 项目内容项目内容 知识点知识点 源码地址 </description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>《动手学SpringAI》包含SSE流/Agent智能体/知识图谱RAG/FunctionCall/历史消息/图片生成/图片理解/Embedding/VectorDatabase/RAG</p>
<figure><figcaption>项目内容</figcaption></figure>
<figure><figcaption>知识点</figcaption></figure>
<p><a href="https://github.com/qifan777/dive-into-spring-ai" target="_blank" rel="noopener noreferrer">源码地址</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>RAG(检索增强生成)</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/rag.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/rag.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">RAG(检索增强生成)</source>
      <description>RAG(检索增强生成) 要搭建自己的知识库除了文档嵌入到向量数据库之外，就是RAG了。当用户提问的时候先从想来数据库搜索相关的资料，再把相关的资料拼接到用户的提问中，再让模型生成答案。 文档嵌入 请参考，向数据库中插入一些自己的文档。 QuestionAnswerAdvisor QuestionAnswerAdvisor可以在用户发起的提问时，先向数据...</description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>要搭建自己的知识库除了文档嵌入到向量数据库之外，就是RAG了。当用户提问的时候先从想来数据库搜索相关的资料，再把相关的资料拼接到用户的提问中，再让模型生成答案。</p>
<h2>文档嵌入</h2>
<p>请参考<a href="/blog/project/spring-ai/vector-database.html#%E6%96%87%E6%A1%A3%E5%B5%8C%E5%85%A5" target="_blank">文档嵌入</a>，向数据库中插入一些自己的文档。</p>
<h2>QuestionAnswerAdvisor</h2>
<p><code>QuestionAnswerAdvisor</code>可以在用户发起的提问时，先向数据库查询相关的文档，再把相关的文档拼接到用户的提问中，再让模型生成答案。那就是<code>RAG</code>的实现了。</p>
<p><code>RAG</code>的实现过程：</p>
<ol>
<li><code>query</code> = 用户的提问；<code>template</code> = 提示词模板</li>
<li><code>QuestionAnswerAdvisor</code>会在运行时替换模板中的占位符<code>question_answer_context</code>，替换成向量数据库中查询到的文档，即<code>context=template.replace("question_answer_context",查询到的文档)</code>。此时的<code>contextQuery</code>=<code>query</code>+<code>context</code>;</li>
<li><code>contextQuery</code>发送给大模型得到答案</li>
</ol>
<p>正常的提问过程是<code>query</code>=用户的提问;<code>query</code>发送给大模型得到答案。<br>
对比<code>RAG</code>的提问过程可以发现多了提示词模板和向量数据库查询的过程。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 从向量数据库中查找文档，并将查询的文档作为上下文回答。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户的提问
     * <span class="token keyword">@return</span> SSE流响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"chat/stream/database"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithDatabase</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 定义提示词模板，question_answer_context会被替换成向量数据库中查询到的文档。</span>
        <span class="token class-name">String</span> promptWithContext <span class="token operator">=</span> <span class="token string">""</span>"
                下面是上下文信息
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>向量数据库</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/vector-database.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/vector-database.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">向量数据库</source>
      <description>向量数据库 向量数据库是AI记忆的核心组件，AI记忆除了历史的对话信息之外就是向量数据库中存储文档了，也就是大家常说的知识库。本节内容介绍如何向量数据库中存储文档和检索文档。为接下来的知识库(RAG)搭建做铺垫 基础模型的接入 本案例使用的是阿里的灵积AI服务请参考。 其他AI厂商接入方式请参考下面的链接： kimi和星火目前不支持文档嵌入。 安装Re...</description>
      <pubDate>Sat, 15 Jun 2024 15:08:23 GMT</pubDate>
      <content:encoded><![CDATA[
<p>向量数据库是AI记忆的核心组件，AI记忆除了历史的对话信息之外就是向量数据库中存储文档了，也就是大家常说的知识库。本节内容介绍如何向量数据库中存储文档和检索文档。为接下来的知识库(RAG)搭建做铺垫</p>
<h2>基础模型的接入</h2>
<p>本案例使用的是阿里的灵积AI服务请参考<a href="/blog/project/spring-ai/config/dash-scope.html" target="_blank">灵积接入</a>。</p>
<p>其他AI厂商接入方式请参考下面的链接：<br>
<a href="/blog/project/spring-ai/config/qian-fan.html" target="_blank">百度千帆</a><br>
<a href="/blog/project/spring-ai/config/zhi-pu.html" target="_blank">智谱清言</a></p>
<p>kimi和星火目前不支持文档嵌入。</p>
<h2>安装RedisStack</h2>
<p>需要先禁用掉自己原本的redis，防止端口冲突。访问<code>localhost:8001</code>查看数据库的信息。用户名：<code>default</code>,密码：<code>123456</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-stack <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  <span class="token parameter variable">-v</span> redis-data:/data <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token parameter variable">-e</span> <span class="token assign-left variable">REDIS_ARGS</span><span class="token operator">=</span><span class="token string">"--requirepass 123456"</span> redis/redis-stack:latest
</code></pre></div><h2>引入依赖</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-redis-store<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>配置连接</h2>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
        <span class="token key atrule">pool</span><span class="token punctuation">:</span>
          <span class="token comment"># 连接池最大连接数</span>
          <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>
          <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
          <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
          <span class="token comment"># 连接池中的最大空闲连接</span>
          <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token comment"># 连接池中的最小空闲连接</span>
          <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token key atrule">repositories</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre></div><h2>配置向量数据库</h2>
<p>如果你的项目里面有用到redis，需要先禁用<code>RedisVectorStoreAutoConfiguration</code>。这是SpringAI自动配置RedisStack的向量数据库连接，会导致Redis的连接配置冲突。</p>
<p><code>VectorStore</code>对象需要提供<code>EmbeddingModel</code>，这个案例提供的是阿里灵积的<code>EmbeddingModel</code>。可以切换换成其他厂家的EmbeddingModel。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 禁用SpringAI提供的RedisStack向量数据库的自动配置，会和Redis的配置冲突。</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RedisVectorStoreAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 读取RedisStack的配置信息</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RedisVectorStoreProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisVectorConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 创建RedisStack向量数据库
     *
     * <span class="token keyword">@param</span> <span class="token parameter">embeddingModel</span> 嵌入模型
     * <span class="token keyword">@param</span> <span class="token parameter">properties</span>     redis-stack的配置信息
     * <span class="token keyword">@return</span> vectorStore 向量数据库
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">VectorStore</span> <span class="token function">vectorStore</span><span class="token punctuation">(</span><span class="token class-name">DashScopeAiEmbeddingModel</span> embeddingModel<span class="token punctuation">,</span>
                                   <span class="token class-name">RedisVectorStoreProperties</span> properties<span class="token punctuation">,</span>
                                   <span class="token class-name">RedisConnectionDetails</span> redisConnectionDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisVectorStore<span class="token punctuation">.</span>RedisVectorStoreConfig</span> config <span class="token operator">=</span> <span class="token class-name">RedisVectorStore<span class="token punctuation">.</span>RedisVectorStoreConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIndexName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPrefix</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisVectorStore</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> embeddingModel<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">JedisPooled</span><span class="token punctuation">(</span>redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getStandalone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getStandalone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">,</span> redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                properties<span class="token punctuation">.</span><span class="token function">isInitializeSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>文档嵌入</h2>
<p>在上面的<code>VectorStore</code>配置中我们提供了<code>DashScopeAiEmbeddingModel</code>，调用<code>vectorStore.add(splitDocuments)</code>底层会把文档给<code>DashScopeAiEmbeddingModel</code>把文本变成向量然后再存入向量数据库。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
     * 嵌入文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">file</span> 待嵌入的文件
     * <span class="token keyword">@return</span> 是否成功
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"embedding"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">embedding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存入向量数据库，这个过程会自动调用embeddingModel,将文本变成向量再存入。</span>
        vectorStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>splitDocuments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>文档查询</h2>
<p>调用<code>vectorStore.similaritySearch(query)</code>时同样会先把用户的提问给<code>EmbeddingModel</code>，将提问变成向量，然后与向量数据库中的文档向量进行相似度计算（cosine值）。</p>
<p>要注意：此时向量数据库不会回答用户的提问。要回答用户的提问请参考后面的<code>RAG</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * 查询向量数据库
     *
     * <span class="token keyword">@param</span> <span class="token parameter">query</span> 用户的提问
     * <span class="token keyword">@return</span> 匹配到的文档
     */</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> vectorStore<span class="token punctuation">.</span><span class="token function">similaritySearch</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>SpringAI</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">SpringAI</source>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
    </item>
    <item>
      <title>快速上手</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">快速上手</source>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
    </item>
    <item>
      <title>通用配置</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/base.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/base.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">通用配置</source>
      <description>通用配置 依赖清单导入 spring-ai-bom是spring-ai官方的依赖统一管理。 uni-ai-bom是我自己用spring-ai风格实现了国内的一些ai厂家的api并封装成starter。 版本号 依赖 仓库配置 AI厂商配置 。 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>依赖清单导入</h2>
<p>spring-ai-bom是spring-ai官方的依赖统一管理。</p>
<p>uni-ai-bom是我自己用spring-ai风格实现了国内的一些ai厂家的api并封装成starter。</p>
<ol>
<li>
<p>版本号</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-ai.version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-ai.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-ai.version</span><span class="token punctuation">&gt;</span></span>0.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-ai.version</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-ai.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.qifan777<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>uni-ai-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${uni-ai.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<h2>仓库配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.maven.apache.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><h2>AI厂商配置</h2>
<p><a href="/blog/project/spring-ai/config/dash-scope.html" target="_blank">阿里灵积</a>。<br>
<a href="/blog/project/spring-ai/config/qian-fan.html" target="_blank">百度千帆</a><br>
<a href="/blog/project/spring-ai/config/zhi-pu.html" target="_blank">智谱清言</a><br>
<a href="/blog/project/spring-ai/config/spark.html" target="_blank">讯飞星火</a><br>
<a href="/blog/project/spring-ai/config/kimi.html" target="_blank">kimi</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>灵积（通义千问）接入</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/dash-scope.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/dash-scope.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">灵积（通义千问）接入</source>
      <description>灵积（通义千问）接入 通用配置 请参考 依赖配置 密钥配置 灵积 api-key申请 使用 消息发送案例 请参考 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>通用配置</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">通用配置</a></p>
<h2>依赖配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.qifan777<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-dashscope-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>密钥配置</h2>
<p><a href="https://dashscope.console.aliyun.com/apiKey" target="_blank" rel="noopener noreferrer">灵积 api-key申请</a></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token comment"># 阿里灵积</span>
    <span class="token key atrule">dash-scope</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">model</span><span class="token punctuation">:</span> qwen<span class="token punctuation">-</span>max
</code></pre></div><h2>使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>消息发送案例</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">消息发送</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Kimi接入</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/kimi.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/kimi.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Kimi接入</source>
      <description>Kimi接入 通用配置 请参考 依赖配置 密钥配置 kimi api-key申请 使用 消息发送案例 请参考 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>通用配置</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">通用配置</a></p>
<h2>依赖配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-moonshot-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>密钥配置</h2>
<p><a href="https://platform.moonshot.cn/console/api-keys" target="_blank" rel="noopener noreferrer">kimi api-key申请</a></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token comment"># kimi</span>
    <span class="token key atrule">moonshot</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
</code></pre></div><h2>使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MoonshotChatModel</span> moonshotChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>消息发送案例</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">消息发送</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>千帆（文言一心）接入</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/qian-fan.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/qian-fan.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">千帆（文言一心）接入</source>
      <description>千帆（文言一心）接入 通用配置 请参考 依赖配置 密钥配置 千帆 API Key和Secret Key申请 使用 消息发送案例 请参考 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>通用配置</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">通用配置</a></p>
<h2>依赖配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-qianfan-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>密钥配置</h2>
<p><a href="https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application" target="_blank" rel="noopener noreferrer">千帆 API Key和Secret Key申请</a></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token comment"># 百度千帆</span>
    <span class="token key atrule">qian-fan</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> xxx
</code></pre></div><h2>使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">QianFanChatModel</span> qianFanChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>消息发送案例</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">消息发送</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>讯飞星火接入</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/spark.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/spark.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">讯飞星火接入</source>
      <description>讯飞星火接入 通用配置 请参考 依赖配置 密钥配置 api-key、api-secret、appid申请地址 模型使用 消息发送案例 请参考 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>通用配置</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">通用配置</a></p>
<h2>依赖配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.qifan777<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-spark-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>密钥配置</h2>
<p><a href="https://console.xfyun.cn/app/myapp" target="_blank" rel="noopener noreferrer">api-key、api-secret、appid申请地址</a></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token comment"># 讯飞星火</span>
    <span class="token key atrule">spark</span><span class="token punctuation">:</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
        <span class="token key atrule">api-secret</span><span class="token punctuation">:</span> xxx
        <span class="token key atrule">appid</span><span class="token punctuation">:</span> xxx
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token comment"># 设置模型的domain</span>
          <span class="token key atrule">domain</span><span class="token punctuation">:</span> generalv3.5
          <span class="token comment"># 设置模型的baseUrl</span>
          <span class="token key atrule">base-url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//spark<span class="token punctuation">-</span>api.xf<span class="token punctuation">-</span>yun.com/v3.5/chat
</code></pre></div><h2>模型使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SparkAiChatModel</span> sparkAiChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>消息发送案例</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">消息发送</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>智谱清言接入</title>
      <link>https://mister-hope.github.io/blog/project/spring-ai/config/zhi-pu.html</link>
      <guid>https://mister-hope.github.io/blog/project/spring-ai/config/zhi-pu.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">智谱清言接入</source>
      <description>智谱清言接入 通用配置 请参考 依赖配置 密钥配置 智谱清言 api-key申请 使用 消息发送案例 请参考 </description>
      <pubDate>Wed, 12 Jun 2024 08:47:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>通用配置</h2>
<p>请参考<a href="/blog/project/spring-ai/config/base.html" target="_blank">通用配置</a></p>
<h2>依赖配置</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-zhipuai-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>密钥配置</h2>
<p><a href="https://maas.aminer.cn/usercenter/apikeys" target="_blank" rel="noopener noreferrer">智谱清言 api-key申请</a></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token comment"># 智谱</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> xxx
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span><span class="token number">4</span>
</code></pre></div><h2>使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> zhiPuAiChatModel<span class="token punctuation">;</span>
</code></pre></div><h2>消息发送案例</h2>
<p>请参考<a href="/blog/project/spring-ai/chat.html" target="_blank">消息发送</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>使用教程</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/use/</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/use/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">使用教程</source>
      <description>使用教程 AI厂商密钥配置 kimi api-key申请 智谱清言 api-key申请 百度千帆 access-key和secret-key 阿里灵积 api-key 讯飞星火 api-key、api-secret、appid 注意 有些ai厂商的api-key需要实名认证后才能使用，请务必确保先实名认证 将申请完的api-key填入对应ai厂商的配置...</description>
      <pubDate>Thu, 06 Jun 2024 02:02:31 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>AI厂商密钥配置</h2>
<p><a href="https://platform.moonshot.cn/console/api-keys" target="_blank" rel="noopener noreferrer">kimi api-key申请</a><br>
<a href="https://maas.aminer.cn/usercenter/apikeys" target="_blank" rel="noopener noreferrer">智谱清言 api-key申请</a><br>
<a href="https://console.bce.baidu.com/iam/#/iam/accesslist" target="_blank" rel="noopener noreferrer">百度千帆 access-key和secret-key</a><br>
<a href="https://dashscope.console.aliyun.com/apiKey" target="_blank" rel="noopener noreferrer">阿里灵积 api-key</a><br>
<a href="https://console.xfyun.cn/app/myapp" target="_blank" rel="noopener noreferrer">讯飞星火 api-key、api-secret、appid</a></p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>有些ai厂商的api-key需要实名认证后才能使用，请务必确保先实名认证</p>
</div>
<p>将申请完的api-key填入对应ai厂商的配置页面即可。<br>
</p>
<h2>知识库</h2>
<h3>新建知识库</h3>
<p>菜单路径：Ai助手/知识库</p>
<figure><figcaption>知识库创建</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>知识库的英文名称只能包含字母和_</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>目前有四种嵌入模型embedding-2，bge-large-en，text-embedding-v2，text-embedding-3-small分别来自智谱清言、百度千帆、阿里灵积、OpenAi</p>
</div>
<h3>上传文档</h3>
<p>菜单路径：Ai助手/文档管理</p>
<figure><figcaption>上传文档</figcaption></figure>
<h3>知识库问答</h3>
<p>菜单路径：Ai助手/聊天面板</p>
<p>在面板中开启知识库，选择知识库发送消息即可。<br>
</p>
<h2>图片理解</h2>
<h3>OSS配置</h3>
<p>菜单路径：Ai配置/OSS配置</p>
<p>要使用图片理解要发送图片，图片必须公网可以访问。因此在创建OSS的时候要设置bucket的策略为共有读</p>
<p>目前可以支持阿里云OSS和腾讯云OSS.</p>
<figure><figcaption>OSS配置</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>创建bucket记得设置共有读。允许所有域名访问。</p>
</div>
<h3>发送图片</h3>
<p>菜单路径：Ai助手/聊天面板/模型类别</p>
<p>在模型类别中选择图片理解，并且在下面的模型中选择需要的模型。最好选择国内的模型。<br>
接着在输入框那边选择图片发送即可。</p>
<figure><figcaption>模型类型选择</figcaption></figure>
<h2>图片生成</h2>
<p>菜单路径：Ai助手/聊天面板/模型类别</p>
<p>在模型类别中选择图片生成，并且在下面的模型中选择需要的模型。最好选择国内的模型。<br>
接着在输入框发送提示词即刻生成图片。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>目前图片生成的api不支持上下文。因此描述的时候描述的详细一些。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>UNI-AI</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">UNI-AI</source>
      <pubDate>Mon, 03 Jun 2024 15:37:39 GMT</pubDate>
    </item>
    <item>
      <title>快速上手</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/get-started/</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/get-started/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">快速上手</source>
      <pubDate>Mon, 03 Jun 2024 15:37:39 GMT</pubDate>
    </item>
    <item>
      <title>Docker Compose运行</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/get-started/docker-compose-run.html</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/get-started/docker-compose-run.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Docker Compose运行</source>
      <description>Docker Compose运行 获取源码 运行DockerCompose 导入数据库 用可视化工具连接localhost:3308，用户名：root，密码：123456。 在uni_ai库下执行uni-ai-backend/scripts/database.sql。 访问 访问http://localhost:8877。 账户：11111111111...</description>
      <pubDate>Mon, 03 Jun 2024 15:37:39 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>获取源码</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone  https://github.com/qifan777/uni-ai
</code></pre></div><h2>运行DockerCompose</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> uni-ai/uni-ai-backend/scrips
<span class="token function">docker-compose</span> up <span class="token parameter variable">-dc</span>
</code></pre></div><h2>导入数据库</h2>
<p>用可视化工具连接<code>localhost:3308</code>，用户名：<code>root</code>，密码：<code>123456</code>。<br>
在<code>uni_ai</code>库下执行<code>uni-ai-backend/scripts/database.sql</code>。</p>
<h2>访问</h2>
<p>访问<code>http://localhost:8877</code>。</p>
<p>账户：11111111111<br>
密码：123456</p>
<h2>API-KEY配置</h2>
<p>请参考<a href="/blog/project/uni-ai/use/#ai%E5%8E%82%E5%95%86%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE" target="_blank">API-KEY配置</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>源码运行</title>
      <link>https://mister-hope.github.io/blog/project/uni-ai/get-started/source-run.html</link>
      <guid>https://mister-hope.github.io/blog/project/uni-ai/get-started/source-run.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">源码运行</source>
      <description>源码运行 源码获取 后端运行 redis-stack安装 redis-stack在redis的基础上增加了向量数据库的功能 mysql安装 jdk17 国内jdk下载镜像 导入项目 idea导入uni-ai。里面包含了uni-ai-admin和uni-ai-backend。 配置数据库 运行uni-ai-backend/scripts/database...</description>
      <pubDate>Mon, 03 Jun 2024 15:37:39 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>源码获取</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone  https://github.com/qifan777/uni-ai
</code></pre></div><h2>后端运行</h2>
<h3>redis-stack安装</h3>
<p>redis-stack在redis的基础上增加了向量数据库的功能</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-stack <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  <span class="token parameter variable">-v</span> redis-data:/data <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token parameter variable">-e</span> <span class="token assign-left variable">REDIS_ARGS</span><span class="token operator">=</span><span class="token string">"--requirepass 123456"</span> redis/redis-stack:latest
</code></pre></div><h3>mysql安装</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
<span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai  <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>uni_ai <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> mysql-data:/var/lib/mysql <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
mysql:8.0.26 <span class="token punctuation">\</span>
mysqld --character-set-server<span class="token operator">=</span>utf8mb4 <span class="token punctuation">\</span>
--collation-server<span class="token operator">=</span>utf8mb4_unicode_ci  
</code></pre></div><h3>jdk17</h3>
<p><a href="https://injdk.cn/" target="_blank" rel="noopener noreferrer">国内jdk下载镜像</a></p>
<h3>导入项目</h3>
<p>idea导入uni-ai。里面包含了uni-ai-admin和uni-ai-backend。</p>
<h3>配置数据库</h3>
<p>运行<code>uni-ai-backend/scripts/database.sql</code>下的数据库脚本，导入表结构信息。修改uni-ai-backend/server/src/main/resources/application-dev.yml下的数据库密码和redis密码。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>如果数据库和redis-stack的安装方式是使用我上面提供的docker命令，密码都是123456.</p>
</div>
<h3>配置密钥</h3>
<p><a href="/blog/project/uni-ai/use/#ai%E5%8E%82%E5%95%86%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE" target="_blank">申请密钥</a>完之后将相关信息填入<code>uni-ai-backend/server/src/main/resources/application.yml</code>。</p>
<h3>运行后端服务</h3>
<p><code>uni-ai-backend/server/src/main/java/io/qifan/server/ServerApplication.java</code></p>
<h2>前端运行</h2>
<h3>node.js安装</h3>
<p>由于本项目是用vue3写的，需要较高本吧的node。去官网下载新版的<a href="https://nodejs.org/en" target="_blank" rel="noopener noreferrer">node.js</a>也可以使用nvm管理不同版本的node。</p>
<h3>依赖安装</h3>
<p>在<code>uni-ai-admin目录</code>执行</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre></div><h3>API同步</h3>
<p>确保后端已启动，然后执行下面的命令。它可以把后端接口同步到前端，并且会生成每个接口的入参和返回类型的ts类型。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> run api-admin
</code></pre></div><h3>启动</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre></div><h3>访问</h3>
<p>访问 <code>http://localhost:5177</code></p>
<p>账户：11111111111<br>
密码：123456</p>
]]></content:encoded>
    </item>
    <item>
      <title>实现消息99+角标</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/badge/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/badge/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">实现消息99+角标</source>
      <description>实现消息99+角标 最终效果最终效果 使用element-plus图标 由于message-wrapper是div元素（默认盒子模型是block）会占满整行，将message-wrapper的盒子模型设置为inline-block，这样就可以让message-wrapper的宽度和图标message的宽度一样。 没有设置没有设置inline-block...</description>
      <category>消息角标</category>
      <pubDate>Sat, 02 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>最终效果</figcaption></figure>
<h2>使用element-plus图标</h2>
<p>由于<code>message-wrapper</code>是div元素（默认盒子模型是<code>block</code>）会占满整行，将<code>message-wrapper</code>的盒子模型设置为<code>inline-block</code>，这样就可以让<code>message-wrapper</code>的宽度和图标<code>message</code>的宽度一样。</p>
<figure><figcaption>没有设置<code>inline-block</code></figcaption></figure>
<p>可以看到<code>message-wrapper</code>的宽度和浏览器的宽度一样。</p>
<figure><figcaption>设置了<code>inline-block</code></figcaption></figure>
<p>设置了<code>inline-block</code>后，<code>message-wrapper</code>的宽度和图标<code>message</code>的宽度一样。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Message</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.message-wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>父相子绝</h2>
<p>由于数字99+要固定在父亲元素的右上角，所以这种情况需要让父亲是相对布局，子元素是绝对布局。然后让子元素的top和right为0，这样就实现了固定在右上角的效果。</p>
<p>如果不设置父亲元素的相对布局，子元素的top和right为0，那么子元素就会在窗口的右上角，而不是在父元素的右上角。</p>
<figure><figcaption>父亲元素没有设置相对布局</figcaption></figure>
<p>此时消息99+会出现在窗口的右上角。</p>
<figure><figcaption>父亲元素设置了相对布局</figcaption></figure>
<p>此时消息99+会出现在父元素的右上角。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Message</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>99+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.message-wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token selector">.num</span> <span class="token punctuation">{</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> -12px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><h2>数字提示样式</h2>
<h3>文字垂直具中</h3>
<p>需要注意的是此处设置了<code>num</code>的<code>height: 14px;</code> 为了让文字在垂直方向上具中，需要同时设置<code>line-height: 14px;</code>。</p>
<figure><figcaption>设置<code>height: 30px;</code>没有设置<code>line-height: 30px;</code></figcaption></figure>
<p>可以看加此时文字没有在垂直方向上没局中。</p>
<figure><figcaption>设置<code>height: 30px;</code>同时也设置<code>line-height: 30px;</code></figcaption></figure>
<p><code>height: 30px;</code>同时设置<code>line-height: 30px;</code>后，文字在垂直方向上居中。</p>
<h3>圆角</h3>
<p>文字本来就在垂直方向上具中那为什么要大费周折的设置<code>height</code>和<code>line-height</code>呢？因为圆角需要。</p>
<p>为了让数字的红色背景呈现胶囊形状，即<code>border-radius: ?px;</code>其中的<code>?</code>要等于高度的一半。</p>
<p>最后再加一点点左右的<code>padding: 0 4px;</code>就呈现胶囊形状了。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Message</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>99+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.message-wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token selector">.num</span> <span class="token punctuation">{</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> -12px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0 4px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>API(Controller层)</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/api/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/api/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">API(Controller层)</source>
      <description>API(Controller层) @Controller 在SpringMVC中 Controller层可以提供WEB服务，返回视图结果（ViewResult）、JSON、重定向等，通常用来渲染完整的HTML页面或者片段。 @RestController 针对专门提供JSON的WEB服务，可以使用SpringMVC提供的RESTful风格的Contro...</description>
      <category>SpringMVC</category>
      <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>@Controller</h2>
<p>在SpringMVC中 Controller层可以提供WEB服务，返回视图结果（ViewResult）、JSON、重定向等，通常用来渲染完整的HTML页面或者片段。</p>
<h2>@RestController</h2>
<p>针对专门提供JSON的WEB服务，可以使用SpringMVC提供的RESTful风格的Controller即@RestController，也就是人们常说的API。</p>
<h2>@RequestMapping(GetMapping/PostMapping/PutMapping/DeleteMapping等)</h2>
<p>既可以应用在类级别也可以应用在方法级别</p>
<ul>
<li>在类级别上代表的是所有方法的路径都加上前缀。</li>
<li>在方法级别上用于映射HTTP请求到相应的处理方法上。</li>
<li>可以指定请求的路径、HTTP方法（GET, POST等）、以及请求参数约束等。</li>
</ul>
<h2>@RequestParam</h2>
<p><code>@RequestParam</code> 注解在 Spring MVC 及 Spring Boot 应用程序中主要用于从不同的HTTP请求方法（GET、POST等）的请求参数中获取参数值。具体来说，它可以：</p>
<ol>
<li>
<p><strong>从URL查询字符串</strong> 中获取参数，对于GET请求尤其常见，例如：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET /api/users?name=John&amp;age=30
</code></pre></div><p>在后端控制器方法中可以通过 <code>@RequestParam("name") String name</code> 来获取 "John"。</p>
</li>
<li>
<p><strong>从POST表单数据</strong> 中获取参数，特别是当Content-Type设置为<code>application/x-www-form-urlencoded</code>时：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>POST /api/users
Content-Type: application/x-www-form-urlencoded
name=John&amp;age=30
</code></pre></div></li>
<li>
<p>对于 <code>multipart/form-data</code> 类型的请求，虽然通常用于文件上传，但也包含非文件字段，这些字段也可以通过 <code>@RequestParam</code> 获取。</p>
</li>
</ol>
<p>因此，<code>@RequestParam</code> 主要作用于标准HTTP请求中的查询字符串或编码为 <code>x-www-form-urlencoded</code> 格式的请求主体内容。而对于JSON或者其他复杂格式的数据，通常需要使用 <code>@RequestBody</code> 注解来处理。</p>
<h2>@RequestBody</h2>
<p>Spring会利用HttpMessageConverter接口实现类（如MappingJackson2HttpMessageConverter）将HTTP请求体中的JSON或XML数据转换为Java对象，并将其注入到标记了@RequestBody的方法参数中。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将HTTP请求体中的JSON或XML数据反序列化为User对象</span>
    <span class="token comment">// 然后在此处对User对象进行业务逻辑处理...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>@Validate 和 @Valid</h2>
]]></content:encoded>
    </item>
    <item>
      <title>前端显示二进制流图片</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/binary-picture/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/binary-picture/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">前端显示二进制流图片</source>
      <description>前端显示二进制流图片 读取resource目录下的图片 在resource目录下的文件（文件夹）编译后都会在classpath的根目录下下。如下图： resource目录的含义 从类路径中读取名为&amp;quot;logo.jpg&amp;quot;的文件内容，并将其转换为字节数组。 ClassPathResource(&amp;quot;logo.jpg&amp;quot;)：这是创建一个Spring Framewor...</description>
      <category>IO</category>
      <pubDate>Thu, 29 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>读取resource目录下的图片</h2>
<p>在resource目录下的文件（文件夹）编译后都会在classpath的根目录下下。如下图：<br>
</p>
<p>从类路径中读取名为"logo.jpg"的文件内容，并将其转换为字节数组。</p>
<ol>
<li>
<p><code>ClassPathResource("logo.jpg")</code>：这是创建一个Spring Framework中的<code>ClassPathResource</code>对象，它代表了一个应从类路径获取的资源。</p>
</li>
<li>
<p><code>.getInputStream()</code>：调用该方法会返回一个指向该资源的输入流（InputStream），通过这个输入流可以读取“logo.jpg”文件的实际内容。</p>
</li>
<li>
<p><code>.readAllBytes()</code>：进一步调用此方法会读取并返回输入流中的所有字节，即将“logo.jpg”图片文件的内容以字节数组的形式一次性读取出来。</p>
</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"logo"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@CrossOrigin</span>
  <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLogo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"logo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>ClassPathResource</code>是Spring框架中<code>org.springframework.core.io</code>包下的一个类，它主要用于表示类路径（classpath）中的资源。当你需要从项目的类路径下加载配置文件、静态资源等时，可以使用这个类。</p>
<p>函数还使用了<code>@CrossOrigin</code>注解来允许跨域请求。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>如果你像读取系统上的文件，可以使用<code>FileSystemResource</code>，它表示的是文件系统中的资源。</p>
</div>
<h2>前端展示</h2>
<p>使用axios库从指定URL获取图片资源，并将其转化为Base64格式的字符串，以便可以直接作为图像源在网页中展示。</p>
<p>具体步骤如下：</p>
<ol>
<li>
<p>首先引入了<code>axios</code>库来进行HTTP请求，并使用Vue3的<code>ref</code>函数创建了一个响应式的变量<code>base64Image</code>，初始值为空字符串。</p>
</li>
<li>
<p>使用axios的<code>get</code>方法发起GET请求获取图片数据，配置项<code>responseType: 'arraybuffer'</code>表示期望服务器返回二进制数据（ArrayBuffer）。</p>
</li>
<li>
<p>当请求成功后（进入<code>.then</code>的回调函数），首先从响应结果<code>res</code>中提取出ArrayBuffer数据。</p>
</li>
<li>
<p>将ArrayBuffer转换为Uint8Array，便于进一步操作。Uint8Array是一种能够存储原始8位无符号整数的TypedArray视图，适合处理二进制数据如图片、音频等。</p>
</li>
<li>
<p>然后通过<code>reduce</code>方法遍历Uint8Array中的每个字节，将其转换为其对应的字符编码并拼接到一起形成一个字符串。</p>
</li>
<li>
<p>使用<code>btoa</code>函数将这个由字节序列组成的字符串转换为Base64编码格式。</p>
</li>
<li>
<p>最后，将得到的Base64字符串格式化为符合Data URL Scheme的标准格式，即<code>data:image/*;base64,${base64String}</code>，并将其赋值给<code>base64Image.value</code>。这样，在Vue模板中可以通过绑定<code>base64Image</code>来直接展示图片。</p>
</li>
</ol>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base64Image<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base64Image<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> base64Image <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8081/image/logo"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'arraybuffer'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// 将ArrayBuffer转为Uint8Array方便处理</span>
    <span class="token keyword">const</span> arrayBuffer <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">const</span> uint8Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将Uint8Array转换为Base64字符串</span>
    <span class="token keyword">const</span> base64String <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span>uint8Array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> byte</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置图片的Base64源</span>
    base64Image<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:image/*;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base64String<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>如何安装各种软件</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/install/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/install/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">如何安装各种软件</source>
      <description>如何安装各种软件 常用软件列表 jdk idea node.js vscode git maven docker mysql/postgresql tomcat redis nginx datagrip/navicate secure crt/putty/xshell 7zip nvm 搜索引擎 不建议使用百度，百度的广告太多了。特别是学习编程时大部分...</description>
      <pubDate>Thu, 29 Feb 2024 13:51:55 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>常用软件列表</h2>
<ol>
<li>jdk</li>
<li>idea</li>
<li>node.js</li>
<li>vscode</li>
<li>git</li>
<li>maven</li>
<li>docker</li>
<li>mysql/postgresql</li>
<li>tomcat</li>
<li>redis</li>
<li>nginx</li>
<li>datagrip/navicate</li>
<li>secure crt/putty/xshell</li>
<li>7zip</li>
<li>nvm</li>
</ol>
<h2>搜索引擎</h2>
<p>不建议使用百度，百度的广告太多了。特别是学习编程时大部分软件都来自外国，百度搜索出来的英文官网排名大部分都比较低。在国内推荐使用bing去检索，前三个结果基本上就是需要的内容了。</p>
<h3>查找资源</h3>
<p>从各个官方文档查找，或者从github中查找。</p>
<h3>下载速度慢</h3>
<p>开代理/从镜像网站如清华源中寻找。</p>
]]></content:encoded>
    </item>
    <item>
      <title>搭建一个网站要准备哪些东西</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/website/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/website/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">搭建一个网站要准备哪些东西</source>
      <description>搭建一个网站要准备哪些东西 1. 服务器 相信大家都听说过IP地址，IP地址根据可访问性来说可以分为：公网和内网。我们平常连接的宽带，WiFi，手机流量这些都是属于内网的。意味着我们可以访问其他公网上的资源，比如看公网上的视频（抖音，b站），网站（百度，淘宝网）等等。 服务器其实就是一台电脑，这台电脑它可以被所有人访问（公网ip），你可以在这台服务器上...</description>
      <pubDate>Thu, 29 Feb 2024 13:51:55 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 服务器</h2>
<p>相信大家都听说过IP地址，IP地址根据可访问性来说可以分为：公网和内网。我们平常连接的宽带，WiFi，手机流量这些都是属于内网的。意味着我们可以访问其他公网上的资源，比如看公网上的视频（抖音，b站），网站（百度，淘宝网）等等。</p>
<p>服务器其实就是一台电脑，这台电脑它可以被所有人访问（公网ip），你可以在这台服务器上放网站供其他人访问。</p>
<h2>2. 域名</h2>
<p>由于公网ip太难记住，所以域名就诞生了。在浏览器中输入域名，域名会经过一系列的转换变成ip地址，最后通过ip地址访问到服务器上的资源。</p>
<h2>3. 备案</h2>
<p>在中国，域名必须备案，才能在互联网上使用。</p>
<h2>4. shell连接工具</h2>
<p>大家平常在Windows上用过向日葵、ToDesk用来远程控制其他Windows电脑。服务器上装的系统一般是Linux的发行版如Centos, RedHat, Ubuntu等。当然也有Windows Server系统。</p>
<h2>5. 宝塔</h2>
<p>大家在装机之后可能会用电脑管家安装一些常用的软件，同样服务器上有一款著名的软件“宝塔”，它可以快速的帮你安装各种的服务器软件，比如：Nginx，Apache，MySQL，php，phpMyAdmin等。</p>
<h2>6. Nginx</h2>
<p>所谓的网页实际上也是几个文本文件，比如html, css, js. 这些都是文本文件。浏览器会把这些文本文件解析成网页。可以说Nginx上可以存放一些文本文件，图片等小型文件，方便浏览器访问下载。</p>
<h2>7. 数据库</h2>
<p>用户网站上产生的数据会记录在数据库中。</p>
<h2>8. 前端项目</h2>
<p>前端的项目打包之后会生成html, css, js, 图片等文件，这些文件会放在Nginx上，浏览器通过域名访问Nginx上的文件。</p>
<h2>9. 后端项目</h2>
<p>后端项目</p>
]]></content:encoded>
    </item>
    <item>
      <title>Vue+ElementUI动态显示图标</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/dynamic-icon/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/dynamic-icon/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Vue+ElementUI动态显示图标</source>
      <description>Vue+ElementUI动态显示图标 编辑图标 动态显示图标 安装依赖 正常使用 使用了 Element Plus UI 库来展示一个编辑图标。 &amp;lt;el-icon&amp;gt;：来自 Element Plus 的组件，用于显示图标。:size=&amp;quot;28&amp;quot; 表示设置图标的大小为 12px，:color=&amp;quot;&amp;apos;#000&amp;apos;&amp;quot; 设置图标的颜色为黑色。 &amp;lt;Edit /&amp;gt;：这是...</description>
      <category>ElementUI</category>
      <pubDate>Thu, 22 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p><br>
</p>
<h2>安装依赖</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 选择一个你喜欢的包管理器</span>

<span class="token comment"># NPM</span>
$ <span class="token function">npm</span> <span class="token function">install</span> @element-plus/icons-vue
<span class="token comment"># Yarn</span>
$ <span class="token function">yarn</span> <span class="token function">add</span> @element-plus/icons-vue
<span class="token comment"># pnpm</span>
$ <span class="token function">pnpm</span> <span class="token function">install</span> @element-plus/icons-vue
</code></pre></div><h2>正常使用</h2>
<p>使用了 Element Plus UI 库来展示一个编辑图标。</p>
<ol>
<li>
<p><code>&lt;el-icon&gt;</code>：来自 Element Plus 的组件，用于显示图标。<code>:size="28"</code> 表示设置图标的大小为 12px，<code>:color="'#000'"</code> 设置图标的颜色为黑色。</p>
</li>
<li>
<p><code>&lt;Edit /&gt;</code>：这是一个自定义标签，引用了 Element Plus 图标库中的 <code>Edit</code> 图标。</p>
</li>
<li>
<p><code>import { Edit } from '@element-plus/icons-vue'</code>：这一行是导入 Element Plus 图标库中名为 <code>Edit</code> 的图标组件。</p>
</li>
</ol>
<p>综上所述，整个组件的作用是在页面上渲染一个大小为12px、颜色为白色的编辑图标。</p>
<figure><figcaption>编辑图标</figcaption></figure>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token attr-name">:color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>#000'<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Edit</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Edit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p><a href="https://element-plus.gitee.io/zh-CN/component/icon.html#%E7%BB%93%E5%90%88-el-icon-%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</div>
<h2>动态显示</h2>
<h2>全局注册图标组件</h2>
<ul>
<li>
<p>从Element Plus Icons库导入所有的图标组件，以键值对的形式（名称）导出为Vue组件。这样就可以直接在模板中通过名称来使用它们。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ElementPlusIconsVue <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
</code></pre></div></li>
<li>
<p>遍历ElementPlusIconsVue对象的所有条目，将每个图标组件全局注册到Vue应用中，这样在整个应用中就可以无需单独导入就能使用这些图标组件了。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> component<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>ElementPlusIconsVue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> component<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
</ul>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre ts="" class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>
<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span>
<span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ElementPlusIconsVue <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> component<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>ElementPlusIconsVue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> component<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>

</code></pre></div><h3>动态加载图标组件</h3>
<figure><figcaption>图标列表展示</figcaption></figure>
<p>这里使用了 Vue 的 <code>v-for</code> 指令来遍历一个名为 <code>iconList</code> 的 ref 数组。数组中存储的是 Element Plus 图标库中各个图标的名称字符串。对于数组中的每个图标名称，Vue 使用动态组件 <code>&lt;component&gt;</code>，并通过 <code>:is</code> 特性绑定对应的图标名（即变量 <code>icon</code>），这样就可以根据变量值动态地渲染出不同的图标组件。</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(icon, index) in iconList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>定义了一个响应式引用（ref）变量 <code>iconList</code>，其中包含了多个 Element Plus 图标组件的名字。由于之前已经全局注册了所有 Element Plus 图标组件，所以在模板中可以直接通过名字来引用它们。</p>
<p>因此，这段代码会根据 <code>iconList</code> 中列出的图标名称列表，动态生成一系列图标，实现了动态加载和显示图标的功能。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> iconList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token string">'Tickets'</span><span class="token punctuation">,</span>
  <span class="token string">'Notebook'</span><span class="token punctuation">,</span>
  <span class="token string">'House'</span><span class="token punctuation">,</span>
  <span class="token string">'ShoppingCartFull'</span><span class="token punctuation">,</span>
  <span class="token string">'Goods'</span><span class="token punctuation">,</span>
  <span class="token string">'Memo'</span><span class="token punctuation">,</span>
  <span class="token string">'Avatar'</span><span class="token punctuation">,</span>
  <span class="token string">'User'</span><span class="token punctuation">,</span>
  <span class="token string">'Lock'</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(icon, index) in iconList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> iconList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token string">'Tickets'</span><span class="token punctuation">,</span>
  <span class="token string">'Notebook'</span><span class="token punctuation">,</span>
  <span class="token string">'House'</span><span class="token punctuation">,</span>
  <span class="token string">'ShoppingCartFull'</span><span class="token punctuation">,</span>
  <span class="token string">'Goods'</span><span class="token punctuation">,</span>
  <span class="token string">'Memo'</span><span class="token punctuation">,</span>
  <span class="token string">'Avatar'</span><span class="token punctuation">,</span>
  <span class="token string">'User'</span><span class="token punctuation">,</span>
  <span class="token string">'Lock'</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>项目</title>
      <link>https://mister-hope.github.io/blog/project/</link>
      <guid>https://mister-hope.github.io/blog/project/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">项目</source>
      <pubDate>Tue, 20 Feb 2024 08:19:44 GMT</pubDate>
    </item>
    <item>
      <title>Helper工具</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/helper-tool.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/helper-tool.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Helper工具</source>
      <description>Helper工具 TableHelper TableHelper抽取了表格组件中的通用变量pageData(分页结果), queryRequest(分页请求), tableSelectedRows(已选数据), loading(v-loading), table(ElTable实例)。除了通用的变量外还有通用的方法。 DialogHelper Dial...</description>
      <category>起凡商城</category>
      <category>前端基础</category>
      <pubDate>Wed, 06 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>TableHelper</h2>
<p>TableHelper抽取了表格组件中的通用变量pageData(分页结果), queryRequest(分页请求), tableSelectedRows(已选数据), loading(<a href="https://element-plus.gitee.io/zh-CN/component/loading.html#%E5%8C%BA%E5%9F%9F%E5%8A%A0%E8%BD%BD" target="_blank" rel="noopener noreferrer">v-loading</a>), table(ElTable实例)。除了通用的变量外还有通用的方法。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ElTable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">type</span> <span class="token class-name">Ref</span><span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>Page<span class="token punctuation">,</span> QueryRequest<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/__generated/model/static'</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PageResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>
    Page<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token string">'content'</span> <span class="token operator">|</span> <span class="token string">'number'</span> <span class="token operator">|</span> <span class="token string">'size'</span> <span class="token operator">|</span> <span class="token string">'totalElements'</span> <span class="token operator">|</span> <span class="token string">'totalPages'</span>
<span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useTableHelper <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token comment">// 调用后端的查询接口</span>
    <span class="token function-variable function">queryApi</span><span class="token operator">:</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> body<span class="token operator">:</span> QueryRequest<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>PageResult<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    object<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
    <span class="token comment">// 查询条件</span>
    initQuery<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token comment">// 分页数据后置处理</span>
    postProcessor<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> PageResult<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pageData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        content<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        size<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        totalElements<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        totalPages<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span>PageResult<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;&gt;</span>
    <span class="token keyword">const</span> queryRequest <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        query<span class="token operator">:</span> initQuery <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        pageNum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        likeMode<span class="token operator">:</span> <span class="token string">'ANYWHERE'</span><span class="token punctuation">,</span>
        sorts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>property<span class="token operator">:</span> <span class="token string">'createdTime'</span><span class="token punctuation">,</span> direction<span class="token operator">:</span> <span class="token string">'DESC'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span>QueryRequest<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span>
    <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> tableSelectedRows <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
    <span class="token comment">// ElTable实例</span>
    <span class="token keyword">const</span> table <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> ElTable<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 请求分页数据</span>
    <span class="token keyword">const</span> <span class="token function-variable function">loadTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>QueryRequest<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        queryRequest<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>queryRequest<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
            <span class="token operator">...</span>_<span class="token punctuation">.</span><span class="token function">omitBy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> _<span class="token punctuation">.</span>isNull<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        queryRequest<span class="token punctuation">.</span>value<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>_<span class="token punctuation">.</span><span class="token function">omitBy</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span>value<span class="token punctuation">.</span>query<span class="token punctuation">,</span> _<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span>
        loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token function">queryApi</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>body<span class="token operator">:</span> queryRequest<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">postProcessor</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                pageData<span class="token punctuation">.</span>value <span class="token operator">=</span> res
                loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重新请求分页数据，pageNum=1, pageSize=10</span>
    <span class="token keyword">const</span> <span class="token function-variable function">reloadTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
        queryRequest<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>QueryRequest<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>pageNum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">loadTableData</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取表格选中的数据</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getTableSelectedRows</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tableSelectedRows<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token comment">// 当表格选择变动时更新选中的数据</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleSelectChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>selectedRows<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        tableSelectedRows<span class="token punctuation">.</span>value <span class="token operator">=</span> selectedRows
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> handleSortChange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
                                  prop<span class="token punctuation">,</span>
                                  order
                              <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        prop<span class="token operator">:</span> <span class="token builtin">string</span>
        order<span class="token operator">:</span> <span class="token string">'ascending'</span> <span class="token operator">|</span> <span class="token string">'descending'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> directionMap<span class="token operator">:</span> <span class="token punctuation">{</span> ascending<span class="token operator">:</span> <span class="token string">'ASC'</span><span class="token punctuation">;</span> descending<span class="token operator">:</span> <span class="token string">'DESC'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            ascending<span class="token operator">:</span> <span class="token string">'ASC'</span><span class="token punctuation">,</span>
            descending<span class="token operator">:</span> <span class="token string">'DESC'</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> sorts <span class="token operator">=</span> queryRequest<span class="token punctuation">.</span>value<span class="token punctuation">.</span>sorts
        sorts<span class="token punctuation">[</span>sorts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> directionMap<span class="token punctuation">[</span>order<span class="token punctuation">]</span>
        sorts<span class="token punctuation">[</span>sorts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'property'</span><span class="token punctuation">]</span> <span class="token operator">=</span> prop
        <span class="token function">reloadTableData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        table<span class="token punctuation">,</span>
        loading<span class="token punctuation">,</span>
        queryRequest<span class="token punctuation">,</span>
        tableSelectedRows<span class="token punctuation">,</span>
        pageData<span class="token punctuation">,</span>
        loadTableData<span class="token punctuation">,</span>
        reloadTableData<span class="token punctuation">,</span>
        getTableSelectedRows<span class="token punctuation">,</span>
        handleSortChange<span class="token punctuation">,</span>
        handleSelectChange
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>DialogHelper</h2>
<p>DialogHelper将Dialog通用的变量抽取出来，每次新建一个Dialog时只需要调用useDialogHelper就可以快速写出一个对话框。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useDialogHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dialogData <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> visible<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> mode<span class="token operator">:</span> EditMode <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        width<span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span>
        title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
        visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        mode<span class="token operator">:</span> <span class="token string">'CREATE'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">closeDialog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        dialogData<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">openDialog</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>mode<span class="token operator">?</span><span class="token operator">:</span> EditMode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dialogData<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        dialogData<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>dialogData<span class="token punctuation">,</span> closeDialog<span class="token punctuation">,</span> openDialog<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>queryHelper</h2>
<p>queryHelper抽取查询表单的通用变量和方法。辅助Query编写组件。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> QueryHelper <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initQuery<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> queryData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token operator">:</span> initQuery<span class="token punctuation">,</span> matchMode<span class="token operator">:</span> <span class="token string">'VAGUE'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span><span class="token punctuation">{</span>
        query<span class="token operator">:</span> <span class="token constant">T</span>
        matchMode<span class="token operator">:</span> MatchMode
    <span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">restQuery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        queryData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>initQuery<span class="token punctuation">}</span>
        queryData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>matchMode <span class="token operator">=</span> <span class="token string">'VAGUE'</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>queryData<span class="token punctuation">,</span> restQuery<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>键值对输入组件</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/key-value-input.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/key-value-input.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">键值对输入组件</source>
      <description>键值对输入组件 键值对输入键值对输入 </description>
      <category>起凡商城</category>
      <category>前端基础</category>
      <pubDate>Wed, 06 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<div style="text-align:center">
<figure><figcaption>键值对输入</figcaption></figure>
</div>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key-value-section<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key-value-wrapper<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(keyValue, index) in keyValueList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close-btn<span class="token punctuation">"</span></span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span>
        <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
        <span class="token attr-name">circle</span>
        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteKeyValue(index)<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>close</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>close</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">label-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>键名称<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyValueList[index].name<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>值列表<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyValueList[index].values<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value-input</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plus<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addKeyValue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plus</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plus</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Close<span class="token punctuation">,</span> Plus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span>
<span class="token keyword">import</span> ValueInput <span class="token keyword">from</span> <span class="token string">'./value-input.vue'</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> KeyValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/apis/__generated/model/static'</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span> modelValue<span class="token operator">?</span><span class="token operator">:</span> KeyValue<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token literal-property property">change</span><span class="token operator">:</span> <span class="token punctuation">[</span>data<span class="token operator">:</span> KeyValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token string-property property">'update:modelValue'</span><span class="token operator">:</span> <span class="token punctuation">[</span>data<span class="token operator">:</span> KeyValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> keyValueList <span class="token operator">=</span> ref<span class="token operator">&lt;</span>KeyValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">deleteKeyValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  keyValueList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">addKeyValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  keyValueList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      keyValueList<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> keyValueList<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> keyValueList<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.key-value-section</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token selector">.plus</span> <span class="token punctuation">{</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.key-value-wrapper</span> <span class="token punctuation">{</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>114<span class="token punctuation">,</span> 207<span class="token punctuation">,</span> 222<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> 1px dashed<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token selector">.close-btn</span> <span class="token punctuation">{</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
      <span class="token property">right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>远程选择器</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/remote-select.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/remote-select.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">远程选择器</source>
      <description>远程选择器 使用该组件可以快速的选择数据库中的数据。 图2 角色选择案例图2 角色选择案例 使用案例 下面的content就是需要选择的角色列表。 roleQueryOptions：提供待选择的角色列表 roleIds：已选的角色会双向绑定到该数组 label-prop：根据上面的数据结构知道name可以作为el-option组件的label valu...</description>
      <category>起凡商城</category>
      <category>前端基础</category>
      <pubDate>Mon, 11 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>使用该组件可以快速的选择数据库中的数据。</p>
<div style="text-align:center">
<figure><figcaption>图2 角色选择案例</figcaption></figure>
</div>
<h2>使用案例</h2>
<p>下面的content就是需要选择的角色列表。</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"totalElements"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token property">"totalPages"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"d5352808-e463-4af9-9252-6db6b7df2ca0"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"测试2"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"17509f5c-9a6b-429c-b467-cadbd8873d2d"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"测试3"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"管理员"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><ul>
<li><code>roleQueryOptions</code>：提供待选择的角色列表</li>
<li><code>roleIds</code>：已选的角色会双向绑定到该数组</li>
<li><code>label-prop</code>：根据上面的数据结构知道name可以作为<a href="https://element-plus.gitee.io/zh-CN/component/select.html#option-attributes" target="_blank" rel="noopener noreferrer">el-option组件</a>的label</li>
<li><code>value-prop</code>：根据上面的数据结构知道id可以作为el-option组件的value</li>
</ul>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> roleIds <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 调用后端获取待选择的列表</span>
  <span class="token keyword">const</span> <span class="token function-variable function">roleQueryOptions</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keyword</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">await</span> api<span class="token punctuation">.</span>roleController<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> keyword<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote-select</span>
      <span class="token attr-name">:query-options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleQueryOptions<span class="token punctuation">"</span></span>
      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleIds<span class="token punctuation">"</span></span>
      <span class="token attr-name">label-prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>
      <span class="token attr-name">value-prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>
      <span class="token attr-name">multiple</span>
  <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remote-select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>源码解析</h2>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElOption<span class="token punctuation">,</span> ElSelect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"element-plus"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">OptionItem</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span>
  defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 双向绑定选中的值，单向是string，多选是string[]</span>
    <span class="token literal-property property">modelValue</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span>
    <span class="token comment">// 待选项</span>
    <span class="token function-variable function">queryOptions</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">query</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
    <span class="token comment">// 是否多选，默认false</span>
    multiple<span class="token operator">?</span><span class="token operator">:</span> boolean
    <span class="token comment">// 待选项中的哪个属性作为label</span>
    <span class="token literal-property property">labelProp</span><span class="token operator">:</span> string
    <span class="token comment">// 待选项中的哪个属性作为value，默认是id</span>
    valueProp<span class="token operator">?</span><span class="token operator">:</span> string
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">multiple</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">valueProp</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token literal-property property">modelValue</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  实现双向绑定，https://cn.vuejs.org/guide/components/v-model.html</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token string-property property">"update:modelValue"</span><span class="token operator">:</span> <span class="token punctuation">[</span>value<span class="token operator">:</span> string <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 待选项</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> ref<span class="token operator">&lt;</span>OptionItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等待数据返回时要显示加载动画</span>
<span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">remoteMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keyword</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">enforce</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword <span class="token operator">||</span> enforce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取带选项</span>
    props<span class="token punctuation">.</span><span class="token function">queryOptions</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span>value <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token comment">// 根据映射规则得到label和value</span>
          <span class="token literal-property property">label</span><span class="token operator">:</span> row<span class="token punctuation">[</span>props<span class="token punctuation">.</span>labelProp<span class="token punctuation">]</span> <span class="token keyword">as</span> string<span class="token punctuation">,</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> row<span class="token punctuation">[</span>props<span class="token punctuation">.</span>valueProp<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> satisfies OptionItem<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 取消加载动画</span>
      loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">remoteMethod</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--  el-select组件请参考 https://element-plus.gitee.io/zh-CN/component/select.html --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>
    <span class="token attr-name">:model-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modelValue<span class="token punctuation">"</span></span>
    <span class="token attr-name">clearable</span>
    <span class="token attr-name">collapseTags</span>
    <span class="token attr-name">filterable</span>
    <span class="token attr-name">:multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span>
    <span class="token attr-name">remote</span>
    <span class="token attr-name">remote-show-suffix</span>
    <span class="token attr-name">:remote-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remoteMethod<span class="token punctuation">"</span></span>
    <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleChange<span class="token punctuation">"</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.value<span class="token punctuation">"</span></span>
      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.value<span class="token punctuation">"</span></span>
      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.label<span class="token punctuation">"</span></span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option in options<span class="token punctuation">"</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>


</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>标签列表输入组件</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/tag-input.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/reference/front/tag-input.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">标签列表输入组件</source>
      <description>标签列表输入组件 标签选择器，可以添加标签，修改标签，删除标签。 标签列表标签列表 </description>
      <category>起凡商城</category>
      <category>前端基础</category>
      <pubDate>Tue, 05 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>标签选择器，可以添加标签，修改标签，删除标签。</p>
<figure><figcaption>标签列表</figcaption></figure>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values-chose<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 显示当内的多个值，用','连接多个值 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values-show<span class="token punctuation">"</span></span>
        <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
        <span class="token attr-name">readonly</span>
        <span class="token attr-name">:model-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>props.modelValue<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values-input<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(tag, index) in tags<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 编辑值 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editIndex === index<span class="token punctuation">"</span></span>
          <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editInputValue<span class="token punctuation">"</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value value-edit<span class="token punctuation">"</span></span>
          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
          <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleEditConfirm<span class="token punctuation">"</span></span>
          <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleEditConfirm<span class="token punctuation">"</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 显示值 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span>
          <span class="token attr-name">v-else</span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>
          <span class="token attr-name">closable</span>
          <span class="token attr-name">:disable-transitions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
          <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClose(index)<span class="token punctuation">"</span></span>
          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleEdit(index)<span class="token punctuation">"</span></span>
          <span class="token punctuation">&gt;</span></span>{{ tag }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span>
        <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 点击新增显示输入框，否则显示新增按钮  --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputVisible<span class="token punctuation">"</span></span>
        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputRef<span class="token punctuation">"</span></span>
        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value-input<span class="token punctuation">"</span></span>
        <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
        <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleInputConfirm<span class="token punctuation">"</span></span>
        <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleInputConfirm<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-else</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showInput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> + 新增值 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> nextTick<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElButton<span class="token punctuation">,</span> ElInput<span class="token punctuation">,</span> ElTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">modelValue</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token string-property property">'update:modelValue'</span><span class="token operator">:</span> <span class="token punctuation">[</span>values<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> tags <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> props<span class="token punctuation">.</span>modelValue <span class="token operator">?</span> props<span class="token punctuation">.</span>modelValue <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 编辑值</span>
<span class="token keyword">const</span> editIndex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> editInputValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token comment">// 点击值标签，显示输入框编辑值</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleEdit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  editInputValue<span class="token punctuation">.</span>value <span class="token operator">=</span> tags<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
  editIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index
<span class="token punctuation">}</span>
<span class="token comment">// 编辑值输入框确认</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleEditConfirm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>editInputValue<span class="token punctuation">.</span>value <span class="token operator">===</span> tags<span class="token punctuation">.</span>value<span class="token punctuation">[</span>editIndex<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  tags<span class="token punctuation">.</span>value<span class="token punctuation">[</span>editIndex<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> editInputValue<span class="token punctuation">.</span>value
  tags<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>tags<span class="token punctuation">.</span>value<span class="token punctuation">]</span>
  editIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">// 点击值标签的右上角触发删除值</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  tags<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  tags<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>tags<span class="token punctuation">.</span>value<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新增值</span>
<span class="token keyword">const</span> inputRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> ElInput<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> inputVisible <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> inputValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleInputConfirm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tags<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>tags<span class="token punctuation">.</span>value<span class="token punctuation">,</span> inputValue<span class="token punctuation">.</span>value<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  inputVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
  inputValue<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">showInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  inputVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> inputRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.values</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>

  <span class="token selector">.values-show</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">.values-input</span> <span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token selector">.value-edit</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.value</span> <span class="token punctuation">{</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.value-input</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>左右联动菜单</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/reference/mp/side-menu.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/reference/mp/side-menu.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">左右联动菜单</source>
      <description>左右联动菜单 图1 左右联动菜单效果图图1 左右联动菜单效果图 搭建基本的结构，左侧（left-scroll）用于存放类别（category-section），右侧（right-scroll）用于存放商品（product-section）。类别区域中有多类别（category-item），每个类别呈左右结构（icon）和（name）。 样式 数据初始化...</description>
      <pubDate>Tue, 20 Feb 2024 08:19:44 GMT</pubDate>
      <content:encoded><![CDATA[
<div style="text-align:center">
<figure><figcaption>图1 左右联动菜单效果图</figcaption></figure>
</div>
<p>搭建基本的结构，左侧（left-scroll）用于存放类别（category-section），右侧（right-scroll）用于存放商品（product-section）。类别区域中有多类别（category-item），每个类别呈左右结构（icon）和（name）。</p>
<h2>样式</h2>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tsx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>PropType<span class="token punctuation">,</span> SlotsType<span class="token punctuation">,</span> defineComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ScrollView<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@tarojs/components"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>Product<span class="token punctuation">,</span> ProductCategory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/typings"</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"CategoryProducts"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> Array <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>ProductCategory<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">slots</span><span class="token operator">:</span> Object <span class="token keyword">as</span> SlotsType<span class="token operator">&lt;</span><span class="token punctuation">{</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">product</span><span class="token operator">:</span> Product <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span>slots<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"side-menu"</span><span class="token operator">&gt;</span>
            <span class="token punctuation">{</span><span class="token comment">/* 左右结构left-scroll和right-scroll */</span><span class="token punctuation">}</span>
            <span class="token punctuation">{</span><span class="token comment">/* scrollY： 可以在垂直方向上滚动。必须指定hight的值。 */</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span>ScrollView
                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left-scroll"</span>
                scrollY<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollWithAnimation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
            <span class="token operator">&gt;</span>
              <span class="token punctuation">{</span><span class="token comment">/* 左侧存放类别，所有类别垂直排列，且在水平居中 */</span><span class="token punctuation">}</span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-section"</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
                    <span class="token comment">// 每个类别左边是图标，右边是类别名字。且图标和名字垂直/水平居中。</span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-item"</span> key<span class="token operator">=</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span>
                      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"name-icon"</span><span class="token operator">&gt;</span>
                        <span class="token punctuation">{</span>category<span class="token punctuation">.</span>icon <span class="token operator">?</span> <span class="token punctuation">(</span>
                            <span class="token comment">// mode={"aspectFill"} 优先保证图片的比例，无法显示的部分会截切掉。</span>
                            <span class="token operator">&lt;</span>image
                                src<span class="token operator">=</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>icon<span class="token punctuation">}</span>
                                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon"</span>
                                mode<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"aspectFill"</span><span class="token punctuation">}</span>
                            <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">&gt;</span>
                        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
                            <span class="token string">""</span>
                        <span class="token punctuation">)</span><span class="token punctuation">}</span>
                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ScrollView
                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right-scroll"</span>
                scrollY<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollWithAnimation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
            <span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"product-section"</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
                    <span class="token comment">// 每个类别对应多个商品</span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-products"</span><span class="token operator">&gt;</span>
                      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-name"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"product-wrapper"</span><span class="token operator">&gt;</span>
                        <span class="token punctuation">{</span><span class="token comment">/* 商品插槽，商品的样式比较动态，留给引用方实现。 */</span><span class="token punctuation">}</span>
                        <span class="token punctuation">{</span>category<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
                            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
                      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.side-menu</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>

    <span class="token selector">.left-scroll</span> <span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>

      <span class="token selector">.category-section</span> <span class="token punctuation">{</span>
        // 类别区域内的类别垂直排列且水平居中
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

        <span class="token selector">.category-item</span> <span class="token punctuation">{</span>
          // 类别的图标和名字的相关样式。
          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
          <span class="token property">padding</span><span class="token punctuation">:</span> 50px 0<span class="token punctuation">;</span>
          <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
          <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
          <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>

          <span class="token selector">.name-icon</span> <span class="token punctuation">{</span>
            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

            <span class="token selector">.icon</span> <span class="token punctuation">{</span>
              <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
              <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
              <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
              <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token selector">&amp;.active</span> <span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.right-scroll</span> <span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>

      <span class="token selector">.product-section</span> <span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>

        <span class="token selector">.category-products</span> <span class="token punctuation">{</span>
          <span class="token selector">.category-name</span> <span class="token punctuation">{</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><h2>数据初始化</h2>
<ol>
<li>
<p>想要实现点击左侧类别时，让右侧的区域滚动到该类别商品所在的位置那必然需要知道每个category-products顶部与right-scroll的距离。然后才能控制滚动条移动到相应的位置。</p>
</li>
<li>
<p>在右侧滚动时，也需要知道当前的商品是属于哪个类别，让左侧的类别也跟着滚动。要实现这个功能需要知道category-products顶部和底部与right-scroll的距离，这样可以知道滚动条落在哪个区间，通过区间可以反推出是属于哪个类别。<br>
现在有三个区间：[0,100],[101,300],[300,350]。每个区间代表category-products的顶部和底部与right-scroll的距离。每个区间同时也对应一个类别。0：果茶，1：咖啡，2：奶茶。当前滚动条所在位置是200，遍历区间发现当前滚动条在[101,300]这个区间，反推得知当前区间对应的类别是咖啡。</p>
</li>
<li>
<p>为了节流还需要知道right-scroll的高度。假设right-scroll的高度是100px，product-section的高度是300px。当滚动条滚动到200px时其实就已经到达底部了，因为200px+100px=300px。通过这个计算公式可以提前停止滚动，防止出现滚动抽搐现象。</p>
</li>
</ol>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tsx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>PropType<span class="token punctuation">,</span> SlotsType<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ScrollView<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@tarojs/components"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>Product<span class="token punctuation">,</span> ProductCategory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/typings"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">"@tarojs/taro"</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 忽略...</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span>slots<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> scrollState <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// 存储右侧category-products的头部和底部与product-section的距离。</span>
        <span class="token literal-property property">rightToTopList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Array<span class="token operator">&lt;</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        <span class="token comment">// 存储左侧每个category-item的顶部距与category-section的距离</span>
        <span class="token literal-property property">leftToTopList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// 左侧滚动区域滚动条与category-section的距离</span>
        <span class="token literal-property property">leftScrollTop</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token comment">// 右侧滚动区域滚动条与product-section的距离</span>
        <span class="token literal-property property">rightScrollTop</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token comment">// right-scroll的高度</span>
        <span class="token literal-property property">rightHeight</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token comment">// 当前激活的类别</span>
        <span class="token literal-property property">activeCategory</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Taro<span class="token punctuation">.</span><span class="token function">useDidShow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        Taro<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> query <span class="token operator">=</span> Taro<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 对步骤1</span>
          query
              <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">".category-products"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第一个category-products与小程序顶部的距离（约等于product-section到小程序顶部的距离）</span>
                <span class="token keyword">const</span> toTop <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token comment">// 通过css选择器得到的top是与小程序顶部的距离，这步我们需要的是与product-section顶部的距离。</span>
                      <span class="token comment">// 因此下面的top都是需要减去toTop</span>
                      scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                        <span class="token comment">// 计算得到顶部和 product-section 的距离。</span>
                        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">-</span> toTop<span class="token punctuation">,</span>
                        <span class="token comment">// 计算得到底部和 product-section 的距离。</span>
                        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">-</span> toTop<span class="token punctuation">,</span>
                      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 对应步骤2</span>
          query
              <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">".category-item"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 第一个category-item到小程序顶部的距离（约等于category-section到小程序顶部的距离）</span>
                <span class="token keyword">const</span> toTop <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token comment">// 计算得到 category-item顶部到category-section的距离</span>
                      scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">-</span> toTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 对应步骤3</span>
          query
              <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">".right-scroll"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span>
                  <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> Taro<span class="token punctuation">.</span>NodesRef<span class="token punctuation">.</span>BoundingClientRectCallbackResult</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 右侧的高度（不是滚动区域的总高度）</span>
                    scrollState<span class="token punctuation">.</span>rightHeight <span class="token operator">=</span> data<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token comment">//  忽略 JSX内容</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- 忽略样式...--&gt;</span>
</code></pre></div><h2>逻辑实现</h2>
<ol>
<li>在left-scroll和right-scroll分别增加了<code>scrollTop={scrollState.leftScrollTop}</code> 和<code>scrollTop={scrollState.rightScrollTop}</code>用于控制滚动条的位置。比如修改<code>scrollState.leftScrollTop=0</code>,那么左侧类别区域的滚动条就会滚动到顶部。</li>
<li>当点击左侧的类别时会触发leftClick，该方法会切换激活的类别并且将右侧的商品区域滚动到该类别所在位置。参考上面的1</li>
<li>当右侧商品滚动时，联动左侧类别一起滚动。参考上面的2，3</li>
</ol>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tsx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>PropType<span class="token punctuation">,</span> SlotsType<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ScrollView<span class="token punctuation">,</span> ScrollViewProps<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@tarojs/components"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>Product<span class="token punctuation">,</span> ProductCategory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/typings"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">"@tarojs/taro"</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 忽略...</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span>slots<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 忽略...</span>
      <span class="token keyword">const</span> <span class="token function-variable function">leftClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        scrollState<span class="token punctuation">.</span>activeCategory <span class="token operator">=</span> index<span class="token punctuation">;</span>
        scrollState<span class="token punctuation">.</span>rightScrollTop <span class="token operator">=</span> scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token literal-property property">rightScroll</span><span class="token operator">:</span> ScrollViewProps<span class="token punctuation">[</span><span class="token string">"onScroll"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
        <span class="token comment">// 滚动到底部了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">+</span> scrollState<span class="token punctuation">.</span>rightHeight <span class="token operator">&gt;=</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          scrollState<span class="token punctuation">.</span>leftScrollTop <span class="token operator">=</span>
              scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">[</span>scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          scrollState<span class="token punctuation">.</span>activeCategory <span class="token operator">=</span> scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 判断当前滚动条在哪个商品区间</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>
              scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> scrollTop <span class="token operator">&amp;&amp;</span>
              scrollState<span class="token punctuation">.</span>rightToTopList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> scrollTop
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scrollState<span class="token punctuation">.</span>leftScrollTop <span class="token operator">=</span> scrollState<span class="token punctuation">.</span>leftToTopList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            scrollState<span class="token punctuation">.</span>activeCategory <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"side-menu"</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ScrollView
                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left-scroll"</span>
                scrollY<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollWithAnimation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollTop<span class="token operator">=</span><span class="token punctuation">{</span>scrollState<span class="token punctuation">.</span>leftScrollTop<span class="token punctuation">}</span>
            <span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-section"</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span>props<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">category<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
                    <span class="token operator">&lt;</span>div
                        <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>
                          <span class="token string">"category-item"</span><span class="token punctuation">,</span>
                          scrollState<span class="token punctuation">.</span>activeCategory <span class="token operator">===</span> index <span class="token operator">?</span> <span class="token string">"active"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
                        <span class="token punctuation">]</span><span class="token punctuation">}</span>
                        key<span class="token operator">=</span><span class="token punctuation">{</span>category<span class="token punctuation">.</span>id<span class="token punctuation">}</span>
                        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                          <span class="token function">leftClick</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">}</span>
                    <span class="token operator">&gt;</span>
                      <span class="token punctuation">{</span><span class="token comment">/* 忽略... */</span><span class="token punctuation">}</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ScrollView
                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right-scroll"</span>
                scrollY<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollWithAnimation<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>
                scrollTop<span class="token operator">=</span><span class="token punctuation">{</span>scrollState<span class="token punctuation">.</span>rightScrollTop<span class="token punctuation">}</span>
                onScroll<span class="token operator">=</span><span class="token punctuation">{</span>rightScroll<span class="token punctuation">}</span>
            <span class="token operator">&gt;</span>
              <span class="token punctuation">{</span><span class="token comment">/* 忽略... */</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!--忽略...--&gt;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>订单支付回调</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/order/order-notify.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/order/order-notify.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">订单支付回调</source>
      <description>订单支付回调 微信小程序支付流程图微信小程序支付流程图 用户支付成功后，16-18阶段微信服务器我会通知我方的服务器，通知内容是加密后的支付结果，需要解密后才能确认支付结果。 提示 在已经配置好了回调地址，微信服务器会自动调用回调地址，通知支付结果。 api 发送支付回调事件 订单支付成功后的异步通知处理逻辑 方法注解： 使用 @SneakyThrow...</description>
      <category>起凡商城</category>
      <pubDate>Mon, 19 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><img src="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" alt="微信小程序支付流程图" tabindex="0" loading="lazy"><figcaption>微信小程序支付流程图</figcaption></figure>
<p>用户支付成功后，16-18阶段微信服务器我会通知我方的服务器，通知内容是加密后的支付结果，需要解密后才能确认支付结果。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在<a href="/blog/project/qifan-mall/order/order-prepay.html#%E9%A2%84%E6%94%AF%E4%BB%98%E8%AF%B7%E6%B1%82%E4%BD%93%E6%9E%84%E5%BB%BA-prepare%E9%98%B6%E6%AE%B5" target="_blank">预支付下单阶段</a>已经配置好了回调地址，微信服务器会自动调用回调地址，通知支付结果。</p>
</div>
<h2>api</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"notify/wechat"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@ApiIgnore</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentNotifyWechat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Wechatpay-Timestamp"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> timestamp<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Wechatpay-Nonce"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> nonce<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Wechatpay-Signature"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Wechatpay-Serial"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> serial<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SignatureHeader</span> signatureHeader <span class="token operator">=</span> <span class="token class-name">SignatureHeader</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signature</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">serial</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">nonce</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">timeStamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> productOrderService<span class="token punctuation">.</span><span class="token function">paymentNotifyWechat</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> signatureHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre></div><h2>发送支付回调事件</h2>
<p>订单支付成功后的异步通知处理逻辑</p>
<ul>
<li>
<p><strong>方法注解：</strong></p>
<ul>
<li>使用 <code>@SneakyThrows</code> 注解表示在方法内部捕获异常并转换为运行时异常，简化异常处理代码。</li>
</ul>
</li>
<li>
<p><strong>方法参数：</strong></p>
<ul>
<li><code>String body</code>: 微信支付回调的请求体，包含支付结果信息。</li>
<li><code>SignatureHeader signatureHeader</code>: 包含微信支付回调请求头的信息，如时间戳、随机数、签名等。</li>
</ul>
</li>
<li>
<p><strong>解密回调结果：</strong></p>
<ul>
<li>调用 <code>wxPayService.parseOrderNotifyV3Result</code> 方法解密微信支付回调结果，获取 <code>DecryptNotifyResult</code> 对象。</li>
</ul>
</li>
<li>
<p><strong>获取订单信息：</strong></p>
<ul>
<li>从解密的回调结果中获取商户订单号 <code>outTradeNo</code>。</li>
<li>使用商户订单号查询数据库，获取对应的订单信息 <code>productOrder</code>。</li>
</ul>
</li>
<li>
<p><strong>构建状态事件 <code>StateEvent</code>：</strong></p>
<ul>
<li>根据订单信息构建 <code>StateEvent</code> 对象，包括订单状态、事件类型、场景ID等信息。</li>
</ul>
</li>
<li>
<p><strong>调用状态机处理支付回调事件：</strong></p>
<ul>
<li>创建 <code>StateContext</code> 对象，传递 <code>StateEvent</code> 和包含解密结果的上下文对象 <code>NotifyWeChatContext</code>。</li>
<li>调用 <code>stateMachine.action</code> 方法，触发状态机处理支付回调事件。</li>
</ul>
</li>
<li>
<p><strong>返回处理结果：</strong></p>
<ul>
<li>返回处理结果，通常是一个包含处理信息的字符串。</li>
</ul>
</li>
</ul>
<p>该方法的主要作用是解密微信支付回调结果，获取订单信息，构建状态事件，然后调用状态机引擎处理支付回调事件。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@SneakyThrows</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentNotifyWechat</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">,</span> <span class="token class-name">SignatureHeader</span> signatureHeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DecryptNotifyResult</span> notifyResult <span class="token operator">=</span> wxPayService<span class="token punctuation">.</span><span class="token function">parseOrderNotifyV3Result</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> signatureHeader<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> outTradeNo <span class="token operator">=</span> notifyResult<span class="token punctuation">.</span><span class="token function">getOutTradeNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span> productOrderRepository
        <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>outTradeNo<span class="token punctuation">,</span>
            <span class="token class-name">ProductOrderFetcher</span><span class="token punctuation">.</span>$
                <span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token class-name">PaymentFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">payType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"订单不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StateEvent</span> stateEvent <span class="token operator">=</span> <span class="token class-name">StateEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orderState</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">eventType</span><span class="token punctuation">(</span><span class="token string">"NOTIFY"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sceneId</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">payType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">businessCode</span><span class="token punctuation">(</span><span class="token string">"PRODUCT_ORDER"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> stateMachine<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDecryptNotifyResult</span><span class="token punctuation">(</span>notifyResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre></div><h2>支付回调上下文</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyWeChatContext</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">DecryptNotifyResult</span> decryptNotifyResult<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">ProductOrder</span> productOrder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>支付回调处理器</h2>
<ul>
<li>
<p><strong>类注解：</strong></p>
<ul>
<li><code>@OrderStateProcessor</code>: 指示该类是一个订单状态处理器，处理待支付订单状态，回调事件，微信支付场景。</li>
<li><code>@Slf4j</code>: 自动生成日志实例，用于日志记录。</li>
<li><code>@AllArgsConstructor</code>: 自动生成全参构造方法。</li>
</ul>
</li>
<li>
<p><strong>方法参数：</strong></p>
<ul>
<li><code>StateContext&lt;NotifyWeChatContext&gt; context</code>: 状态机上下文对象，包含了支付回调上下文。</li>
</ul>
</li>
<li>
<p><strong><code>prepare</code> 方法：</strong></p>
<ul>
<li>通过上下文获取微信支付回调结果和商户订单号。</li>
<li>查询订单信息，包括订单创建者、支付信息等。</li>
<li>使用 <code>ProductOrderDraft</code> 创建一个新的订单对象，更新支付信息，包括微信支付订单ID和支付时间。</li>
<li>将新创建的订单对象设置到上下文中，以便后续处理。</li>
</ul>
</li>
<li>
<p><strong><code>save</code> 方法：</strong></p>
<ul>
<li>从上下文中获取包含更新后支付信息的订单对象 <code>productOrder</code>。</li>
<li>切换当前登录用户到订单创建者，使用 <code>StpUtil.switchTo</code> 方法。</li>
<li>创建新的订单对象 <code>producedOrder</code>，并将状态设置为下一个状态。</li>
<li>调用订单仓库的 <code>save</code> 方法保存更新后的订单对象。</li>
<li>将保存后订单对象的ID包装成成功的响应返回。</li>
</ul>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@OrderStateProcessor</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token string">"TO_BE_PAID"</span><span class="token punctuation">,</span> event <span class="token operator">=</span> <span class="token string">"NOTIFY"</span><span class="token punctuation">,</span> sceneId <span class="token operator">=</span> <span class="token string">"WE_CHAT_PAY"</span><span class="token punctuation">,</span> bizCode <span class="token operator">=</span> <span class="token string">"PRODUCT_ORDER"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyWeChatProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProductOrderRepository</span> orderRepository<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">NotifyWeChatContext</span> notifyWeChatContext <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DecryptNotifyResult</span> notifyResult <span class="token operator">=</span> notifyWeChatContext<span class="token punctuation">.</span><span class="token function">getDecryptNotifyResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> outTradeNo <span class="token operator">=</span> notifyResult<span class="token punctuation">.</span><span class="token function">getOutTradeNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span> orderRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>outTradeNo<span class="token punctuation">,</span>
        <span class="token class-name">ProductOrderFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creator</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span>
            <span class="token class-name">PaymentFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"订单不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置微信支付订单id</span>
    <span class="token class-name">ProductOrder</span> producedOrder <span class="token operator">=</span> <span class="token class-name">ProductOrderDraft</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">,</span> draft <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      draft<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTradeNo</span><span class="token punctuation">(</span>notifyResult<span class="token punctuation">.</span><span class="token function">getTransactionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">setPayTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    notifyWeChatContext<span class="token punctuation">.</span><span class="token function">setProductOrder</span><span class="token punctuation">(</span>producedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以校验支付的金额是否正确</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNextState</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ProductOrderStatus</span><span class="token punctuation">.</span><span class="token constant">TO_BE_DELIVERED</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 后续拉新分成可以在这边发送事件</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProductOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">switchTo</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">creator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProductOrder</span> producedOrder <span class="token operator">=</span> <span class="token class-name">ProductOrderDraft</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">,</span> draft <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      draft<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">ProductOrderStatus</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>producedOrder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotifyWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>]]></content:encoded>
      <enclosure url="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" type="image/png"/>
    </item>
    <item>
      <title>订单预支付</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/order/order-prepay.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/order/order-prepay.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">订单预支付</source>
      <description>订单预支付 微信小程序支付流程图微信小程序支付流程图 1-3是属于 4-8是预支付阶段，后端会调用微信支付接口生成一个预支付订单，订单信息，包括订单金额、支付人信息、支付相关参数等。 9-15是小程序端发起支付用户输入密码确认支付阶段。 依赖和配置 maven依赖 wx-java-pay-spring-boot-starter集成了微信支付相关的API...</description>
      <category>起凡商城</category>
      <pubDate>Mon, 19 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><img src="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" alt="微信小程序支付流程图" tabindex="0" loading="lazy"><figcaption>微信小程序支付流程图</figcaption></figure>
<p>1-3是属于<a href="/blog/project/qifan-mall/order/order-create.html" target="_blank">订单创建阶段</a></p>
<p>4-8是预支付阶段，后端会调用微信支付接口生成一个预支付订单，订单信息，包括订单金额、支付人信息、支付相关参数等。</p>
<p>9-15是小程序端发起支付用户输入密码确认支付阶段。</p>
<h2>依赖和配置</h2>
<h3>maven依赖</h3>
<p><code>wx-java-pay-spring-boot-starter</code>集成了微信支付相关的API，只需要配置相关的密钥信息即可开始使用。</p>
<div class="language-pom" data-ext="pom" data-title="pom"><pre class="language-pom"><code>      &lt;dependency&gt;
        &lt;groupId&gt;com.github.binarywang&lt;/groupId&gt;
        &lt;artifactId&gt;wx-java-pay-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;${wechat.version}&lt;/version&gt;
      &lt;/dependency&gt;
</code></pre></div><h3>密钥配置</h3>
<p><code>application.yml</code></p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">wx</span><span class="token punctuation">:</span>
  <span class="token key atrule">pay</span><span class="token punctuation">:</span>
    <span class="token key atrule">appId</span><span class="token punctuation">:</span> appid <span class="token comment"># 小程序appid</span>
    <span class="token key atrule">mchId</span><span class="token punctuation">:</span> mchid <span class="token comment">#商户id</span>
    <span class="token key atrule">apiV3Key</span><span class="token punctuation">:</span> v3Key <span class="token comment">#微信支付V3密钥</span>
    <span class="token key atrule">certSerialNo</span><span class="token punctuation">:</span> 4C144AABC0CC486EC0AB2DD492DCE6A2ZE2E6268 <span class="token comment"># 证书序列号</span>
    <span class="token key atrule">privateKeyPath</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>wechat/apiclient_key.pem <span class="token comment">#apiclient_key.pem证书文件的绝对路径或者以classpath:开头的类路径</span>
    <span class="token key atrule">privateCertPath</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>wechat/apiclient_cert.pem  <span class="token comment">#apiclient_cert.pem证书文件的绝对路径或者以classpath:开头的类路径</span>
    <span class="token key atrule">notifyUrl</span><span class="token punctuation">:</span> <span class="token string">"https://www.jarcheng.top/test-api/productOrder/notify"</span> <span class="token comment">#支付成功回调地址，填写你的服务器地址</span>
</code></pre></div><h3>配置文件读取</h3>
<p><code>WxPayPropertiesExtension</code>在<code>WxPayProperties</code>的基础上拓展了<code>notifyUrl</code>字段。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">"wx.pay"</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayPropertiesExtension</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> notifyUrl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre java="" class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableImplicitApi</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">WxPayPropertiesExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MallServerApplication</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MallServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>api</h2>
<p><code>io.qifan.mall.server.order.service.ProductOrderService#prepay</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"{id}/prepay"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span> <span class="token function">prepay</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> productOrderService<span class="token punctuation">.</span><span class="token function">prepay</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h2>发送预支付事件</h2>
<p><code>io.qifan.mall.server.order.service.ProductOrderService#prepay</code></p>
<p>使用订单状态机，向状态机发送相关的信息让状态机寻找响应的处理器。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">JsapiResult</span> <span class="token function">prepay</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span> productOrderRepository
        <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>
            <span class="token class-name">ProductOrderFetcher</span><span class="token punctuation">.</span>$
                <span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token class-name">PaymentFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">payType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"订单不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StateEvent</span> stateEvent <span class="token operator">=</span> <span class="token class-name">StateEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orderState</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">eventType</span><span class="token punctuation">(</span><span class="token string">"PREPAY"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sceneId</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">payType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">businessCode</span><span class="token punctuation">(</span><span class="token string">"PRODUCT_ORDER"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JsapiResult</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> stateMachine<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h2>预支付上下文</h2>
<p>存储预支付下单请求，<code>WxPayUnifiedOrderV3Request</code>是调用微信微信服务器的请求参数。以及<code>JsapiResult</code>是预支付下单的响应结果。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrepayWeChatContext</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> orderId<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">WxPayUnifiedOrderV3Request</span> wxPayUnifiedOrderV3Request<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span> jsapiResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>预支付处理器</h2>
<h3>处理器</h3>
<p>订单预支付状态处理器 <code>PrepayWeChatProcessor</code>，用于处理订单状态为 "TO_BE_PAID"，事件为 "PREPAY"，场景为 "WE_CHAT_PAY" 的情况。</p>
<ol>
<li>
<p><strong><code>@OrderStateProcessor</code> 注解：</strong></p>
<ul>
<li>标记了该类为订单状态处理器，并指定了处理的订单状态为 "TO_BE_PAID"，事件为 "PREPAY"，场景为 "WE_CHAT_PAY"。</li>
</ul>
</li>
<li>
<p><strong><code>@Slf4j</code> 注解：</strong></p>
<ul>
<li>使用 Lombok 提供的注解，自动生成日志记录器。</li>
</ul>
</li>
<li>
<p><strong><code>@AllArgsConstructor</code> 注解：</strong></p>
<ul>
<li>使用 Lombok 提供的注解，生成包含所有参数的构造方法。</li>
</ul>
</li>
<li>
<p><strong>继承自 <code>AbstractStateProcessor</code>：</strong></p>
<ul>
<li>该类继承了一个抽象的订单状态处理器 <code>AbstractStateProcessor</code>，并实现了其中的抽象方法。</li>
<li>泛型类型为 <code>&lt;WxPayUnifiedOrderV3Result.JsapiResult, PrepayWeChatContext&gt;</code>，表示该处理器处理的是返回结果类型为 <code>WxPayUnifiedOrderV3Result.JsapiResult</code>，上下文类型为 <code>PrepayWeChatContext</code> 的订单状态。</li>
</ul>
</li>
<li>
<p><strong>构造方法参数：</strong></p>
<ul>
<li><code>WxPayService wxPayService</code>：微信支付服务对象。</li>
<li><code>ObjectMapper objectMapper</code>：用于序列化和反序列化的对象映射工具。</li>
<li><code>RedisTemplate&lt;String, Object&gt; redisTemplate</code>：Redis 缓存模板。</li>
<li><code>ProductOrderRepository productOrderRepository</code>：商品订单的数据仓库。</li>
<li><code>UserWeChatRepository userWeChatRepository</code>：用户微信信息的数据仓库。</li>
<li><code>WxPayPropertiesExtension wxPayPropertiesExtension</code>：微信支付配置的扩展属性。</li>
<li><code>WxPayProperties wxPayProperties</code>：微信支付配置的基本属性。</li>
</ul>
</li>
</ol>
<p>总体而言，该处理器用于处理订单状态为 "TO_BE_PAID"，事件为 "PREPAY"，场景为 "WE_CHAT_PAY" 的情况，其中包含了与微信支付相关的业务逻辑。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@OrderStateProcessor</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token string">"TO_BE_PAID"</span><span class="token punctuation">,</span> event <span class="token operator">=</span> <span class="token string">"PREPAY"</span><span class="token punctuation">,</span> sceneId <span class="token operator">=</span> <span class="token string">"WE_CHAT_PAY"</span><span class="token punctuation">,</span> bizCode <span class="token operator">=</span> <span class="token string">"PRODUCT_ORDER"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrepayWeChatProcessor</span> <span class="token keyword">extends</span>
    <span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">,</span> <span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WxPayService</span> wxPayService<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProductOrderRepository</span> productOrderRepository<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserWeChatRepository</span> userWeChatRepository<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WxPayPropertiesExtension</span> wxPayPropertiesExtension<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WxPayProperties</span> wxPayProperties<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 忽略...</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token annotation punctuation">@SneakyThrows</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 忽略...</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNextState</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 忽略...</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span>
      <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 忽略...</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span>
      <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 忽略...</span>
  <span class="token punctuation">}</span>


  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>预支付请求体构建-prepare阶段</h3>
<ol>
<li>
<p><strong>获取订单信息：</strong></p>
<ul>
<li>通过订单ID（<code>context.getContext().getOrderId()</code>）从数据库中查询订单信息。</li>
<li>使用 <code>ProductOrderFetcher.$.allScalarFields().payment(PaymentFetcher.$.allScalarFields())</code> 配置订单信息的查询，包括订单本身的所有标量字段以及关联的支付信息。</li>
</ul>
</li>
<li>
<p><strong>获取当前用户关联的微信用户：</strong></p>
<ul>
<li>查询当前用户关联的微信用户信息，使用 <code>UserWeChatTable.$</code> 表示 <code>UserWeChat</code> 数据表。</li>
<li>使用 <code>userWeChatRepository.sql().createQuery(weChatTable)</code> 构建 SQL 查询语句。</li>
<li>查询条件为当前用户ID，使用 <code>weChatTable.userId().eq(StpUtil.getLoginIdAsString())</code>。</li>
<li>通过 <code>select(weChatTable)</code> 进行结果选择，并通过 <code>fetchOptional()</code> 获取可选的微信用户信息。</li>
</ul>
</li>
<li>
<p><strong>构建微信支付请求对象 <code>WxPayUnifiedOrderV3Request</code>：</strong></p>
<ul>
<li>创建一个 <code>WxPayUnifiedOrderV3Request</code> 对象用于发起微信支付。</li>
<li>设置支付价格，将订单的支付金额（以分为单位）赋给 <code>amount.setTotal</code>。</li>
<li>获取支付人信息，设置支付人的 <code>openid</code> 为当前用户的微信 OpenID。</li>
<li>设置其他支付相关参数，包括回调地址、小程序 AppID、商家号、支付描述、订单系统的订单号、过期时间等。</li>
</ul>
</li>
<li>
<p><strong>设置预支付订单请求对象：</strong></p>
<ul>
<li>将构建好的 <code>WxPayUnifiedOrderV3Request</code> 对象设置到上下文中，以备后续的微信支付请求。</li>
</ul>
</li>
<li>
<p><strong>日志记录：</strong></p>
<ul>
<li>使用日志记录器 <code>log</code> 记录预支付订单内容填写的日志信息。</li>
</ul>
</li>
</ol>
<p><code>prepare</code> 方法主要用于准备微信支付的预支付订单信息，包括订单金额、支付人信息、支付相关参数等。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span>
        productOrderRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">ProductOrderFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token class-name">PaymentFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd'T'HH:mm:ssXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查找当前用户关联的微信用户</span>
    <span class="token class-name">UserWeChatTable</span> weChatTable <span class="token operator">=</span> <span class="token class-name">UserWeChatTable</span><span class="token punctuation">.</span>$<span class="token punctuation">;</span>
    <span class="token class-name">UserWeChat</span> userWeChat <span class="token operator">=</span> userWeChatRepository<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>weChatTable<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>weChatTable<span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getLoginIdAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>weChatTable<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fetchOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"非小程序用户, 请注册"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WxPayUnifiedOrderV3Request</span> wxPayUnifiedOrderV3Request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPayUnifiedOrderV3Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 支付价格</span>
    <span class="token class-name">WxPayUnifiedOrderV3Request<span class="token punctuation">.</span>Amount</span> amount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPayUnifiedOrderV3Request<span class="token punctuation">.</span>Amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    amount<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">payAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>
            <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取支付人信息</span>
    <span class="token class-name">WxPayUnifiedOrderV3Request<span class="token punctuation">.</span>Payer</span> payer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPayUnifiedOrderV3Request<span class="token punctuation">.</span>Payer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    payer<span class="token punctuation">.</span><span class="token function">setOpenid</span><span class="token punctuation">(</span>userWeChat<span class="token punctuation">.</span><span class="token function">openId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wxPayUnifiedOrderV3Request<span class="token punctuation">.</span><span class="token function">setPayer</span><span class="token punctuation">(</span>payer<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
        <span class="token comment">// 回调地址</span>
        <span class="token punctuation">.</span><span class="token function">setNotifyUrl</span><span class="token punctuation">(</span>wxPayPropertiesExtension<span class="token punctuation">.</span><span class="token function">getNotifyUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 小程序appid</span>
        <span class="token punctuation">.</span><span class="token function">setAppid</span><span class="token punctuation">(</span>wxPayProperties<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 商家号</span>
        <span class="token punctuation">.</span><span class="token function">setMchid</span><span class="token punctuation">(</span>wxPayProperties<span class="token punctuation">.</span><span class="token function">getMchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 支付描述</span>
        <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 订单系统的订单号</span>
        <span class="token punctuation">.</span><span class="token function">setOutTradeNo</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 过期时间</span>
        <span class="token punctuation">.</span><span class="token function">setTimeExpire</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"www.jarcheng.top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWxPayUnifiedOrderV3Request</span><span class="token punctuation">(</span>wxPayUnifiedOrderV3Request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"预支付订单内容：{}"</span><span class="token punctuation">,</span> wxPayUnifiedOrderV3Request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre></div><h3>预支付校验-check阶段</h3>
<ol>
<li>
<p><strong>获取订单信息：</strong></p>
<ul>
<li>通过订单ID（<code>context.getContext().getOrderId()</code>）从数据库中查询订单信息。</li>
<li>使用 <code>ProductOrderFetcher.$</code> 查询订单本身的所有标量字段，以及设置 <code>creator(true)</code> 表示同时查询订单创建者信息，设置 <code>items</code> 表示查询订单项信息，包括订单项的 <code>skuCount</code> 和关联的商品SKU信息。</li>
</ul>
</li>
<li>
<p><strong>校验订单拥有者：</strong></p>
<ul>
<li>检查当前登录用户的ID是否与订单的创建者ID一致，确保支付的是自己的订单。如果不一致，抛出异常表示无法支付他人订单。</li>
</ul>
</li>
<li>
<p><strong>查询是否存在预支付信息：</strong></p>
<ul>
<li>利用 Redis 缓存查询是否存在预支付信息，通过 <code>redisTemplate.opsForValue().get("prepay:" + context.getContext().getOrderId())</code> 获取预支付信息。</li>
</ul>
</li>
<li>
<p><strong>判断是否存在预支付信息：</strong></p>
<ul>
<li>如果存在预支付信息，则直接将该信息转换为 <code>WxPayUnifiedOrderV3Result.JsapiResult</code> 对象，并返回包含该对象的 <code>R</code> 结果。</li>
<li>在这里，通过反序列化操作，将预支付信息从 Redis 中取出，并转换为对应的 Java 对象。</li>
</ul>
</li>
<li>
<p><strong>日志记录：</strong></p>
<ul>
<li>使用日志记录器 <code>log</code> 记录是否存在预支付的订单。</li>
</ul>
</li>
<li>
<p><strong>返回结果：</strong></p>
<ul>
<li>如果存在预支付信息，将 <code>R</code> 对象的状态码设置为 <code>ResultCode.Fail.getCode()</code>，表示后续不需要执行其他操作，直接返回包含预支付信息的 <code>R</code> 对象。</li>
</ul>
</li>
<li>
<p><strong>返回空结果：</strong></p>
<ul>
<li>如果没有预支付信息，直接返回一个表示成功的 <code>R</code> 对象，其中的数据部分为 <code>null</code>。</li>
</ul>
</li>
</ol>
<p>总体而言，该 <code>check</code> 方法主要用于在进行微信支付前，校验订单的拥有者是否为当前登录用户，并检查是否存在预支付信息。如果存在预支付信息，则直接返回包含该信息的 <code>R</code> 对象，并不执行后续的支付操作；如果不存在预支付信息，则返回一个表示成功的 <code>R</code> 对象。这一步骤有助于避免重复发起支付请求，提高支付效率。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Override</span>
  <span class="token annotation punctuation">@SneakyThrows</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProductOrder</span> productOrder <span class="token operator">=</span> productOrderRepository
        <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ProductOrderFetcher</span><span class="token punctuation">.</span>$
                <span class="token punctuation">.</span><span class="token function">creator</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token class-name">ProductOrderItemFetcher</span><span class="token punctuation">.</span>$
                    <span class="token punctuation">.</span><span class="token function">skuCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">productSku</span><span class="token punctuation">(</span><span class="token class-name">ProductSkuFetcher</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">allScalarFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"订单不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getLoginIdAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">.</span><span class="token function">creator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotGrant</span><span class="token punctuation">,</span> <span class="token string">"无法支付他人订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Object</span> prepayRes <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"prepay:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prepayRes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"已存在预支付订单：{}"</span><span class="token punctuation">,</span> prepayRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果存在预支付订单则直接发起支付</span>
      <span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span> jsapiResult <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>
          objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>prepayRes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">&gt;</span></span> ok <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>jsapiResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 不执行后续的方法</span>
      ok<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>Fail</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre></div><h3>调用接口预支付下单-action阶段</h3>
<p>对应支付流程图中的4，6，7阶段。</p>
<ol>
<li>
<p><strong>发起预支付订单：</strong></p>
<ul>
<li>使用 <code>wxPayService.createOrderV3</code> 方法通过微信支付服务发起预支付订单。</li>
<li>传递了支付类型参数 <code>TradeTypeEnum.JSAPI</code> 表示使用 JSAPI 进行支付。</li>
<li>将预支付订单的请求对象（<code>context.getContext().getWxPayUnifiedOrderV3Request()</code>）传递给 <code>createOrderV3</code> 方法。</li>
</ul>
</li>
<li>
<p><strong>捕获异常：</strong></p>
<ul>
<li>捕获 <code>WxPayException</code> 异常，该异常表示微信支付接口返回的错误信息。</li>
<li>如果发生异常，抛出自定义业务异常，并将微信支付接口返回的错误信息作为异常信息。</li>
</ul>
</li>
<li>
<p><strong>记录日志：</strong></p>
<ul>
<li>在预支付订单下单成功后，使用日志记录器 <code>log</code> 记录下单成功的日志信息。</li>
</ul>
</li>
<li>
<p><strong>设置上下文信息：</strong></p>
<ul>
<li>将预支付订单的结果（<code>wxPayAppOrderResult</code>）设置到上下文中，以备后续的支付处理。</li>
</ul>
</li>
<li>
<p><strong>返回结果：</strong></p>
<ul>
<li>返回一个包含预支付订单结果的 <code>R</code> 对象，其中状态码表示成功，数据部分为预支付订单的结果对象。</li>
</ul>
</li>
</ol>
<p>总体而言，这两个方法主要用于获取下一个状态和发起预支付订单的操作。<code>getNextState</code> 方法返回订单状态不变，仍然是待支付状态；<code>action</code> 方法则调用微信支付服务发起预支付订单，并记录相关的日志信息，最后返回包含预支付订单结果的 <code>R</code> 对象。这两个方法是状态机中状态迁移和状态动作的一部分。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNextState</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态不变，仍然是待支付状态</span>
    <span class="token keyword">return</span> <span class="token class-name">ProductOrderStatus</span><span class="token punctuation">.</span><span class="token constant">TO_BE_PAID</span><span class="token punctuation">.</span><span class="token function">getKeyEnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span>
      <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">JsapiResult</span>
        wxPayAppOrderResult<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      wxPayAppOrderResult <span class="token operator">=</span> wxPayService<span class="token punctuation">.</span><span class="token function">createOrderV3</span><span class="token punctuation">(</span><span class="token class-name">TradeTypeEnum</span><span class="token punctuation">.</span><span class="token constant">JSAPI</span><span class="token punctuation">,</span>
          context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getWxPayUnifiedOrderV3Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WxPayException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>TransferStatusError</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getReturnMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"预支付订单，下单成功：{}"</span><span class="token punctuation">,</span> wxPayAppOrderResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJsapiResult</span><span class="token punctuation">(</span>wxPayAppOrderResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>wxPayAppOrderResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h3>预支付订单保存-save阶段</h3>
<ol>
<li>
<p><strong>记录日志：</strong></p>
<ul>
<li>使用日志记录器 <code>log</code> 记录保存预支付订单的日志信息。</li>
</ul>
</li>
<li>
<p><strong>设置预支付订单过期时间：</strong></p>
<ul>
<li>利用 Redis 缓存将预支付订单信息存储起来，使用 <code>redisTemplate.opsForValue().set</code> 方法。</li>
<li>设置键为 <code>"prepay:" + context.getContext().getOrderId()</code>，值为 <code>context.getContext().getJsapiResult()</code>。</li>
<li>设置过期时间为 1 小时，即预支付订单的有效期为 1 小时。</li>
</ul>
</li>
<li>
<p><strong>返回结果：</strong></p>
<ul>
<li>返回一个包含预支付订单结果的 <code>R</code> 对象，其中状态码表示成功，数据部分为预支付订单的结果对象。</li>
</ul>
</li>
</ol>
<p>总体而言，<code>save</code> 方法主要用于保存预支付订单的信息到 Redis 缓存中，并设置了预支付订单的过期时间。通过保存预支付订单信息到缓存中，可以在下次支付请求时直接获取缓存中的信息，避免了重复发起支付请求。返回的 <code>R</code> 对象包含了预支付订单结果作为成功的标志。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WxPayUnifiedOrderV3Result<span class="token punctuation">.</span>JsapiResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span>
      <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrepayWeChatContext</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"保存预支付订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 一个小时后预支付订单过期</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"prepay:"</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJsapiResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJsapiResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h2>小程序发起支付</h2>
<p>对应支付流程图中的9和13阶段。</p>
<p>在前端发起支付的过程中，通过按钮点击事件 <code>handlePay</code> 触发支付操作。以下是该前端代码的主要步骤解释：</p>
<ol>
<li>
<p><strong>按钮点击事件：</strong></p>
<ul>
<li>在页面中通过 <code>&lt;nut-button&gt;</code> 组件渲染了一个按钮，点击按钮触发 <code>handlePay</code> 方法。</li>
</ul>
</li>
<li>
<p><strong>支付处理函数 <code>handlePay</code>：</strong></p>
<ul>
<li>使用 <code>api.productOrderController.prepay</code> 发起请求，该请求向后端发起预支付订单的请求，其中传递了订单的 <code>id</code>。</li>
<li>在请求成功后，获取后端返回的支付参数。</li>
</ul>
</li>
<li>
<p><strong>调用 <code>Taro.requestPayment</code>：</strong></p>
<ul>
<li>使用 Taro 框架的 <code>Taro.requestPayment</code> 方法发起微信支付。</li>
<li>传递了微信支付所需的参数，包括 <code>nonceStr</code>、<code>package</code>、<code>paySign</code>、<code>timeStamp</code>、<code>signType</code> 等。</li>
<li>定义了支付成功和支付失败的回调函数。</li>
</ul>
</li>
<li>
<p><strong>支付成功回调：</strong></p>
<ul>
<li>在支付成功的回调函数中，显示支付成功的提示信息。</li>
</ul>
</li>
<li>
<p><strong>支付失败回调：</strong></p>
<ul>
<li>在支付失败的回调函数中，将失败的信息打印到控制台。</li>
</ul>
</li>
</ol>
<p>总体而言，前端的支付流程是通过按钮点击触发支付处理函数 <code>handlePay</code>，该函数向后端发起请求获取支付参数，然后调用微信支付接口 <code>Taro.requestPayment</code> 进行支付。支付成功后显示成功提示，支付失败则在控制台打印失败信息。</p>
<p><code>order-details.vue</code></p>

]]></content:encoded>
      <enclosure url="https://pay.wechatpay.cn/wiki/doc/apiv3/assets/img/pay/wechatpay/6_2.png" type="image/png"/>
    </item>
    <item>
      <title>订单状态机</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/order/state-machine.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/order/state-machine.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">订单状态机</source>
      <description>订单状态机 订单有待支付/待发货/待收货/待评价/已完成/已关闭/退款中等状态，每个状态下的操作结果都不一样。 比如待支付状态下取消订单不需要退款，而待发货状态下取消订单需要退款。待收货时就不能取消订单，需要走退款流程。 因此状态机就是为了实现，不同的状态下操作不一样，同样的操作在不同的状态下执行不同的逻辑。 上下文对象 每个处理器的上下文，可以是任意...</description>
      <category>起凡商城</category>
      <pubDate>Sun, 18 Feb 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>订单有待支付/待发货/待收货/待评价/已完成/已关闭/退款中等状态，每个状态下的操作结果都不一样。<br>
比如待支付状态下取消订单不需要退款，而待发货状态下取消订单需要退款。待收货时就不能取消订单，需要走退款流程。<br>
因此状态机就是为了实现，不同的状态下操作不一样，同样的操作在不同的状态下执行不同的逻辑。</p>
<h2>上下文对象</h2>
<p>每个处理器的上下文，可以是任意对象，比如订单id，支付详情，创建订单表单等等。因此<code>StateContext</code>中的<code>context</code>是泛型<code>C</code>。除此之外还有固定的操作事件对象，用于寻找对应的订单处理器。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 订单操作事件
   */</span>
  <span class="token keyword">private</span> <span class="token class-name">StateEvent</span> stateEvent<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 业务可定义的上下文泛型对象
   */</span>
  <span class="token keyword">private</span> <span class="token class-name">C</span> context<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">StateContext</span><span class="token punctuation">(</span><span class="token class-name">StateEvent</span> stateEvent<span class="token punctuation">,</span> <span class="token class-name">C</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stateEvent <span class="token operator">=</span> stateEvent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 订单状态迁移事件
   */</span>
  <span class="token annotation punctuation">@Data</span>
  <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Builder</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StateEvent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 订单状态
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderState<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 触发事件
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> eventType<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 业务编码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> businessCode<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 业务场景
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sceneId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>订单处理器</h2>
<h3>处理器接口</h3>
<p>订单状态处理器接受一个上下文，返回处理结果。</p>
<ol>
<li><strong>泛型参数：</strong>
<ul>
<li><code>T</code>: 表示处理器执行的操作返回的数据类型。</li>
<li><code>C</code>: 表示处理器接受数据的类型。</li>
</ul>
</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>细化处理步骤</h3>
<p>上面的处理器接口只是定义了逻辑入口，我们可以使用模板模式在内部将action细化为<code>prepare</code>, <code>check</code>, <code>getNextState</code>, <code>action</code>, <code>save</code>, <code>after</code>.</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StateActionStep</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 准备数据
   */</span>
  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 校验
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 获取当前状态处理器处理完毕后，所处于的下一个状态
   */</span>
  <span class="token class-name">String</span> <span class="token function">getNextState</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态动作方法，主要状态迁移逻辑
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态数据持久化
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态迁移成功，持久化后执行的后续处理
   */</span>
  <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>抽象处理器模板模式编排步骤</h3>
<p>抽象的订单状态处理器类 <code>AbstractStateProcessor</code>，实现了 <code>StateActionStep</code> 和 <code>StateProcessor</code> 接口，并提供了一个模板方法 <code>action</code>。</p>
<ol>
<li>
<p><strong>泛型参数：</strong></p>
<ul>
<li><code>T</code>: 表示处理器执行的操作返回的数据类型。</li>
<li><code>C</code>: 表示处理器接受数据的类型。</li>
</ul>
</li>
<li>
<p><strong><code>@SneakyThrows</code> 注解：</strong></p>
<ul>
<li>这是 Lombok 提供的注解，它可以自动处理 checked exceptions，减少了代码中异常处理的冗余。但要注意，它会将 checked exception 转换为 unchecked exception，因此需要谨慎使用。</li>
</ul>
</li>
<li>
<p><strong>模板方法 <code>action</code>：</strong></p>
<ul>
<li>这是一个具体的订单状态处理逻辑的模板方法。它按照一定的顺序调用了 <code>prepare</code>、<code>check</code>、<code>getNextState</code>、<code>action</code>、<code>save</code> 和 <code>after</code> 方法，以完成订单状态的处理过程。</li>
<li>在 <code>prepare</code> 方法中准备数据，<code>check</code> 方法中进行校验，<code>getNextState</code> 获取下一个状态，<code>action</code> 执行具体业务逻辑，<code>save</code> 进行持久化，最后调用 <code>after</code> 完成处理后的操作。</li>
<li>在每个步骤中，如果有错误发生，会立即返回错误结果，中止后续步骤的执行。</li>
</ul>
</li>
<li>
<p><strong>方法调用顺序：</strong></p>
<ul>
<li>调用顺序是 <code>prepare</code> -&gt; <code>check</code> -&gt; <code>getNextState</code> -&gt; <code>action</code> -&gt; <code>save</code> -&gt; <code>after</code>。</li>
<li>这个顺序保证了在执行业务逻辑前进行了数据准备和校验，并在最后进行了持久化和后续处理。</li>
</ul>
</li>
<li>
<p><strong>异常处理：</strong></p>
<ul>
<li>使用了 <code>@SneakyThrows</code> 注解，对异常进行了简化处理，将 checked 异常转换为 unchecked 异常。在实际应用中需要确保异常处理的正确性和可维护性。</li>
</ul>
</li>
</ol>
<p>这个抽象类提供了一个通用的订单状态处理模板，具体的订单状态处理器只需要继承这个抽象类并实现相应的方法即可，方便了订单状态机的扩展和定制。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">StateActionStep</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">// 数据准备</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 串行校验器</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// getNextState不能在prepare前，因为有的nextState是根据prepare中的数据转换而来</span>
        <span class="token class-name">String</span> nextState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextState</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 业务逻辑</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 持久化</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// after</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>处理器注解</h3>
<p>在处理器上添加<code>@OrderStateProcessor</code>代表该处理器处理的状态+事件+（场景和业务）。默认情况业务和场景是<code>*</code>的，表示所有场景和业务都处理。</p>
<p>例如：<code>@OrderStateProcessor(state = "TO_BE_PAID", event = "PREPAY", sceneId = "WE_CHAT_PAY")</code>处理的是待支付状态下的订单，预支付事件，场景是微信支付。通过这种方式可以细力度区分各种状态和事件还要场景。体现了单一职责的设计原理。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 状态机引擎的处理器注解标识
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">OrderStateProcessor</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 指定状态
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 业务
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bizCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 场景
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 事件
   */</span>
  <span class="token class-name">String</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在<code>OrderStateProcessor</code>上添加 <code>@Component</code>，使得被<code>@OrderStateProcessor</code>标记的处理器会被识别为<code>bean</code>。</p>
</div>
<h2>处理器注册</h2>
<p><code>StateProcessorRegistry</code> 它实现了 <code>BeanPostProcessor</code> 接口，用于在Spring bean初始化之后进行处理。</p>
<ol>
<li>
<p><strong><code>stateProcessorMap</code> 静态成员变量：</strong></p>
<ul>
<li>使用 <code>ConcurrentHashMap</code> 来存储订单状态处理器的注册信息。结构是三层嵌套的 Map，第一层 key 是订单状态，第二层 key 是订单状态对应的事件，第三层 key 是业务码和场景的组合，值是对应的处理器列表。</li>
</ul>
</li>
<li>
<p><strong><code>acquireStateProcessor</code> 方法：</strong></p>
<ul>
<li>根据订单状态、事件类型、业务码和场景获取对应的订单状态处理器列表。</li>
</ul>
</li>
<li>
<p><strong><code>postProcessAfterInitialization</code> 方法：</strong></p>
<ul>
<li>是 <code>BeanPostProcessor</code> 接口的方法，用于在 bean 初始化后进行处理。</li>
<li>对于实现了 <code>AbstractStateProcessor</code> 类并使用了 <code>OrderStateProcessor</code> 注解的 bean，会从注解中获取状态、事件、业务码和场景等信息，然后调用 <code>initProcessorMap</code> 方法进行注册。</li>
</ul>
</li>
<li>
<p><strong><code>initProcessorMap</code> 方法：</strong></p>
<ul>
<li>通过并行流处理状态、业务码和场景的组合，调用 <code>registerStateProcessor</code> 方法进行注册。</li>
</ul>
</li>
<li>
<p><strong><code>registerStateProcessor</code> 方法：</strong></p>
<ul>
<li>用于将订单状态处理器注册到 <code>stateProcessorMap</code> 中，按照订单状态、事件、业务码和场景的组合进行存储。</li>
</ul>
</li>
</ol>
<p>这个类的作用是提供一个中心化的地方，用于管理订单状态处理器的注册和获取。通过注解方式标记了订单状态处理器，将其注册到 <code>stateProcessorMap</code> 中。这样，状态机引擎在进行状态转换时可以根据订单状态、事件、业务码和场景快速查找到对应的处理器列表，方便进行后续的状态转换逻辑。使用并发安全的集合类，确保在多线程环境下的安全性。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateProcessorRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 第一层key是订单状态。 第二层key是订单状态对应的事件，一个状态可以有多个事件。 第三层key是具体场景code，场景下对应的多个处理器，需要后续进行过滤选择出一个具体的执行。
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stateProcessorMap <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> <span class="token function">acquireStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderState<span class="token punctuation">,</span>
      <span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">String</span> businessCode<span class="token punctuation">,</span>
      <span class="token class-name">String</span> sceneId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> abstractStateProcessors <span class="token operator">=</span>
        stateProcessorMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderState<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>businessCode <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> sceneId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> abstractStateProcessors<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AbstractStateProcessor</span> <span class="token operator">&amp;&amp;</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>
        <span class="token class-name">OrderStateProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">OrderStateProcessor</span> annotation <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">OrderStateProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> states <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> event <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bizCodes <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">bizCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sceneIds <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">sceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">initProcessorMap</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> event<span class="token punctuation">,</span> bizCodes<span class="token punctuation">,</span> sceneIds<span class="token punctuation">,</span> stateProcessorMap<span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">StateProcessor</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">initProcessorMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> states<span class="token punctuation">,</span> <span class="token class-name">String</span> event<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bizCodes<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sceneIds<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span>
      <span class="token class-name">E</span> processor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> bizCode <span class="token operator">:</span> bizCodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sceneId <span class="token operator">:</span> sceneIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>orderStateEnum <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">registerStateProcessor</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">,</span> event<span class="token punctuation">,</span> bizCode<span class="token punctuation">,</span> sceneId<span class="token punctuation">,</span> map<span class="token punctuation">,</span> processor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 初始化状态机处理器
   */</span>
  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">StateProcessor</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">registerStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderStateEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> event<span class="token punctuation">,</span>
      <span class="token class-name">String</span> bizCode<span class="token punctuation">,</span>
      <span class="token class-name">String</span> sceneId<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span>
      <span class="token class-name">E</span> processor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// state维度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stateTransformEventEnumMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// event维度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// bizCode and sceneId</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> processorMap <span class="token operator">=</span> stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> bizCodeAndSceneId <span class="token operator">=</span> bizCode <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> sceneId<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processorMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      processorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    processorMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>状态机</h2>
<p><code>StateMachine</code>接收状态事件上下文，并根据当前状态事件找到对应的状态处理器，然后执行处理逻辑。通过调用 <code>StateProcessorRegistry</code> 类的方法，获取状态处理器列表，并进行相关的异常处理，确保状态机引擎的正常运行。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateMachine</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前事件处理器</span>
    <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> stateProcessor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStateProcessor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行处理逻辑</span>
    <span class="token keyword">return</span> stateProcessor<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token function">getStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StateEvent</span> stateEvent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据状态+事件对象获取所对应的业务处理器集合</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> processorList <span class="token operator">=</span>
        <span class="token class-name">StateProcessorRegistry</span><span class="token punctuation">.</span><span class="token function">acquireStateProcessor</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            stateEvent<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stateEvent<span class="token punctuation">.</span><span class="token function">getBusinessCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            stateEvent<span class="token punctuation">.</span><span class="token function">getSceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processorList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 订单状态发生改变</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>TransferStatusError</span><span class="token punctuation">,</span> <span class="token string">"订单状态不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"状态处理器未找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>processorList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">"状态处理器未找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processorList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> <span class="token string">"状态处理器超过1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> processorList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>使用案例</h2>
<p>请参考<a href="/blog/project/qifan-mall/order/order-create.html#%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3" target="_blank">订单创建流程</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Vite</title>
      <link>https://mister-hope.github.io/blog/knowledge/vite/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/vite/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Vite</source>
      <description>Vite 以前的vue-cli是基于webpack，而webpack在开发阶段启动的速度是十分缓慢。原因是webpack会把一整个项目从入口开始（index.html）将涉及的所有的模块打包成一个js文件（图1）。 随着现代浏览器对js模块的支持，现在在浏览器中就可以使用export 和 import关键字来生命模块和导入模块，这意味着浏览器现在不需要...</description>
      <category>前端工程化</category>
      <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>以前的vue-cli是基于webpack，而webpack在开发阶段启动的速度是十分缓慢。原因是webpack会把一整个项目从入口开始（index.html）将涉及的所有的模块打包成一个js文件（图1）。</p>
<p>随着现代浏览器对js模块的支持，现在在浏览器中就可以使用<code>export</code> 和 <code>import</code>关键字来生命模块和导入模块，这意味着浏览器现在不需要一次性获取所有的模块，可以在需要的时候去请求相应的模块（图2）。<br>
并且当我们修改了代码时，vite只会更新代码涉及到模块进行热模块替换（HMR），使用我们在使用vite进行开发是每次更新都是十分的丝滑，很少出现整个页面都全部重新加载的情况。</p>
<blockquote>
<p>需要注意的是，vite在打包时（npm run build）使用的是<code>rollup</code>。在开发时<code>npm run dev</code>使用的是<code>esbuild</code>。也就是说打包时会打包成几个大的js，而不是像开发时那样划分出很多模块。因为这样会增多浏览器和服务端的http请求，使得服务器压力增大。除此之外<code>rollup</code>在打包方面更加灵活有丰富的拓展插件。</p>
</blockquote>


<h2>安装</h2>
<p>安装 vite</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i vite <span class="token parameter variable">-D</span>
</code></pre></div><p>在package.json中添加npm script</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span><span class="token punctuation">,</span>
    <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span><span class="token punctuation">,</span>
    <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"^4.4.9"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>代码</h2>
<p>相比于<code>vue-cli</code>你会发现vite的项目中，index.html不在public目录下，并且你可以看见index.html中直接引用了js/ts文件。原因是<code>vite</code>会把index.html视为你源码的一部分。默认index.html是整个项目的入口。</p>
<p><code>index.html</code></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

  <span class="token keyword">import</span> <span class="token punctuation">{</span>showCurrentTime<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.js'</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".time"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">showCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>当前时间：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>index.js</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">showCurrentTime</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>运行</h2>
<p>执行 <code>npm run dev</code> 访问<code>http://localhost:5173</code></p>

]]></content:encoded>
    </item>
    <item>
      <title>手把手教你搭建静态/博客网站</title>
      <link>https://mister-hope.github.io/blog/knowledge/website/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/website/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">手把手教你搭建静态/博客网站</source>
      <description>手把手教你搭建静态/博客网站 在搭建静态网站中，搭建博客是一个很典型的应用场景。我们一般用markdown写好博客内容，通过webpack打包成前端的html，jss，css等其他静态资源。然后我们需要将这些静态资源放到服务器上供他人阅读。本期的教程就是教搭建如何使用Nginx将我们的博客搭建起来。 宝塔面板 宝塔面板是一个很好用的软件管理工具可以帮助...</description>
      <category>网站搭建</category>
      <pubDate>Wed, 09 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在搭建静态网站中，搭建博客是一个很典型的应用场景。我们一般用markdown写好博客内容，通过webpack打包成前端的html，jss，css等其他静态资源。然后我们需要将这些静态资源放到服务器上供他人阅读。本期的教程就是教搭建如何使用Nginx将我们的博客搭建起来。</p>
<h2>宝塔面板</h2>
<p>宝塔面板是一个很好用的软件管理工具可以帮助你快速的安装各种软件并且可视化的配置这些软件，也包含了一些常用的运维监控。比如防火墙，CPU占用异常，定时任务等。</p>
<p>如果不使用宝塔面板，你需要手工输入命令安装各类软件，操作起来费时费力并且容易出错，而且需要记住很多Linux的命令，非常复杂。</p>
<p>使用宝塔后，比如你安装Nginx，Docker，Mysql只需要在软件商店里面点击安装就行了。</p>
<h3>安装宝塔</h3>
<p>根据你的系统在<a href="https://www.bt.cn/new/download.html" target="_blank" rel="noopener noreferrer">官网</a>这边选择对应的脚本。我这边以CentOS7为例子</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh https://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh ed8484bec
</code></pre></div><p>安装的过程中会询问是否同意安装到/www目录，选择y同意（图1）。</p>

<p>安装结束后，会出现以下提示（图2）。复制外网地址，且需要在云服务器的安全组中开放35402（下面有提示，每个人需要开放端口不一样）。打开网站后输入下面的账号密码。</p>
<p>如果你忘记了下面的网址和密码，只需要在服务器上输入bt，再根据提示输入 14 查看面板默认信息，就会出现安装成功后提示的信息。</p>

<h3>安装Nginx</h3>
<p>在宝塔面板的左侧菜单中找到软件商店（图3），点击右侧的安装按钮然后选择极速安装等待安装完成。<br>
</p>

<h2>Nginx</h2>
<p>Nginx是我不管自己学习时还是工作后都经常用到的一个服务器，负载均衡，SSL证书，K8S Ingress<br>
Controller，反向代理，静态内容缓存，网站搭建等等。作为个人开发者反向代理，网站搭建，SSL证书配置这三个的使用频率是最高的，在工作中上诉的功能都经常会用到。</p>
<p>那这次我们要讲的网站搭建就是把Nginx当作静态资源服务器，访问nginx的时候它会根据我们配置的规则读取网页html，js，css，等其他图片媒体资源。</p>
<h3>上传静态网站文件</h3>
<p>可以看到这是我打包后的博客，你们的目录不必和我的一样，只需要确保你的网站里面有index.html。</p>
<figure><figcaption>img_1.png</figcaption></figure>

<p>在宝塔面板的左侧菜单栏中找到<code>文件</code>菜单，并切换目录到<code>/www/server/nginx/html</code>。我们在这个目录下新建一个文件夹<code>blog</code>。</p>
<figure><figcaption>img_2.png</figcaption></figure>

<p>点击左上角的上传，上传你网站内容的压缩包，然后解压到blog中，上传完后的目录结构。确保blog下有index.html</p>
<figure><figcaption>img_3.png</figcaption></figure>

<h3>nginx配置</h3>
<p>我们已经上传完博客，当用户访问我们网站的时候我们希望把博客内容从服务器上读取并返回给用户的浏览器。</p>
<p>按照（图7）的指示点开nginx的配置文件，我们在<code>http{}</code>下新增一个sever监听80端口，并且匹配<code>/</code>开头的请求，将<code>/</code><br>
后的路径在root目录下查找，查找成功则返回内容。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>server {
  listen 80;
  server_name qifan;
  index index.html index.htm;
  location / {
    root /www/server/nginx/html/blog;
  }
}
</code></pre></div><figure><figcaption>img_4.png</figcaption></figure>

<p>完整版的配置文件</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>user  www www;
worker_processes auto;
error_log  /www/wwwlogs/nginx_error.log  crit;
pid        /www/server/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;

stream {
    log_format tcp_format '$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time';
  
    access_log /www/wwwlogs/tcp-access.log tcp_format;
    error_log /www/wwwlogs/tcp-error.log;
    include /www/server/panel/vhost/nginx/tcp/*.conf;
}

events
    {
        use epoll;
        worker_connections 51200;
        multi_accept on;
    }

http
    {
        include       mime.types;
		#include luawaf.conf;

		include proxy.conf;

        default_type  application/octet-stream;

        server_names_hash_bucket_size 512;
        client_header_buffer_size 32k;
        large_client_header_buffers 4 32k;
        client_max_body_size 50m;

        sendfile   on;
        tcp_nopush on;

        keepalive_timeout 60;

        tcp_nodelay on;

        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 256k;
		fastcgi_intercept_errors on;

        gzip on;
        gzip_min_length  1k;
        gzip_buffers     4 16k;
        gzip_http_version 1.1;
        gzip_comp_level 2;
        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
        gzip_vary on;
        gzip_proxied   expired no-cache no-store private auth;
        gzip_disable   "MSIE [1-6]\.";

        limit_conn_zone $binary_remote_addr zone=perip:10m;
		limit_conn_zone $server_name zone=perserver:10m;

        server_tokens off;
        access_log off;
# 下面的这个server{}是新增的
server {
  listen 80;
  server_name qifan;
  index index.html index.htm;
  location / {
    root /www/server/nginx/html/blog;
  }
}
server
    {
        listen 888;
        server_name phpmyadmin;
        index index.html index.htm index.php;
        root  /www/server/phpmyadmin;

        #error_page   404   /404.html;
        include enable-php.conf;

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /www/wwwlogs/access.log;
    }
include /www/server/panel/vhost/nginx/*.conf;
}
</code></pre></div><blockquote>
<p>举个例子，假设我的服务器ip地址是，192.168.0.1。我现在访问http:<br>
<a href="//192.168.0.1/images/logo.jpg%EF%BC%88%E9%BB%98%E8%AE%A480%E7%AB%AF%E5%8F%A3%EF%BC%89%E3%80%82%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E5%9C%A8nginx%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BA%86server%EF%BC%8C%E5%AE%83%E5%9C%A880%E7%AB%AF%E5%8F%A3%E4%B8%8B%E7%9B%91%E5%90%AC%E3%80%82%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E9%A6%96%E5%85%88%E6%98%AF%E8%AE%BF%E9%97%AE%E5%88%B0%E4%BA%86nginx%EF%BC%8C%E5%8F%88%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E9%85%8D%E7%BD%AE%E4%BA%86location%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">//192.168.0.1/images/logo.jpg（默认80端口）。因为我们在nginx中配置了server，它在80端口下监听。所以我们首先是访问到了nginx，又因为我们配置了location匹配</a><code>/</code><br>
开头的请求，所以所有的请求会被拦截。拦截后nginx将<code>/</code>后的路径拼接到root<code>/www/server/nginx/html/blog</code><br>
上，去服务的目录里面找是否存在该资源。因此我们实际访问的是<code>/www/server/nginx/html/blog/images/logo.jpg</code>。</p>
</blockquote>
<p>重启nginx，输入服务器的ip地址。如果访问不到请查看是否开放80端口。</p>
<figure><figcaption>img_5.png</figcaption></figure>

<figure><figcaption>img_6.png</figcaption></figure>

]]></content:encoded>
    </item>
    <item>
      <title>ChatGPT二次开发</title>
      <link>https://mister-hope.github.io/blog/project/chatgpt-assistant/</link>
      <guid>https://mister-hope.github.io/blog/project/chatgpt-assistant/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">ChatGPT二次开发</source>
      <description>ChatGPT-Assistant 项目介绍 本次项目是基于ChatGPT的二次开发网站，旨在实现在线聊天的功能。 使用的技术有前端框架Vue3、TypeScript和ElementUI以及后端技术SpringBoot、MongoDB、Spring Data MongoDB和Spring WebSocket。 自我介绍 我是起凡，一名全栈程序员，刚刚毕...</description>
      <category>ChatGPT</category>
      <pubDate>Wed, 17 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>项目介绍</h2>
<p>本次项目是基于ChatGPT的二次开发网站，旨在实现在线聊天的功能。<br>
使用的技术有前端框架Vue3、TypeScript和ElementUI以及后端技术SpringBoot、MongoDB、Spring Data MongoDB和Spring WebSocket。</p>
<h3>自我介绍</h3>
<p><a href="https://space.bilibili.com/357290237" target="_blank" rel="noopener noreferrer">我是起凡</a>，一名全栈程序员，刚刚毕业于华侨大学。主要技术栈后端SpringBoot,JPA(<br>
Hibernate), MongoDB, Mybatis, SQL等。前端Vue3, Typescript, Taro小程序, Uni-App等。</p>
<h3>主要功能</h3>
<ol>
<li>登录注册<br>
用户sa-token管理用户的session。</li>
<li>在线聊天<br>
用户在聊天框输入内容并发送给后端，后端将请求转发到Open AI的Chat GPT接口，返回数据后通过WebSocket推送给用户。</li>
</ol>
<h3>项目运行</h3>
<h4>clone仓库</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/qifan777/chatgpt-assistant.git
</code></pre></div><h4>目录介绍</h4>
<ul>
<li>bom 依赖管理</li>
<li>chatgpt-assistant-client vue客户端
<ul>
<li>src
<ul>
<li>api 存放调用后端的接口</li>
<li>assets 静态资源图片等</li>
<li>components 通用的组件</li>
<li>router 路由</li>
<li>stores pinia状态管理</li>
<li>views 页面
<ul>
<li>home
<ul>
<li>components home页面使用的私有组件</li>
<li>HomeView.vue home页面</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>chatgpt-assistant-server java核心代码</li>
<li>infrastructure 基础设施
<ul>
<li>infrastructure-common 通用的类</li>
<li>infrastructure-generator 代码生成器
<ul>
<li>generator-core 注解定义</li>
<li>generator-processor 生成器逻辑</li>
</ul>
</li>
<li>infrastructure-security 通用登录认证拦截器</li>
</ul>
</li>
</ul>
<h4>环境安装</h4>
<ul>
<li>jdk 17</li>
<li>mongodb<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">--name</span> mongo <span class="token punctuation">\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_USERNAME</span><span class="token operator">=</span>root <span class="token punctuation">\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token punctuation">\</span>
  mongo:6.0.5-jammy
</code></pre></div></li>
<li>node18</li>
</ul>
<h4>运行</h4>
<p><strong>前端</strong></p>
<ol>
<li>vscode/webstorm导入chatgpt-assistant-client</li>
<li>运行命令<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre></div></li>
</ol>
<p><strong>后端</strong></p>
<ol>
<li>idea 导入chatgpt-assistant整个文件夹</li>
<li>mvn install</li>
<li>运行chatgpt-assistant-server下的Application。</li>
</ol>
<h2>第一期</h2>
<h2>第二期</h2>
<p>本期内容实现了登陆了功能。<br>
实现的逻辑分下面几个步骤</p>
<ol>
<li>代码生成器生成controller，service，repository，mapper，dto。</li>
<li>编写login接口接收用户名和密码。</li>
<li>login处理逻辑中调用mongoTemplate查询用户名是否存在不存在则创建一个用户，密码使用BCrypt加密。最后调用sa-token发放token给用户。</li>
<li>后端使用idea请求测试工具测试接口和idea中连接mongodb。</li>
<li>在前端复制生成的type定义和api接口，在登录界面中发起login请求。需要在vite中配置转发前端的请求到后端。登录成功在浏览器中存储token并跳转到首页。</li>
</ol>
<h2>第三期</h2>
<p>本期内容实现了认证拦截Starter，统一异常处理，统一异常返回。<br>
在springboot3中的starter有所变化。现在需要在<br>
classpath:META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>
中声明需要引入的configuration。在每个configuration中可以写一些判断条件来确定是否要被引入spring容器中。</p>
<p>在统一异常拦截中我们拦截到了NotLoginException，并将改异常转成我们系统的统一返回结果+自定义的异常编码通知前端。前端可以根据异常编码知道用户此时的状态。</p>
<h2>第四期</h2>
<p>本期实现内容有</p>
<ol>
<li>页面的统一页头。通过在index页面中添加子路由的形式，使得所有的子路由都获得夫路由的样式即index页面的样式。因此我们首先在index页面中写上页头的样式然后在index路由下配置子路由。</li>
<li>页面切换的过度效果。在vue的官方文档中有介绍<code>&lt;transition/&gt;</code>组件的用法。页面的过度有进入页面时从无到有的过程，以及离开页面时从有到无的过程。两个阶段四个过程。通过css样式来调整过渡的效果</li>
</ol>
<h2>第五期</h2>
<ol>
<li>菜单子路由跳转。鼠标点击左侧的菜单切换激活状态并且右侧内容随之改变。</li>
<li>在首页获取个人信息存储到pinia全局状态管理。然后在个人信息界面从全局状态中加载用户信息。</li>
<li>编辑用户信息时上传头像到后端，后端再上传到阿里云oss返回url结果给前端。</li>
</ol>
<h2>第六期</h2>
<ol>
<li>学习如何使用dto。不同的dto对应不同的场景，有效的将原理集中在一个类上的复杂逻辑分解到各个dto。</li>
<li>自定义实体类在dto直接的映射，不同的场景同一个字段的校验逻辑或者显示内容不同。</li>
<li>前端部分深入理解路由实现路由到页面的props传参。</li>
</ol>
<h2>第七期</h2>
<ol>
<li>聊天会话和聊天消息的实体类设计，一个聊天会话包含多条聊天消息。聊天会话中的创建用户使用<code>@CreatedBy</code> 自动在创建时设置当前用户的信息。</li>
<li>聊天会话通过自定义关联mongoDB查询得到属于该聊天会话下的消息。</li>
<li>使用MapStruct解决实体类之间的循环依赖。</li>
<li>spring websocket的接入，并配置了Stomp协议。开箱即用的消息发送和消息转发功能。并配置了从http升级到websocket的握手，根据http请求头中的cookie或者token获取当前登录的用户信息。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>多模块微服务构建部署实战</title>
      <link>https://mister-hope.github.io/blog/project/microservice-practice/book.html</link>
      <guid>https://mister-hope.github.io/blog/project/microservice-practice/book.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">多模块微服务构建部署实战</source>
      <description>多模块微服务构建部署实战 介绍 本项目的教学目的是通过一个多模块的项目，来讲解如何搭建多模块，开发，部署。初次之外你还可以学到其他重要的后端知识。 提示 知识概览 Maven多模块构建 SpringBoot打包成可执行jar包 Docker Compose部署到Docker 微服务六边形架构（领域驱动DDD） JPA+QueryDsl 增删改查，动态s...</description>
      <category>多模块微服务</category>
      <pubDate>Sat, 05 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>介绍</h2>
<p>本项目的教学目的是通过一个多模块的项目，来讲解如何搭建多模块，开发，部署。初次之外你还可以学到其他重要的后端知识。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>知识概览</p>
</div>
<ol>
<li>Maven多模块构建</li>
<li>SpringBoot打包成可执行jar包</li>
<li>Docker Compose部署到Docker</li>
<li>微服务六边形架构（领域驱动DDD）</li>
<li>JPA+QueryDsl 增删改查，动态sql，多表join</li>
<li>Java Bean Validation 数据校验</li>
<li>MapStruct业务分层间dto转化</li>
</ol>
<h2>1. 多模块与微服务</h2>
<iframe src="//player.bilibili.com/player.html?aid=604812922&amp;bvid=BV1N84y1v7K7&amp;cid=882113458&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="600" style="width:100%"></iframe>
<h3>1.1 多模块项目基本结构</h3>
<figure><figcaption></figcaption></figure>
<p>模块类型：</p>
<ol>
<li>pom类型<br>
负责通依赖管理和子模块管理，根模块和api通信模块属于这个类别</li>
<li>jar类型<br>
可执行的：订单模块，商品模块（云朵状，微服务）<br>
不可执行的：其他的类库</li>
</ol>
<p>在微服务开发中，一个项目中往往有多个模块。有的模块是一个服务（云朵状模块），有的模块是公用的类库，有的模块负责管理依赖和管理子模块。</p>
<h3>1.2 多模块打包</h3>
<p>依赖图打包后，变成这样</p>
<figure><figcaption></figcaption></figure>
<p>单体应用也可以用多模块的形式开发，多模块可以将我们的通用业务逻辑分块，最后打包时合并成一个可执行的jar包</p>
<p>微服务项目采用多模块开发时，每个微服务都可以看成一个单体应用，最后每个微服务合并所有依赖打包成可执行的jar包。<br>
微服务与微服务之间在jar包层面是不能互相引用的。它们之间通过openFeign远程调用（也可以是别的远程调用协议）。</p>
<h2>2. 开始搭建</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>开发环境</p>
</div>
<ol>
<li>maven3.8（需要配置镜像）</li>
<li>jdk11</li>
<li>idea2022.2（不懂激活可以问我）</li>
</ol>
<ul>
<li>microservice-practice
<ul>
<li>microservice-common</li>
<li>microservice-api
<ul>
<li>microservice-product-api</li>
<li>microservice-order-api</li>
</ul>
</li>
<li>microservice-product</li>
<li>microservice-order</li>
</ul>
</li>
</ul>
<h3>2.1 新建项目 microservice-practice</h3>
<ol>
<li>
<p>声明版本号</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>revision</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>revision</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>读取版本</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>指定父亲</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>package改为<code>pom</code></p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>管理子模块（需要子模块创建完再添加）</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>microservice-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>microservice-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>z
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>microservice-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>microservice-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<p>注意：下面的模块名与artifactId同名，并且groupId与项目的groupId一致。</p>
<h3>2.2 新建模块 microservice-common</h3>
<ol>
<li>
<p>指定父亲模块</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<h3>2.3 新建模块 microservice-api</h3>
<ol>
<li>
<p>指定父亲模块</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>package改为pom</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>管理子模块（需要子模块创建完再添加）</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>infrastructure-product-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>infrastructure-order-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<h3>2.4 新建api子模块 microservice-product-api</h3>
<ol>
<li>
<p>指定父亲模块</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<h3>2.5 新建api子模块 microservice-order-api</h3>
<ol>
<li>
<p>指定父亲模块</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
</ol>
<h3>2.6 新建模块 microservice-product</h3>
<ol>
<li>
<p>指定父亲模块</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>添加springboot打包插件</p>
<p>要让这个<code>spring boot</code>模块打包之后是是可以执行，需要添加下面这个插件。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>注意：只有<code>spring boot</code>模块才能使用这个插件。</p>
</li>
</ol>
<h3>2.7 新建模块 microservice-order</h3>
<p><strong>操作和上面一样</strong></p>
<h2>3. 基础模块（microservice-common）</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>通用的枚举接口</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>

    <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>异常枚举值</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCode</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>
    <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">NotFindError</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"未查询到信息"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">SaveError</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"保存信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">UpdateError</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span> <span class="token string">"更新信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ValidateError</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span> <span class="token string">"数据检验失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">StatusHasValid</span><span class="token punctuation">(</span><span class="token number">10005</span><span class="token punctuation">,</span> <span class="token string">"状态已经被启用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">StatusHasInvalid</span><span class="token punctuation">(</span><span class="token number">10006</span><span class="token punctuation">,</span> <span class="token string">"状态已经被禁用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">SystemError</span><span class="token punctuation">(</span><span class="token number">10007</span><span class="token punctuation">,</span> <span class="token string">"系统异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">BusinessError</span><span class="token punctuation">(</span><span class="token number">10008</span><span class="token punctuation">,</span> <span class="token string">"业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ParamSetIllegal</span><span class="token punctuation">(</span><span class="token number">10009</span><span class="token punctuation">,</span> <span class="token string">"参数设置非法"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">TransferStatusError</span><span class="token punctuation">(</span><span class="token number">10010</span><span class="token punctuation">,</span> <span class="token string">"当前状态不正确，请勿重复提交"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">NotGrant</span><span class="token punctuation">(</span><span class="token number">10011</span><span class="token punctuation">,</span> <span class="token string">"没有操作该功能的权限，请联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * code的取值规则，xx代表模块，xxx代表功能异常 例如：基础模块（10）的查询异常（001）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 异常信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">ResultCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultCode</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>resultCode <span class="token operator">-&gt;</span> resultCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>业务异常</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 业务异常，需要返回给用户看的
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>resultCode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>系统异常</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 系统异常，不需要给用户看
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>通一返回结果</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> result<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> resultCode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode<span class="token punctuation">.</span>Success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCode<span class="token punctuation">.</span>Success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> resultCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> resultCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>Success</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>基础Entity</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 基础的entity。
 * 有如下作用
 * 1. 每次插入前调用<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">prePersist</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>来初始化创建时间和更新时间并完成数据校验。
 * 2. 每次更新前调用<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">preUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>来初始化更新时间并完成数据校验
 * 3. id自增
 * 4. version乐观锁，并发控制
 */</span>
<span class="token annotation punctuation">@MappedSuperclass</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAggregateRoot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseEntity</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Validator</span> validator <span class="token operator">=</span> <span class="token class-name">Validation</span><span class="token punctuation">.</span><span class="token function">buildDefaultValidatorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"created_at"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createdAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"updated_at"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updatedAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Version</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"version"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PrePersist</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prePersist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doValidate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setCreatedAt</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setUpdatedAt</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreUpdate</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doValidate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setUpdatedAt</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">Hibernate</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Hibernate</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">BaseEntity</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseEntity</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> that<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doValidate</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> constraintViolations <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token class-name">Default</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>constraintViolations<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">(</span>constraintViolations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>基础Repository</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 基础repository，其他实体类的repository只需继承这个类就拥有增删改查，动态sql的功能。
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@NoRepositoryBean</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">QuerydslPredicateExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>4. 商品模块（microservice-product）</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>知识概览</p>
</div>
<ol>
<li>全局异常拦截</li>
<li>数据校验</li>
<li>api文档</li>
<li>mapstruct</li>
<li>函数式编程</li>
<li>jpa</li>
</ol>
<h3>4.1 JPA+QueryDsl集成</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>pom依赖</p>
</div>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.qifan.microservice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservice-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${revision}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.querydsl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>querydsl-apt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.querydsl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>querydsl-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- queryDsl生成查询类 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysema.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>apt-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>process<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>target/generated-sources/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>processor</span><span class="token punctuation">&gt;</span></span>com.querydsl.apt.jpa.JPAAnnotationProcessor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>processor</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>spring boot启动类</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token comment">//TODO 出现模块依赖异常时，删掉.idea 重新打开项目</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProductApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>package-info</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@QueryEntities</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">BaseEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>qifan<span class="token punctuation">.</span>microservice<span class="token punctuation">.</span>product</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>querydsl<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">QueryEntities</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>qifan<span class="token punctuation">.</span>microservice<span class="token punctuation">.</span>common<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">BaseEntity</span></span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>application.yml 配置端口</p>
</div>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>application-dev.yml 配置数据库</p>
</div>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/microservice
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'123456'</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>
    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>商品entity</p>
</div>
<p>entity是一个服务的核心，所有业务都是围绕entity在转。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">,</span> indexes <span class="token operator">=</span> <span class="token annotation punctuation">@Index</span><span class="token punctuation">(</span>columnList <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * null，""都会报错
     */</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"商品名称不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 价格要用BigDecimal
     * 最大范围+-99999999.99
     */</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"价格不能为空"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"0.01"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"价格"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> scale <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"封面不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cover<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"库存不能为空"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"库存不能为负数"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>商品repository</p>
</div>
<p>基础增删改查</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsRepository</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>打包+编译</p>
</div>
<ol>
<li>右侧maven-&gt; microservice-parent -&gt; lifecycle-&gt; install</li>
<li>maven-&gt; microservice-parent -&gt; lifecycle-&gt; compile</li>
</ol>
<p>注意：需要删掉注释掉 microservice-order的 <code>build</code> 标签</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<p>依次运行下面两个测试方法。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">GoodsRepository</span> goodsRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">setCover</span><span class="token punctuation">(</span><span class="token string">"https://www.jarcheng.top/blog/qifan_logo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"测试商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Goods</span> save <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"插入商品：{}"</span><span class="token punctuation">,</span> save<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        goodsRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token class-name">QGoods</span><span class="token punctuation">.</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"测试商品"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>4.2 MapStruct集成</h3>
<p>在六边形架构中，应用层和外部沟通是通过dto，而和领域层是通过entity。所以在应用层我们需要将dto转成entity，把entity转成dto。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>定义概念</p>
</div>
<ol>
<li>request：传进来的dto</li>
<li>response：返回出去的dto</li>
<li>entity：实体类，和数据库相对应。</li>
<li>mapper：映射类，将request映射成entity或者将entity映射成response</li>
</ol>
<p>mapstruct主要作用就是在mapper这边做映射。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>pom 导入依赖</p>
</div>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>pom导入插件</p>
</div>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven-compiler-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok-mapstruct-binding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsCreateRequest 创建商品请求</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsCreateRequest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"商品名称不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"价格不能为空"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"0.01"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"价格"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"封面不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cover<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"库存不能为空"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"库存不能为负数"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsMapper 映射类</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">GoodsMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Goods</span> <span class="token function">createRequest2Entity</span><span class="token punctuation">(</span><span class="token class-name">GoodsCreateRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>maven编译</p>
</div>
<p>右侧maven-&gt; microservcie-parent -&gt; lifecycle -&gt; compile</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDemoTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">GoodsRepository</span> goodsRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mapperTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建请求dto</span>
        <span class="token class-name">GoodsCreateRequest</span> goodsCreateRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsCreateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsCreateRequest<span class="token punctuation">.</span><span class="token function">setCover</span><span class="token punctuation">(</span><span class="token string">"http://xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsCreateRequest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"笔记本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsCreateRequest<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">TEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsCreateRequest<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"转换前：{}"</span><span class="token punctuation">,</span> goodsCreateRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">createRequest2Entity</span><span class="token punctuation">(</span>goodsCreateRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"转换后：{}"</span><span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Goods</span> save <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"entity插入到数据库：{}"</span><span class="token punctuation">,</span> save<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>4.3 商品增删改查</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsApplication Service（应用层服务）</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsApplicationService</span> <span class="token punctuation">{</span>
    <span class="token comment">// @RequiredArgsConstructor + final 会自动注入。</span>
    <span class="token comment">// 不需要@Autowired</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GoodsRepository</span> goodsRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">GoodsCreateRequest</span> createRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// MapStruct，GoodsCreateRequest转成Goods(dto-&gt; entity)</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">createRequest2Entity</span><span class="token punctuation">(</span>createRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Goods</span> saveResult <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// saveResult 和 goods是同一个对象</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建商品：{}"</span><span class="token punctuation">,</span> saveResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> goods<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">GoodsUpdateRequest</span> updateRequest<span class="token punctuation">,</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个goods肯定不为null，如果为null下面会抛出异常，就不会返回结果。</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsRepository
                <span class="token comment">// 先查找要更新的entity</span>
                <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
                <span class="token comment">// 如果为空则抛出异常</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">/*
         假设我要更新封面和价格，正常是这样写的。
         封面和价格不为空，则更新entity，然后更新数据库。
         if (StringUtils.isNotBlank(updateRequest.getCover())) {
             goods.setCover(updateRequest.getCover());
          }
         if (updateRequest.getPrice()!=null) {
            goods.setPrice(goods.getPrice());
          }
         goodsRepository.save(goods);
         显然上面这种写法很丑
        */</span>

        <span class="token comment">// 使用mapstruct一行搞定，用更新请求去更新entity。</span>
        <span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">updateEntityFromUpdateRequest</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"更新商品：{}"</span><span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">GoodsResponse</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsRepository
                <span class="token comment">// 查找</span>
                <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
                <span class="token comment">// 为空则抛出异常</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将entity转成response</span>
        <span class="token keyword">return</span> <span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">entity2Response</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据多个id查询多个商品</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> goodsList <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将List&lt;Goods&gt; -&gt; List&lt;GoodsResponse&gt;</span>
        <span class="token keyword">return</span> goodsList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token operator">::</span><span class="token function">entity2Response</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsController</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GoodsApplicationService</span> goodsApplicationService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findById/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>goodsApplicationService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">GoodsCreateRequest</span> createRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>goodsApplicationService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">GoodsUpdateRequest</span> updateRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        goodsApplicationService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"findAllById"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>goodsApplicationService<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<p>测试使用idea自带的http client。</p>
<p>在controller中，选择要测试的接口，左侧有一个图标，点击会自动生成一个请求地址。</p>
<p>运行下面的测试请求</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>### 创建商品
POST http://localhost:9000/goods/create
Content-Type: application/json

{
  "name": "华为手机",
  "price": 5800,
  "cover": "http://xxx123",
  "stock": 100
}


### 根据id批量查找商品

POST http://localhost:9000/goods/findAllById
Content-Type: application/json

[49,48,46]


### 更新商品

POST http://localhost:9000/goods/update/49
Content-Type: application/json


{
  "stock": 200
}
</code></pre></div><h3>4.4 动态查询+分页</h3>
<p>前端查询的时候可能不加任何的过滤条件，也可能会添加部分过滤条件。<br>
我们使用queryDsl来实现这个功能。</p>
<p>场景：前端想根据商品名称分页查询，也可能不要商品名称直接分页查询。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>查询请求dto</p>
</div>
<p>这个dto是面向前端的。而后端是面向实体类。到时候需要用到mapstruct映射。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsQueryRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsMapper</p>
</div>
<p>新增下面的方法，做GoodsQueryRequest-&gt;Goods映射。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryRequest2Entity</span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsQueryRequest</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>domain service</p>
</div>
<p>动态查询具有判断逻辑，可能会有拓展性，不适合放在 application service。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">queryRequest</span>（分页条件+需要过滤的条件）
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> queryRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 动态的过滤条件</span>
        <span class="token class-name">BooleanBuilder</span> booleanBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果存在商品名称则添加这个条件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用queryDsl（和mybatis-plus类似）</span>
            booleanBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">QGoods</span>
                    <span class="token punctuation">.</span>goods
                    <span class="token punctuation">.</span>name
                    <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 查询</span>
        <span class="token keyword">return</span> goodsRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>booleanBuilder<span class="token punctuation">,</span> queryRequest<span class="token punctuation">.</span><span class="token function">toPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>application service</p>
</div>
<p>因为domain service是面向实体类，而外部查询请求是dto。使用需要应用层做类型装换。防止domain service被外部污染。</p>
<p>新增如下内容</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsApplicationService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsQueryRequest</span><span class="token punctuation">&gt;</span></span> queryRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将查询请求dto映射为entity</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> queryResult <span class="token operator">=</span> goodsService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">queryRequest2Entity</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 这边首先将，entity映射为response。再将page映射为PageResult（因为page里面包含了很多没必要的信息，需要过滤掉）。</span>
        <span class="token keyword">return</span> <span class="token class-name">PageResult</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>queryResult
                        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">GoodsMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token operator">::</span><span class="token function">entity2Response</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                queryResult<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                queryResult<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                queryResult<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>controller</p>
</div>
<p>新增查询接口</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageResult</span><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsQueryRequest</span><span class="token punctuation">&gt;</span></span> queryRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>goodsApplicationService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>### 携带过滤条件

POST http://localhost:8080/goods/query
Content-Type: application/json

{
  "page": 0,
  "pageSize": 5,
  "query": {
    "name": "笔记本"
  }
}
### 不携带过滤条件

POST http://localhost:8080/goods/query
Content-Type: application/json

{
  "page": 0,
  "pageSize": 5,
  "query": {
  }
}
###
</code></pre></div><h3>4.5 库存的增加和减少</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsStockUpdateRequest</p>
</div>
<p>库存修改dto，先定义修改库存需要哪些参数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsStockUpdateRequest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"商品id不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">Long</span> goodsId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"购买数量不能为空"</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsEntity</p>
</div>
<p>新增库存属性修改的方法。要修改entity的库存只能通过这种形式，因为通过entity提供的方法去修改，可以具有判断逻辑。而通过get set的形式需要额外写if else判断。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stock <span class="token operator">-=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>UpdateError</span><span class="token punctuation">,</span> <span class="token string">"库存不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stock <span class="token operator">+=</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsService</p>
</div>
<p>领域层service是不依赖外界的dto，它只在乎自己的entity和自己的参数。</p>
<p>增加下面的库存修改方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> goodsId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// optional函数式编程</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsRepository
                <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记得每次增加修改删除都要打印日志</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"商品id：{}，减少库存：{}，剩余库存：{}"</span><span class="token punctuation">,</span> goodsId<span class="token punctuation">,</span> count<span class="token punctuation">,</span> goods<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increaseStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> goodsId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsRepository
                <span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        goodsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"商品id：{}，增加库存：{}，剩余库存：{}"</span><span class="token punctuation">,</span> goodsId<span class="token punctuation">,</span> count<span class="token punctuation">,</span> goods<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsApplicationService</p>
</div>
<p>应用层将更新请求转成domain层需要的参数。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increaseStock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    goodsStockUpdateRequests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        goodsService<span class="token punctuation">.</span><span class="token function">increaseStock</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    goodsStockUpdateRequests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        goodsService<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>controller</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * （可以批量增加，也可以批量减少）
     * <span class="token keyword">@param</span> <span class="token parameter">goodsStockUpdateRequests</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"stock/decrease"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        goodsApplicationService<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>goodsStockUpdateRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"stock/increase"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">increaseStock</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        goodsApplicationService<span class="token punctuation">.</span><span class="token function">increaseStock</span><span class="token punctuation">(</span>goodsStockUpdateRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>### 增加10库存
POST http://localhost:8080/goods/stock/increase
Content-Type: application/json

[
  {
    "goodsId": 46,
    "count": 10
  }
]


### 减少20库存（如果库存不足会报错）


POST http://localhost:8080/goods/stock/decrease
Content-Type: application/json

[
  {
    "goodsId": 46,
    "count": 20
  }
]
</code></pre></div><h3>4.6 openFeign服务调用</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>根pom管理依赖</p>
</div>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>api模块pom依赖</p>
</div>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>C:\Windows\System32\drivers\etc\hosts</p>
</div>
<p>在文件末尾添加这两行dns</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1 microservice-product
127.0.0.1 microservice-order
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>GoodsFeignClient</p>
</div>
<p>其他模块引用product-api，然后调用<code>GoodsFeignClient</code>就可以发起http请求，不需要像我们之前测试那样手动填写url，再发起请求。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://microservice-product:9000"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsFeignClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"findAllById"</span><span class="token punctuation">)</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"stock/decrease"</span><span class="token punctuation">)</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"stock/increase"</span><span class="token punctuation">)</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">increaseStock</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单模块扫描FeignClient</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"io.qifan.microservice.api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<ol>
<li>先运行ProductApplication</li>
<li>订单模块先初始化一下（看代码）</li>
<li>在订单模块下编写如下测试</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsClientTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">GoodsFeignClient</span> goodsFeignClient<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     *   发起http请求去访问商品模块
     *   1. SpringCloudOpenFeign在启动时根据@EnableFeignClients(basePackages = "io.qifan.microservice.api")
     *   扫描到@FeignClient，替我们生成代理类。
     *   2. 我们调用 goodsFeignClient.findAllById() 调用代理类
     *   3. 代理类根据 @FeignClient上的url确定服务ip+端口。
     *   3.1 因为http://microservice-product:9000 这个url里面没有ip，所以发起请求时会先从本机的hosts找到有没有
     *   microservice-product对应的ip，找到有127.0.0.1，替换结果变为 http://127.0.0.1:9000
     *   4. 代理类根据@GetMapping（也可以是PostMapping等其他Mapping）确定要调用哪个路径
     *   5. 代理类根据@RequestBody，@RequestParam，@PathVariable等来确定参数格式
     *   6. 最后拼接上面的信息发起一个http请求，就像我们之前测试的时候发起http请求一样。
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allById <span class="token operator">=</span> goodsFeignClient<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">46L</span><span class="token punctuation">,</span> <span class="token number">49L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        allById<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>goodsResponse <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>goodsResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>4.7 全局异常拦截</h3>
<p>业务执行过程中出现的异常，在这边统一拦截下来，然后转成统一的返回结果，返回给前端。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"业务异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">SystemException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleSystemException</span><span class="token punctuation">(</span><span class="token class-name">SystemException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>SystemError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>SystemError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidateException</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"校验异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不合格的字段，可能有多个，只需要返回其中一个提示用户就行</span>
        <span class="token comment">// 比如密码为空</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> constraintViolations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> constraintViolations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidateException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"校验异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不合格的字段，可能有多个，只需要返回其中一个提示用户就行</span>
        <span class="token comment">// 比如密码为空</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldError</span><span class="token punctuation">&gt;</span></span> fieldErrors <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> fieldErrors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>5. 订单模块</h2>
<h3>5.1 订单领域层</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>知识概览</p>
</div>
<ol>
<li>聚合根（<code>Aggregates</code>）</li>
<li>使用<code>Converter</code>在java和数据库之间转换类型。</li>
<li>jpa join查询</li>
<li>使用值对象（<code>Value Object</code>）来明确字段语义和数据校验</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单项</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"base_order_item"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseOrderItem</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"商品id不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> goodsId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"数量不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>

 
    <span class="token comment">// 商品是java对象，在数据库是json类型，插入到数据库时需要转换一下。</span>
    <span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">ProductConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsResponse</span> goods<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单聚合根</p>
</div>
<p>实际的业务中，一个订单包含多个订单项（1对多）。所以<code>OrderItem</code>通过外键关联<code>BaseOrder</code>。同时一个订单还会关联用户，优惠券等信息，本案例没体现。</p>
<p>这种实体类就是聚合根了。它关联了许多相关实体。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"base_order"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseOrder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"订单金额不能为空"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>precision <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> scale <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> totalAmount<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"账户id不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> accountId<span class="token punctuation">;</span>

    <span class="token comment">// 插入订单也会同时插入订单项，查询订单时也会自动join查出订单项。</span>
    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">,</span> cascade <span class="token operator">=</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span>
    <span class="token comment">// 在订单项表生成外键base_order_id，关联本表的主键。</span>
    <span class="token comment">// 订单项实体类不需要base_order_id这个字段，这边会自动生成这个字段。</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"base_order_id"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"购买商品不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseOrderItem</span><span class="token punctuation">&gt;</span></span> itemList<span class="token punctuation">;</span>

    <span class="token comment">// 订单状态是java枚举类型，在数据库是int类型，插入到数据库时需要转换一下。</span>
    <span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">OrderStateConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"订单状态不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderState</span> orderState<span class="token punctuation">;</span>

    <span class="token comment">// 创建时的初始化操作由实体类本身去操作，不需要外部去set</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        totalAmount <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        orderState <span class="token operator">=</span> <span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token constant">UNPAID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单状态值对象</p>
</div>
<p>想象一下如果我们不用值对象来标识订单状态，单单一个<code>Integer</code>类型来标识。<br>
有如下缺点：</p>
<ol>
<li>语义不清晰，除了开发这个功能的人，其他人都难以明白每个值的含有，以及有多少取值。甚至开发者到后面自己都晕了（没错就是我了T_T）</li>
<li>需要额外的校验逻辑，整数的取值很大，需要判断整数取值是否超出了范围。</li>
</ol>
<p>使用值对象虽然没有上面的缺点，但是它也有自己的的缺点<br>
如下：</p>
<ol>
<li>需要编写转换器来在数据库和dto之间转换，工作量提升。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderState</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>
    <span class="token function">UNPAID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"待支付"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PAID</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"已支付"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">CANCELED</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"已取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据code找到枚举对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>resultCode <span class="token operator">-&gt;</span> resultCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>Converter 转换器</p>
</div>
<p>当实体类中存在自定义的java对象时，无法直接保存到数据库。这时需要编写转换器。</p>
<p>Converter与Mapper类似，一个解决的是entity与数据库的字段映射，一个解决的是entity与dto的字段映射。</p>
<p><strong>订单状态转换器</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Converter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 这个映射在 实体类 -&gt; 数据库和实体类 -&gt; Response时都可以用。
     * 订单状态枚举类型-&gt; 整数类型
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span> orderState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderState<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 这个映射在 数据库 -&gt; 实体类和Request -&gt; 实体类时都可以用。
     * 整数类型 -&gt; 订单状态枚举类型
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderState</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token string">"订单状态反序列化异常"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>商品转换器</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Converter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductConverter</span> <span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 数据库里面product这个字段是string类型，而java里面这个字段是GoodsResponse
     * GoodsResponse序列化成json字符串
     *
     * <span class="token keyword">@param</span> <span class="token parameter">attribute</span> 实体类需要转换的字段
     * <span class="token keyword">@return</span> json字符串
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">GoodsResponse</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">JacksonObject</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>SystemError</span><span class="token punctuation">,</span> <span class="token string">"商品详情转json异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 数据库里面product这个字段是string类型，而java里面这个字段是GoodsResponse
     * json字符串反序列化成GoodsResponse
     *
     * <span class="token keyword">@param</span> <span class="token parameter">dbData</span> 数据库里面的json字符串
     * <span class="token keyword">@return</span> GoodsResponse对象
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GoodsResponse</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">JacksonObject</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>dbData<span class="token punctuation">,</span> <span class="token class-name">GoodsResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>SystemError</span><span class="token punctuation">,</span> <span class="token string">"json转商品详情异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>OrderRepository</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseOrderRepository</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseOrder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<p>场景：小明提交了一个订单，订单里面由两个商品。小明也可以查看自己的订单。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">BaseOrderRepository</span> baseOrderRepository<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">GoodsFeignClient</span> goodsFeignClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GoodsResponse</span> goods1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">40L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods1<span class="token punctuation">.</span><span class="token function">setCover</span><span class="token punctuation">(</span><span class="token string">"http://xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"笔记本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods1<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">GoodsResponse</span> goods2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">41L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods2<span class="token punctuation">.</span><span class="token function">setCover</span><span class="token punctuation">(</span><span class="token string">"http://xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"鼠标"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods2<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        goods2<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 购买了一台笔记本</span>
        <span class="token class-name">BaseOrderItem</span> baseOrderItem1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem1<span class="token punctuation">.</span><span class="token function">setGoods</span><span class="token punctuation">(</span>goods1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem1<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem1<span class="token punctuation">.</span><span class="token function">setGoodsId</span><span class="token punctuation">(</span>goods1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 购买了两个鼠标</span>
        <span class="token class-name">BaseOrderItem</span> baseOrderItem2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem2<span class="token punctuation">.</span><span class="token function">setGoods</span><span class="token punctuation">(</span>goods2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem2<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrderItem2<span class="token punctuation">.</span><span class="token function">setGoodsId</span><span class="token punctuation">(</span>goods2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 订单关联两个订单项</span>
        <span class="token class-name">BaseOrder</span> baseOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化操作</span>
        baseOrder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrder<span class="token punctuation">.</span><span class="token function">setAccountId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrder<span class="token punctuation">.</span><span class="token function">setTotalAmount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baseOrder<span class="token punctuation">.</span><span class="token function">setItemList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>baseOrderItem1<span class="token punctuation">,</span> baseOrderItem2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        baseOrderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>baseOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"订单：{}，创建成功"</span><span class="token punctuation">,</span> baseOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">findTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询小明的订单</span>
        baseOrderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">QBaseOrder</span><span class="token punctuation">.</span>baseOrder<span class="token punctuation">.</span>accountId<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>baseOrder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>baseOrder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>5.2 订单创建</h3>
<p>上节的订单创建案例比较简单，没有商品查询和价格核算，也不是http请求。</p>
<p>这节我们通过http发起请求来创建一个订单</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单项mapper</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseOrderItemMapper</span> <span class="token punctuation">{</span>
  <span class="token class-name">BaseOrderItemMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderItemMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">BaseOrderItem</span> <span class="token function">createRequest2Entity</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderItemCreateRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">BaseOrderItemResponse</span> <span class="token function">entity2Response</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderItem</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>基础订单mapper</p>
</div>
<p>可以看见，基础订单mapper使用了订单项mapper。因为<code>BaseOrder</code>实体类的<code>itemList</code>字段类型是<code>List&lt;BaseOrderItem&gt;</code>，而<code>BaseOrderCreateRequest</code>的<code>itemList</code>字段类型是<code> List&lt;BaseOrderItemCreateRequest&gt;</code>。</p>
<p><code>BaseOrderItemCreateRequest</code>-&gt; <code>BaseOrderItem</code>的映射<code>BaseOrderItemMapper</code>里面已经有了，所以直接使用就行。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>
        <span class="token keyword">uses</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">BaseOrderItemMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OrderStateConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseOrderMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">BaseOrderMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BaseOrder</span> <span class="token function">createRequest2Entity</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderCreateRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BaseOrderResponse</span> <span class="token function">entity2Response</span><span class="token punctuation">(</span><span class="token class-name">BaseOrder</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>订单应用层service</p>
</div>
<p>应用层的订单创建主要是流程编排。可以看见下面的create方法不包含任何逻辑，就是按流程来创建订单。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplicationService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BaseOrderService</span> baseOrderService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BaseOrderRepository</span> baseOrderRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderCreateRequest</span> createRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BaseOrder</span> baseOrder <span class="token operator">=</span> <span class="token class-name">BaseOrderMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">createRequest2Entity</span><span class="token punctuation">(</span>createRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 订单初始话操作</span>
        baseOrder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 价格计算，扣减库存</span>
        baseOrderService<span class="token punctuation">.</span><span class="token function">computePrice</span><span class="token punctuation">(</span>baseOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 插入订单到数据库，同时插入订单项到数据库</span>
        baseOrderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>baseOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建订单：{}"</span><span class="token punctuation">,</span> baseOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> baseOrder<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>领域层订单service</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseOrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GoodsFeignClient</span> goodsFeignClient<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computePrice</span><span class="token punctuation">(</span><span class="token class-name">BaseOrder</span> baseOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> goodsIds <span class="token operator">=</span> baseOrder
                <span class="token punctuation">.</span><span class="token function">getItemList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderItem</span><span class="token operator">::</span><span class="token function">getGoodsId</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用商品服务查询信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsResponse</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> goodsFeignClient<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span>goodsIds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算价格</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">GoodsResponse</span> goods <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BaseOrderItem</span> baseOrderItem <span class="token operator">=</span> baseOrder<span class="token punctuation">.</span><span class="token function">getItemList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置商品详情</span>
            baseOrderItem<span class="token punctuation">.</span><span class="token function">setGoods</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 计算价格</span>
            <span class="token comment">// 商品单价*数量</span>
            <span class="token class-name">BigDecimal</span> itemPrice <span class="token operator">=</span> goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>baseOrderItem<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 累加</span>
            baseOrder<span class="token punctuation">.</span><span class="token function">setTotalAmount</span><span class="token punctuation">(</span>baseOrder<span class="token punctuation">.</span><span class="token function">getTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总价格：{}"</span><span class="token punctuation">,</span> baseOrder<span class="token punctuation">.</span><span class="token function">getTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">&gt;</span></span> goodsStockUpdateRequests <span class="token operator">=</span> baseOrder<span class="token punctuation">.</span><span class="token function">getItemList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 得到要扣减的商品id和扣除数量</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">GoodsStockUpdateRequest</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用商品服务扣减库存</span>
        goodsFeignClient<span class="token punctuation">.</span><span class="token function">decreaseStock</span><span class="token punctuation">(</span>goodsStockUpdateRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"计算价格，并扣减库存。商品购买详情：{}"</span><span class="token punctuation">,</span> baseOrder<span class="token punctuation">.</span><span class="token function">getItemList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>controller</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrderApplicationService</span> orderApplicationService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BaseOrderRepository</span> baseOrderRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BaseOrderCreateRequest</span> createRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderApplicationService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageResult</span><span class="token punctuation">&lt;</span><span class="token class-name">BaseOrderResponse</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">QueryRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseOrderQueryRequest</span><span class="token punctuation">&gt;</span></span> queryRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BooleanBuilder</span> booleanBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccountId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            booleanBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">QBaseOrder</span><span class="token punctuation">.</span>baseOrder<span class="token punctuation">.</span>accountId<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccountId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            booleanBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">QBaseOrder</span><span class="token punctuation">.</span>baseOrder<span class="token punctuation">.</span>orderState<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>queryRequest<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseOrder</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> baseOrderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>booleanBuilder<span class="token punctuation">,</span> queryRequest<span class="token punctuation">.</span><span class="token function">toPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">PageResult</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>all
                        <span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">BaseOrderMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token operator">::</span><span class="token function">entity2Response</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                all<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                all<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                all<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>测试</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>### 创建订单
POST http://localhost:9001/order/create
Content-Type: application/json

{
  "accountId": 1,
  "itemList": [
    {
      "goodsId": 48,
      "count": 2
    },
    {
      "goodsId": 49,
      "count": 1
    }
  ]
}

### 查询订单

POST http://localhost:9001/order/query
Content-Type: application/json

{
  "page": 0,
  "pageSize": 5,
  "query": {
    "accountId": 1,
    "orderState": 0
  }
}
</code></pre></div><h2>6. 六边形架构</h2>
<figure><figcaption></figcaption></figure>
<h3>6.1 领域层（<code>domain</code>）</h3>
<p>领域层是真正的逻辑实现层，将一个复杂逻辑打碎层一个个domian。再通过应用层将一个个单一逻辑领域编排组合成一个应用来提供服务。</p>
<ol>
<li>基本的实体类（<code>Entity</code>）和数据库相对应</li>
<li>实体类里面的复杂属性又可以抽象出值对象（<code>Value Object</code>）</li>
<li>聚合根（<code>Aggregates</code>），在实际业务中，有些表往往管理许多子表。那这种实体就是聚合根。我们希望查聚合根时可以直接查出相关对象，插入聚合根时能同时在子表插入数据。聚合根提高我们的逻辑内聚。</li>
<li>领域事件（<code>Domain Event</code>）。当我们创建一个订单时，我们可能还需要做一些后续从操作，这些操作具有拓展性，甚至这些操作不在本服务。这个时候就需要用到领域事件（观察者模式），来做逻辑上的解耦。</li>
<li>领域服务（<code>Domain Service</code>）。领域服务只专注与实体类上的单一逻辑，这个逻辑可能会涉及到几个相关的实体类。像创建一个聚合根时，往往需要同时创建其他的实体。</li>
</ol>
<h3>6.2 应用层（<code>Application</code>）</h3>
<p>应用层又称用例，用例是外部最关系的概念，因为它意味着功能。所以应用层的作用是将多个逻辑组合成一个用例与外部交互。所以总的来说应用层是走一个逻辑的流程，而不去实现逻辑。</p>
<ol>
<li>处理controoler调用，做类型转换，将dto转成entity，让<code>domain service</code>去实现逻辑。</li>
<li>处理复杂逻辑时，组合多个<code>domain service</code>去实现。</li>
<li>不依赖其他<code>application service</code></li>
</ol>
<h3>6.3 基础设施层（<code>Infrastructure</code>）</h3>
<p>圆圈外围的右半部分。</p>
<p>基础设施层一般就是配置，中间件的实现等。</p>
<h3>6.4 端口（<code>Port</code>）</h3>
<p>应用层使用基础层的提供的能力通过<code>port</code>，在我们的代码里面其实就是接口。比如<code>GoodsRepository</code>。如果操作redis，那<code>RedisTemplate</code>就是端口。对于应用层它不需要去实现这些基础层的接口，它只需要使用接口。</p>
<h3>6.5 外部接口（<code>Interface</code>）</h3>
<p>圆圈外围的左半部分。</p>
<p>将应用层的能力暴露给外部的就叫interface（和java的interface不是一个意思），我们熟悉的controller就是interface。除此之外还有rabbitmq监听消息也算这一层。</p>
<p>总之外部调用应用层的都是这一层，不管调用是来自前端页面还是后台管理员还是服务内部调用。</p>
<h3>6.6 <code>Querys</code>和<code>Commands</code></h3>
<p>外部的调用分为查询（query）和增删改（command），查询是可以跳过应用层和领域层，直接调用repository查询。<br>
调用如果是增删改类型则需要走应用层和领域层。</p>
<h2>7. docker 部署</h2>
<h3>7.1 制作镜像</h3>
<figure><figcaption></figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>打包</p>
</div>
<p>右侧maven -&gt; microservice-parent -&gt; install</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>microservice-product/Dockerfile</p>
</div>
<p>编写dockerfile，生成自己的docker镜像。</p>
<div class="language-docker" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像是jdk11</span>
<span class="token instruction"><span class="token keyword">FROM</span> openjdk:11</span>
<span class="token comment"># 作者的信息，可以不填</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> http://www.jarcheng.top/blog</span>
<span class="token comment"># 注意这里，这个地方访问的是build时指定的资源路径。而不是当前文件夹下的文件。</span>
<span class="token comment"># 将资源路径内的的jar包夹复制到镜像内并且重命名为app.jar。</span>
<span class="token instruction"><span class="token keyword">COPY</span> microservice-product-1.0-SNAPSHOT.jar app.jar</span>
<span class="token comment"># 镜像实例化，即启动容器后的运行命令，我们这边就是启动服务</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>生成镜像</p>
</div>
<p>运行下面命令时，<code>docker deamon</code> 依据<code>Dockerfile</code>生成镜像。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker build -f ./Dockerfile -t microservice-product:1.0  ./target
</code></pre></div><ol>
<li>指定资源路径，我们这边用的是<code>'./target'</code>。</li>
<li>指定<code>Dockerfile</code> 路径，dockerfile里面描述了构建镜像的步骤。</li>
<li>指定镜像名字，生成的镜像后如何命名通过<code>-t</code>指定。<code>':'</code>的前是面镜像名称，后面是版本号。</li>
</ol>
<h3>7.2 运行容器</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -p 9000:9000 ^ 
-e spring.profiles.active=prod ^
-d ^
--name product ^
microservice-product:1.0
</code></pre></div><ol>
<li><code>-p</code> 指定本机端口号到容器端口的映射。</li>
<li><code>-e</code> 指定环境变量。修改配置文件的。我们这边修改的是springboot的<code>spring.profiles.active=prod</code>。</li>
<li><code>-d</code> 代表后台运行</li>
<li><code>--name</code> 指定容器名称</li>
<li>最后面<code>microservice-product:1.0</code>代表镜像名称</li>
</ol>
<p>镜像相当于java的类，容器相当于java的对象。一个镜像可以实例化多个容器。</p>
<p>注意：</p>
<ol>
<li><code>-</code>是<code>--</code>的缩写，即<code>-p</code>=<code>--port</code>。</li>
<li>本小节的容器启动会报错，因为springboot找不到mysql。</li>
</ol>
<h3>7.3 Mysql容器</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -p 3308:3306 ^
-d ^
--name mysql8 ^
-e MYSQL_ROOT_PASSWORD=qifan123. ^
-e TZ=Asia/Shanghai  ^
-e MYSQL_DATABASE=microservice ^
-v mysql-data:/var/lib/mysql ^
mysql:8.0.26 ^
mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
</code></pre></div><ol>
<li><code>-p</code>，因为我本地的mysql已经占用了3306，所以mysql容器的3306映射到本机的3308端口。</li>
<li><code>-d</code>，后台启动。</li>
<li><code>--name</code>，指定容器名称</li>
<li><code>-e</code>，<code>MYSQL_ROOT_PASSWORD=qifan123</code>指定root密码，<br>
<code>MYSQL_DATABASE=microservice</code> 指定mysql启动后自动创建microservice数据库，<code>TZ=Asia/Shanghai</code> 指定mysql的时区。</li>
<li><code>-v</code>，持久化数据。<code>mysql-data:/var/lib/mysql</code>，将容器内的<code>/var/lib/mysql</code>的文件映射到docker deamon的<code>mysql-data</code>数据卷内。为mysql的数据都是存在<code>/var/lib/mysql</code>中，即使把mysql容器删了，<code>mysql-data</code>内依然存有数据。这样即使重启容器数据也不会丢失。</li>
<li><code>mysql:8.0.26</code>，容器要使用的镜像。</li>
<li><code>mysqld</code>，容器启动后可以选择额外的命令操作。我们这边是mysql启动后，执行<code>mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code>，将mysql的字符集指定为utf8。</li>
</ol>
<h3>7.4 多容器连接</h3>
<p>容器默认情况下与本机不在同一个网络下，不像我们开发环境那样可以通过localhost互相访问。所以我们可以创建一个虚拟网络，让相关的容器在同一个网络下，他们就可以彼此访问了。</p>
<ol>
<li>创建桥接网络 <code>docker network create microservice</code>。</li>
<li>mysql运行命令添加<code>--network=microservice --network-alias=microservice-mysql</code>，然后运行。让mysql容器加入<code>microservice</code>网络，并且域名是<code>microservice-mysql</code>。这样商品服务容器可以通过<code>microservice-mysql</code>找到mysql容器的ip地址。</li>
<li>商品容器添加运行命令,<code>--network=microservice --network-alias=microservice-product</code>，然后运行。</li>
</ol>
<h3>7.5 总流程</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>创建网络</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker network create microservice
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>运行mysql容器（远程拉取镜像）。</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -p 3308:3306 -d  --name mysql8 ^
-e MYSQL_ROOT_PASSWORD=qifan123. ^
-e TZ=Asia/Shanghai  ^
-e MYSQL_DATABASE=microservice ^
-v mysql-data:/var/lib/mysql ^
--network=microservice ^ --network-alias=microservice-mysql ^
mysql:8.0.26 ^
mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>构建商品服务镜像（在microservice-product下运行）</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker build -f ./Dockerfile -t microservice-product:1.0  ./target
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>构建订单服务镜像（在microservice-order下运行）</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker build -f ./Dockerfile -t microservice-order:1.0  ./target
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>启动商品服务容器</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -p 9000:9000 ^
-e spring.profiles.active=prod ^
-d ^
--network=microservice ^
--network-alias=microservice-product ^
--name product ^
microservice-product:1.0
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>启动订单服务容器</p>
</div>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -p 9001:9001 ^
-e spring.profiles.active=prod ^
-d ^
--network=microservice ^
--network-alias=microservice-order ^
--name order ^
microservice-order:1.0
</code></pre></div><h3>7.6 拓展docker compose一次性部署</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>microservice-practice/docker-compose</p>
</div>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">microservice-mysql</span><span class="token punctuation">:</span>
    <span class="token comment"># 镜像名称</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.26
    <span class="token comment"># 相当于 --name</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>mysql
    <span class="token comment"># 相当于多个 -e</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> qifan123.
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> microservice
    <span class="token comment"># 相当于 -p</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"3308:3306"</span>
    <span class="token comment"># 相当于 -v</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> microservice<span class="token punctuation">-</span>mysql<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token comment"># 容器启动后执行下面这个命令</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'mysqld'</span><span class="token punctuation">,</span> <span class="token string">'--character-set-server=utf8mb4'</span><span class="token punctuation">,</span> <span class="token string">'--collation-server=utf8mb4_unicode_ci'</span> <span class="token punctuation">]</span>
  <span class="token key atrule">microservice-order</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> qifan/microservice<span class="token punctuation">-</span>order<span class="token punctuation">:</span><span class="token number">1.0</span>
    <span class="token comment"># 如果本地找不到镜像就build一下。这个build是当image找不到时才执行。</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span>
      <span class="token comment"># 指定context在tartget目录下</span>
      <span class="token key atrule">context</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>order/target
      <span class="token comment"># 和 -f 不同的是，dockerfile这个属性的值必须相当于context路径</span>
      <span class="token comment"># context在target目录，所以'..'是target的上级目录</span>
      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> ../Dockerfile
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>order
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">spring.profiles.active</span><span class="token punctuation">:</span> prod
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9001:9001"</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> microservice<span class="token punctuation">-</span>mysql
  <span class="token key atrule">microservice-product</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> qifan/microservice<span class="token punctuation">-</span>product<span class="token punctuation">:</span><span class="token number">1.0</span>
    <span class="token comment"># 如果本地找不到镜像就build一下。</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span>
      <span class="token key atrule">context</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>product/target
      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> ../Dockerfile
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>product
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">spring.profiles.active</span><span class="token punctuation">:</span> prod
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> microservice<span class="token punctuation">-</span>mysql
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">microservice-mysql-data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>注意：因为同一个<code>services</code>下的<code>service</code>默认都在同一个网络下，所以不需要再创建桥接网络。每个service的名字就是它们在这个网络内的域名例如<code>microservice-mysql</code>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>在线邮筒</title>
      <link>https://mister-hope.github.io/blog/project/post-letter/</link>
      <guid>https://mister-hope.github.io/blog/project/post-letter/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">在线邮筒</source>
      <description>在线邮筒 项目介绍 springboot后端链接 uni-app小程序链接 vue3后台管理页面 在线寄信 微信支付 富文本编辑（需要有管理员权限） 快递查询 购物车 小商店 推广拉新 提现（需要有权限才能开通） 技术栈 小程序端： vue2 uni-app typescript 后端： sa-token 权限认证框架 mybati-plus spri...</description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>项目介绍</h2>
<p><a href="https://gitee.com/jarcheng/post-letter/tree/master/springboot-letter" target="_blank" rel="noopener noreferrer">springboot后端链接 </a></p>
<p><a href="https://gitee.com/jarcheng/post-letter/tree/master/uniapp-letter" target="_blank" rel="noopener noreferrer">uni-app小程序链接</a></p>
<p><a href="https://gitee.com/jarcheng/post-letter/tree/master/vue3-letter" target="_blank" rel="noopener noreferrer">vue3后台管理页面</a></p>
<figure><figcaption></figcaption></figure>
<ul>
<li>在线寄信</li>
<li>微信支付</li>
<li>富文本编辑（需要有管理员权限）</li>
<li>快递查询</li>
<li>购物车</li>
<li>小商店</li>
<li>推广拉新</li>
<li>提现（需要有权限才能开通）</li>
</ul>
<h3>技术栈</h3>
<p>小程序端：</p>
<ul>
<li><code>vue2</code></li>
<li><code>uni-app</code></li>
<li><code>typescript</code></li>
</ul>
<p>后端：</p>
<ul>
<li><code>sa-token</code> 权限认证框架</li>
<li><code>mybati-plus</code></li>
<li><code>springboot</code></li>
<li><code>mysql</code></li>
<li><code>redis</code></li>
<li><code>rabbitmq</code></li>
</ul>
<p>后台管理页面：</p>
<ul>
<li><code>vue3</code></li>
<li><code>element-ui</code></li>
<li><code>typescript</code></li>
<li><code>vuex</code></li>
<li><code>router</code></li>
</ul>
<h2>页面设计</h2>
<h3>首页</h3>
<p>一共有三种类型的订单</p>
<p>普通信件，明信片，商品。</p>

<h3>寄信页面</h3>
<p>填写信件</p>

<h3>地址簿</h3>
<p>在寄信页面中可以选择地址</p>

<h3>商品页面</h3>
<p>可以单独寄商品也可以在寄信中随寄商品</p>

<h3>购物车页面</h3>
<p>在商品页面中选取好商品，然后结算</p>

<h3>订单详情</h3>
<p>提交订单后进入详情页面。<br>
在支付完成后，商家会在后台发货。如果15分账内未支付会自动取消订单。</p>

<h3>订单列表</h3>
<p>历史订单展示</p>

<h3>用户页面</h3>

<h3>用户详情页面</h3>

<h3>推广码</h3>
<p>每个用户可以生成自己的推广码，用于推广。<br>
新用户扫这个码就可以赚取推广费用</p>

<h3>推广记录</h3>

<h3>钱包</h3>
<ol>
<li>通过邀请新用户赚取的推广费</li>
<li>你邀请的新用户下单后从中得到一部分抽成<br>
</li>
</ol>
<p>有问题可以联系wx：ljc666max<br>
qq：1507906763</p>
]]></content:encoded>
    </item>
    <item>
      <title>起凡商城</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">起凡商城</source>
      <description>起凡商城 前言 电商项目中的各种业务可以说是软件开发中的经典业务。比如多规格商品，优惠券，订单状态机，支付等等。每个一个经典业务都有它的设计思想，首先就是表的设计，表结构如何拆分。如果业务复杂的话还需要考虑到设计模式，比如策略模式，模板模式，状态模式，适配器模式。再深入到细节时就需要具备各种技术知识，比如ORM框架，Web框架（SpringMVC），多...</description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前言</h2>
<p>电商项目中的各种业务可以说是软件开发中的经典业务。比如多规格商品，优惠券，订单状态机，支付等等。每个一个经典业务都有它的设计思想，首先就是表的设计，表结构如何拆分。如果业务复杂的话还需要考虑到设计模式，比如策略模式，模板模式，状态模式，适配器模式。再深入到细节时就需要具备各种技术知识，比如ORM框架，Web框架（SpringMVC），多线程，IO，计算机基础知识，前端开发框架，UI框架等等。</p>
<p>而本项目没有深入到各种技术知识，不过在代码上看到也是会有注释的，主要是在于实现这些业务场景，理解其中业务设计思想。</p>
<h2>技术栈</h2>
<h3>微信小程序端</h3>
<p>在小程序端我选择使用京东的<code>Taro</code>小程序开发框架。其实采用<code>Taro</code>，<code>Uni-App</code>，<code>微信小程序官方语法</code>这三个框架开发并没有多大的差别。它们的配置，目录结构，API，都是遵循统一的规范。主要差别是在于<code>Taro</code>对于<code>Vue3</code>+<code>TypeScript</code>支持较好。</p>
<p>| 技术         | 说明                                                                | 官网                                                     |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>ChatGPT Next Web 搭建教程</title>
      <link>https://mister-hope.github.io/blog/tools/chatgpt/</link>
      <guid>https://mister-hope.github.io/blog/tools/chatgpt/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">ChatGPT Next Web 搭建教程</source>
      <description>ChatGPT Next Web 搭建教程 1.2 介绍 1.2.1 自我介绍 我是起凡，一名全栈程序员，刚刚毕业于华侨大学。主要技术栈后端SpringBoot,Jpa, MongoDb等。前端Vue3, Typescript, Taro小程序。 1.2.2 ChatGPT Next Web 介绍 ChatGPT Next Web可以使用OpenAI官...</description>
      <category>ChatGPT</category>
      <pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1.2 介绍</h2>
<h3>1.2.1 自我介绍</h3>
<p>我是起凡，一名全栈程序员，刚刚毕业于华侨大学。主要技术栈后端SpringBoot,Jpa, MongoDb等。前端Vue3, Typescript, Taro小程序。</p>
<h3>1.2.2 ChatGPT Next Web 介绍</h3>
<p>ChatGPT Next Web可以使用OpenAI官方提供的API。比如ChatGPT3.5模型，ChatGPT4.0模型等等。并且提供了一个WEB界面将我们输入的内容转发给OpenAI。同时支持多聊天窗口会话等。</p>
<div style="text-align: center">

</div>
<h3>1.2.3 被封锁的中国区域</h3>
<p>在中国地区无法调用OpenAI的接口，意味着即使你在本地部署了ChatGPT Next Web你无法与之对话。要解决上面的问题只能通过代理。</p>
<ul>
<li>使用稳定的代理服务软件和节点比如Windows的Clash for windows/v2ayN, linux的v2raya, mac下的Clash for mac等。</li>
<li>配置代理软件让ChatGPT Next Web能够走代理</li>
</ul>
<h2>1.3 先决条件</h2>
<h3>1.3.1 Docker</h3>
<p>ChatGPT Next<br>
Web可以通过源码安装，这种方式对于不熟悉开发的人来说要安装许多的软件和配置很多环境所以不推荐。使用Docker安装只需要一行命令。所以我推荐使用Docker来安装。如果是Windows或者Mac用户下载Docker<br>
Desktop。</p>
<p>请根据不同的操作系统安装docker。下面以Centos7操作系统为例安装docker。</p>
<p>| 家族      | 发行版                                                              |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>IDEA——强大的Shell工具</title>
      <link>https://mister-hope.github.io/blog/tools/idea/shell.html</link>
      <guid>https://mister-hope.github.io/blog/tools/idea/shell.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">IDEA——强大的Shell工具</source>
      <description>IDEA——强大的Shell工具 SSH 在使用Shell工具时最常用的是SSH输入命令操控远程服务器。在idea中使用SSH也是很简单的事情。 settings -&amp;gt; tools -&amp;gt; ssh congratulations alt+f12打开命令行，在右上角的下拉框中选择上面配置好的SSH会话。之后直接在命令行中就可以向服务器发送命令了。 SFTP...</description>
      <category>IDEA技巧</category>
      <pubDate>Sun, 24 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>SSH</h2>
<p>在使用Shell工具时最常用的是SSH输入命令操控远程服务器。在idea中使用SSH也是很简单的事情。</p>
<p>settings -&gt; tools -&gt; ssh congratulations</p>

<p>alt+f12打开命令行，在右上角的下拉框中选择上面配置好的SSH会话。之后直接在命令行中就可以向服务器发送命令了。</p>

<h2>SFTP</h2>
<p>在控制远程服务器时除了发送命令行，自然少不了互传文件，文件预览编辑的功能。幸运的是强大的idea也有这个功能</p>
<p>settings -&gt; deployment。点击左上角的➕添加sftp服务器，可以从之前已经配置的ssh session中选择。</p>

<p>默认情况下idea没有显示远程sftp服务器的菜单，需要手动打开。</p>

<p>在右侧的菜单栏中打开sftp服务器列表，选择已经配置好的sftp服务器，确认后下面就可以显示服务器内的文件了，可以编辑，可以下载，可以拖动本地文件到远程文件夹。</p>

<h2>Database</h2>
<p>作为一名软件开发程序员，经常需要远程查看服务器上的数据库。所以除了shell工具之外还需准备数据库连接工具。</p>

<p>在ssh/ssl页签中选择已经配置好的ssh。之后切换到general页签输入数据库的账号密码，记住不需要修改host。</p>

<p>连接数据库后你使用这</p>
<ul>
<li>
<p>数据库迁移<br>
在服务器上部署新项目的时候需要在服务器上新建数据库，然后把本地的表迁移到服务器上，在idea中就可以实现这个操作。</p>
</li>
<li>
<p>结构对比<br>
如果你在本地的数据库修改了某个字段，然后想同步到服务器上，idea的数据库/表结构对比非常好用。</p>
</li>
<li>
<p>数据导出导入</p>
</li>
</ul>
<h2>部署</h2>
<p>settings -&gt; deployment</p>
<p>将本地编译后的文件映射到服务器的目录。</p>

<p>在本地映射到服务器的文件上右键，上传。</p>

<h2>远程命令</h2>
<p>在部署完之后一般需要执行命令或者脚本，这边我演示将远程服务器的nginx命令映射到idea里面。</p>


<h2>远程执行</h2>
<p>如果大家有做过支付功能可以知道它必须用于公网ip，我们在本地调试不了支付功能（除非内网穿透），只能将应用打包放到服务器上运行。这样做每次修改代码都需要重新打包部署很费时间。这个远程执行的功能就很好用了，可以直接指定你的应用运行机器。</p>
]]></content:encoded>
    </item>
    <item>
      <title>工作必用的Jenkins</title>
      <link>https://mister-hope.github.io/blog/tools/jenkins/</link>
      <guid>https://mister-hope.github.io/blog/tools/jenkins/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">工作必用的Jenkins</source>
      <description>工作必用的Jenkins Jenkins是一个可扩展的自动化服务器，Jenkins 可以作为一个简单的 CI 服务器使用，或者成为任何项目的持续交付中心。 CI/CD 通过上面这张图可以分三部分来理解CI/CD 第一部分 先看看软件开发生命周期（SDLC）和CI/CD是如何结合的。软件开发一般包含几个重要的阶段：开发（Develop），测试（Test）...</description>
      <category>CI/CD</category>
      <pubDate>Tue, 22 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Jenkins是一个可扩展的自动化服务器，Jenkins 可以作为一个简单的 CI 服务器使用，或者成为任何项目的持续交付中心。</p>
<h2>CI/CD</h2>

<p>通过上面这张图可以分三部分来理解CI/CD</p>
<ul>
<li><strong>第一部分</strong></li>
</ul>
<p>先看看软件开发生命周期（SDLC）和CI/CD是如何结合的。软件开发一般包含几个重要的阶段：开发（Develop），测试（Test），部署（Deploy），维护（Maintain）。CI/CD可以将上述的流程流程串联一起来形成一个自动化的闭环，使得每次发布都更快更可靠。</p>
<ul>
<li><strong>第二部分</strong></li>
</ul>
<p>Continuous Integration(CI) 持续集成会不断的监听仓库并且执行构建测试确保最后合并到发布分支是没问题的。这样可以提早的发现问题，而不是累计了多次提交等合并到发布分支的时候才发现问题，这样回滚的时候会比较麻烦。</p>
<p>Continuous Delivery(CD) 持续交付主要是在部署方面的自动化，它也会运行一些测试，每次发布分支有更新CD就会把CI构建好的代码部署到生产上。</p>
<ul>
<li><strong>第三部分</strong></li>
</ul>
<p>总结一下整体的流程可以有如下步骤</p>
<ul>
<li>开发者提交代码到参考</li>
<li>CI 服务器检测到代码更新触发构建</li>
<li>构建好代码并且测试</li>
<li>生成测试结果报告</li>
<li>部署打包的代码到模拟环境</li>
<li>后续可能会有模拟环境的测试</li>
<li>最后发布到生成环境</li>
</ul>
<p>那CI/CD是如何工作的呢？它其实不神秘，你把它看成一个软件（Jenkins），它可以运行在你的电脑上也可以单独运行在服务器上。它首先会监听你的代码仓库，每次有代码提交到仓库上它就会开始运转第一部分的流程图，先是把代码拉取下来在本地编译（Jenkins所在的机器）和测试(<br>
测试环境)。然后用前端的自动化测试模拟用户点击（e2e<br>
test），这步通过后就可以部署到模拟环境（Staging）或者生成环境（Production）。如果出现了问题就会通知开发者，开发者根据报错日志修改bug并且提交代码，接着又重复上述的流程。</p>
<h2>Jenkins安装</h2>
<p>本教程以windows为例安装jenkins，其他系统请参照官方文档。</p>
<ul>
<li>第一步<br>
在<a href="https://www.jenkins.io/doc/book/installing/windows/" target="_blank" rel="noopener noreferrer">官网</a><br>
下载<a href="https://www.jenkins.io/download/#downloading-jenkins" target="_blank" rel="noopener noreferrer">安装包</a></li>
</ul>
<p>打开安装包链接出现图1网页，再点击Windows即可下载。</p>

<ul>
<li>第二步</li>
</ul>
<p>按照提示走到这边。在这边输入你windows的用户名和密码。然后点击验证凭证。</p>

<p>如果出错请按照以下步骤添加权限</p>
<ol>
<li>打开开始，输入<code>本地安全策略</code></li>
<li>展开<code>本地策略</code>并点击右侧的<code>用户权限分配</code></li>
<li>在右侧面板中找到<code>作为服务登录</code>，右键-&gt;属性</li>
<li>点击<code>添加用户或组</code></li>
<li>在输入框内输入你的Windows用户名，然后点击<code>检查名称</code>再点击确定。</li>
</ol>

<ul>
<li>第三步</li>
</ul>
<p>在选择好端口和jdk路径后就安装结束了。安装成功后在任务管理器的服务中可以看见Jenkins服务</p>

<ul>
<li>第四步</li>
</ul>
<p>在浏览器中打开<code>http://localhost:8080</code>，如果你是安装时选择的端口号不是8080那替换成你选择的端口。打开后出现图5页面，根据红色的提示路径获取初始密码（图6）</p>


<ul>
<li>第五步</li>
</ul>
<p>安装推荐的插件，并且创建一个用户。</p>
<h2>博客CI/CD案例</h2>
<p>以前我每次写完博客需要自己编译打包部署。有时候部署完后发现格式或者内容出了一些问题又要重新打包部署，每次重复的干这些事显然是很枯燥无味的。使用Jenkins编写pipeline就可以帮助我完成这些重复的工作。</p>
<h3>安装插件</h3>
<p>除了安装推荐的插件之外还需要安装下面两个插件</p>
<ul>
<li><code>Publish Over SSH</code> 用于发送构建好的文件到服务器</li>
<li><code>NodeJS Plugin</code> 管理不同版本的Node.js</li>
</ul>
<h3>配置</h3>
<ul>
<li><strong>配置服务器信息</strong></li>
</ul>
<p><code>Dashboard-&gt; Manage Jenkins-&gt; System -&gt; Publish over SSH -&gt; 新增SSH Server</code></p>

<ul>
<li><strong>配置Node.js</strong></li>
</ul>
<p><code>Dashboard-&gt; Manage Jenkins-&gt; Tools -&gt; NodeJS -&gt; 新增NodeJS</code></p>

<h3>新建Pipeline项目</h3>
<p><code>Dashboard -&gt; 新建Item -&gt; Pipeline</code></p>

<h3>编写Pipeline</h3>
<p><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; 配置</code></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>pipeline {
    agent any
    // 选择node 16
    tools {
      nodejs 'node 16'
    }
   // 将整个构建部署分成三个阶段，整个分成几个阶段没有一个标准，全部合成一个阶段也可以。
   // 分成多个阶段的好处的优点有 1. 逻辑清晰 2. 对于大项目如果其中某个阶段失败了，下次可以从失败的地方再运行。已经成功的阶段就不需要运行了。可以节省时间。3. 方便统计每个阶段的运行时间，好定位问题。
    stages {
        // 从git参考获取代码
        stage('Git Checkout') {
            steps {
              // 从github获取代码，这边使用的是你本机的git。相当于你自己执行了git clone https://github.com/qifan777/qifan-blog-vuepress2.git
              // git checkout master
              git branch: 'master', url: 'https://github.com/qifan777/qifan-blog-vuepress2.git'
            }
        }
        // 获取代码后在node16上构建博客代码
        stage('Build') {
            steps {
                bat "node -v"
                bat "npm install"
                bat "npm run docs:build"
            }
        }
        // 将构建好的博客上传到服务器上
        stage('SSH Punlisher') {
            steps{
                sshPublisher(publishers: [sshPublisherDesc(configName: 'centos7',
                 transfers: [sshTransfer( execCommand: 'nginx -s reopen',
                 remoteDirectory: '/www/server/nginx/html/blog',
                 removePrefix: 'docs/.vuepress/dist',
                  sourceFiles: 'docs/.vuepress/dist/**')])])
            }
        }
    }
}

</code></pre></div><p>点击保存</p>
<h3>构建Pipeline</h3>
<p><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; Build Now</code></p>

<h2>Pipeline介绍</h2>
<h3>概念介绍</h3>
<p>pipeline流水线以<code>pipeline {}</code>开始，<code>pipeline{}</code>下可以包含<code>Sections</code>,<code>Steps</code>,<code>Directives</code>, 赋值语句。</p>


<p>通过上面的例子相信大家对pipeline有了初步的了解。</p>
<p>我们看图11中pipeline启动的方式可以是监听git仓库，每次git仓库有代码推送就会自动启动pipeline。前面的例子中我们是手动点击<code>Build Now</code><br>
启动Pipeline的。</p>
<p>在观察图中有多个Stage，对照我们之前写的例子其中有<code>Git Checkout</code>,<code>Build</code>和<code>SSH Punlisher</code><br>
三个Stage。Stage的作用就是将整个构建部署流程从逻辑上划分成多个阶段。</p>
<p>每个阶段（Stage）中又可以添加<code>Steps</code>，在<code>Steps</code>下可以添加<code>Directives</code>。我们看一下之前例子中的<code>Build</code>阶段，该阶段下有一个<br>
<code>Steps</code>其中包含了三条<code>Directives</code>。在同一个<code>Steps</code>下的指令是可以共享局部变量，比如你可以在<code>Steps</code>中顶一个变量<code>def count=1</code>，下面的指令都可以使用count变量。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>steps {
    bat "node -v"
    bat "npm install"
    bat "npm run docs:build"
}
</code></pre></div><h3>如何编写Pipeline</h3>
<p>一般分如下几个步骤</p>
<ol>
<li>确定Pipeline运行的<code>agent（机器/环境）</code></li>
</ol>
<p>如果是本机直接填写<code>agent: any</code>，还可以运行在docker，其他服务器，k8s上。可以参考官方文档中的<code>agent</code>参数。</p>
<ol start="2">
<li>配置需要工具</li>
</ol>
<p>如果你安装了git，maven插件，下面你tools你也可以添加。其他的工具也可以在插件市场中找到，安装完插件配置工具的版本，然后在<code>tools{}</code><br>
中选择相应的版本。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> tools {
    nodejs 'node 16'
    git '配置的git版本'
    maven '配置的maven版本'
 }
</code></pre></div><ol start="3">
<li>划分stage</li>
</ol>
<p>参考我写的例子</p>
<ol start="4">
<li>在每个stage中使用指令(Directives)</li>
</ol>
<p>编写指令的时候，如果你不知道如何使用指令可以参考这个指令生成器和片段生成器。<br>
指令生成器生成（Declarative Directive<br>
Generator）的是官方提供的语法，片段生成器可以生成你下载的插件指令。比如之前写的例子中<code>tools</code>,<code>bat</code><br>
就是官方的指令，<code>git</code>,<code>sshPublisher</code>就是我安装的插件提供的指令。</p>
<p><code>Dashboard -&gt; qifan-blog(你的项目)  -&gt; 流水线语法 -&gt; Declarative Directive Generator</code></p>
<p><code>Dashboard -&gt; qifan-blog(你的项目)  -&gt; 流水线语法 -&gt; 片段生成器</code></p>
]]></content:encoded>
    </item>
    <item>
      <title>远程开发工具分享</title>
      <link>https://mister-hope.github.io/blog/tools/remote-develop/</link>
      <guid>https://mister-hope.github.io/blog/tools/remote-develop/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">远程开发工具分享</source>
      <description>远程开发工具分享 想到远程开发工具，大家必然会想到远程操控软件如TeamView，向日葵远程操控，ToDesk等等。在使用远程操控我们可以明显感觉到以下几个缺点 1. 画质低 大部人是使用免费的远程操控软件，平常我们写代码的时候字体本来就不是很大加上画面一糊根本就看不见代码。即使看得见也很难受，我自己是很难接受长时间在这种画质下写代码。 2. 延迟高 ...</description>
      <category>IDEA技巧</category>
      <pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>想到远程开发工具，大家必然会想到远程操控软件如TeamView，向日葵远程操控，ToDesk等等。在使用远程操控我们可以明显感觉到以下几个缺点</p>
<h5>1. 画质低</h5>
<p>大部人是使用免费的远程操控软件，平常我们写代码的时候字体本来就不是很大加上画面一糊根本就看不见代码。即使看得见也很难受，我自己是很难接受长时间在这种画质下写代码。</p>
<h5>2. 延迟高</h5>
<p>我在使用远程操控写代码时候经常因为输入了一段代码但是还没反应过来导致我以为还没输入，然后又重新输入了一遍。更难受的时候，这个时候我删除也会出现同样的情况</p>
<h5>3. 无法访问服务</h5>
<p>我们在远程电脑假设运行了一个后端服务，或者前端项目，因为远程电脑没有拥有公网IP，我们没有办法在本机上访问到远程电脑上运行的服务。</p>
<p>当然远程操控软件也有很明显的有点，那就是你可以拥有你电脑完整的操控权，你可以打开电脑上的各种软件，文档，随时的复制粘贴等。<br>
所以如果我们能在远程操控软件的基础上解决画质低，延迟高，公网访问那岂不是完美了！</p>
<p>ps：其实还有一个文件传输，这个只能通过微信QQ这种通讯工具解决了。</p>
<h2>Idea插件Code With Me</h2>
<p>Jetbrains 下面的旗舰版IDE如 IDEA，Pycharm，Webstorm都自带这个插件。也是可以和IDE一起破解的。</p>
<p>使用介绍：在上诉介绍的IDE（2023版本）中，双击 <code>SHIFT</code> 输入<code>Code With Me</code>（图 1）。随后在右上角的弹出框中选择<code>Start Session</code>（图<br>
2）。然后我们再选择第三个选项<code>Full Access</code>开放所有权限（图 3），最后点击 <code>Start Session</code><br>
。启动后会自动把控制链接复制到粘贴板。然后你就可以在本机电脑的IDEA打开<code>Code With Me</code>然后<code>Join Session</code><br>
在弹出框中输入刚刚远程机上得到是链接就可以远程开发了。</p>



<h2>Jetbrains Gateway</h2>
<p>总所周知，IDEA的内存占用至少那就是3，4个G。如果我们在本机电脑上打开IDEA去控制远程电脑上的IDEA这样本机电脑的IDEA内存占用就有些浪费了，因为我们没有在本机电脑的IDEA上写代码，现在本机电脑的IDEA只是一个远程操控软件。所以针对这种需求场景，JetBrains有一款产品叫<code>JetBrains Gateway</code><br>
它就是专门用来操控远程JetBrains下的IDE，内存占用也会少。</p>
<p>下面们就对比下IDEA和JetBrains的内存占用情况。可以看到Gateway的内存占用1G不到，IDEA内存占用高达4.5G。所以我们如果只是为了远程控制IDEA只需要在本机开Gateway就行了。</p>


<p>使用介绍：我们在Gateway的首页上点击左侧菜单栏<code>Connect with a Link</code>（图6），将我们之前远程机中开启<code>Code With Me</code>得到的链接复制到里面再点击<code>Connect</code>。随后我们需要在远程机同意控制（图7）。</p>


<p>Gateway的右下角可以看见延迟，我目前最高在100以内，大部分都是在30左右非常稳定。</p>

<p>如果你需要开启远程端口访问，来访问远程机上的服务，你可以在远程机的IDEA上双击Shift输入<code>Port Foward</code>。在右侧的面板中添加需要转发的端口，比如我的后端服务端口是8890。开启后你在本机上就可以通过localhost:8890来访访问远程机上的8890了。</p>

]]></content:encoded>
    </item>
    <item>
      <title>VuePress2搭建自己的博客/官方网站</title>
      <link>https://mister-hope.github.io/blog/tools/vue-press2/</link>
      <guid>https://mister-hope.github.io/blog/tools/vue-press2/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">VuePress2搭建自己的博客/官方网站</source>
      <description>VuePress2搭建自己的博客/官方网站 VuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。 ps: 以上介绍摘自官网 平常我写博客只需要用markdown写好，然后运行打包命令，就可以将markdown转成ht...</description>
      <category>网站搭建</category>
      <pubDate>Tue, 15 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption></figcaption></figure>

<p>VuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress<br>
会帮助你生成一个静态网站来展示它们。</p>
<blockquote>
<p>ps: 以上介绍摘自官网</p>
</blockquote>
<p>平常我写博客只需要用markdown写好，然后运行打包命令，就可以将markdown转成html。接着将打包好的文件到nginx服务器上就可以供用户访问了。</p>
<h2>快速上手</h2>
<h3>依赖环境</h3>
<ul>
<li>Node.js v16.19.0+</li>
</ul>
<h3>手动安装</h3>
<ul>
<li><strong>步骤 1</strong>: 创建并进入一个新目录</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> vuepress-starter
<span class="token builtin class-name">cd</span> vuepress-starter
</code></pre></div><ul>
<li><strong>步骤 2</strong>: 初始化项目</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
<span class="token function">pnpm</span> init
</code></pre></div><ul>
<li><strong>步骤 3</strong>: 将 VuePress 安装为本地依赖</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> vuepress@next @vuepress/client@next vue
</code></pre></div><ul>
<li>步骤 4: 在 package.json 中添加一些 scripts</li>
</ul>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"docs:dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev docs"</span><span class="token punctuation">,</span>
    <span class="token property">"docs:build"</span><span class="token operator">:</span> <span class="token string">"vuepress build docs"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ul>
<li>步骤 5: 在 .gitignore 文件中添加下面内容</li>
</ul>
<div class="language-ignorelang" data-ext="ignorelang" data-title="ignorelang"><pre class="language-ignorelang"><code>.DS_Store
node_modules
/dist
.temp
.cache

docs/.vuepress/dist
# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea/
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</code></pre></div><ul>
<li><strong>步骤 6</strong>: 创建你的第一篇文档</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> docs
<span class="token builtin class-name">echo</span> <span class="token string">'# Hello VuePress'</span> <span class="token operator">&gt;</span> docs/README.md
</code></pre></div><ul>
<li><strong>步骤 7</strong>: 在本地启动服务器来开发你的文档网站</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> docs:dev
</code></pre></div><h2>页面</h2>
<h3>页面路由</h3>
<p>vuepress会读取docs目录下所有的markdown文件转成html。然后通过浏览器的输入对应的路径就可以访问了。<br>
比如下面几个例子，左侧是文件在目录中的位置和文件名，右侧是在浏览器中的路由地址。</p>
<p>| 相对路径	                      | 路由路径                        |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>1. 领域模型（Domain Model）</title>
      <link>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">1. 领域模型（Domain Model）</source>
      <description>如何使用Hibernate进行Java到数据库的映射。映射完后程序员只需针对Java的对象进行操作就可以实现增删改查。因此如何用Hibernate建模是一个值得深入学习的内容，它主要影响的就是create table xxx (...)。当然也会影响到增删改查。 1. 领域模型（Domain Model） 领域顾名思义，它指的是我们实际业务中一的一块业...</description>
      <category>JPA</category>
      <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>如何使用Hibernate进行Java到数据库的映射。映射完后程序员只需针对Java的对象进行操作就可以实现增删改查。因此如何用Hibernate建模是一个值得深入学习的内容，它主要影响的就是create<br>
table xxx (...)。当然也会影响到增删改查。</p>
<!-- more -->
<h1>1. 领域模型（Domain Model）</h1>
<p>领域顾名思义，它指的是我们实际业务中一的一块业务也就是一个领域。对这个领域建模可能会有好几个相关联的类，他们都属于同一个领域。所以领域模型是比较范的概念，一般来说一个领域模型里面包含一个及以上的实体类（Entity），每个实体类都对应着数据库的一张表。</p>
<p>领域模型是Hibernate的核心，Hibernate的所有功能都是围绕着领域模型。Hibernate提供了许多的注解方便我们来建立领域模型。</p>
<h2>1.1 Hibernate类型</h2>
<p>Hibernate类型的主要功能是联系Java中的对象和数据库中的记录，并且可以将Java对象与数据库的记录互相转换。</p>
<p>我们刚刚说了Hibernate需要在Entity类和数据库表直接做映射，而最直接的一个问题就是数据库中的类型如何与实体类中属性类型相对应。实体类里面可能存在枚举属性，如何映射到数据库？字符串类型如何映射到VARCHAR,CHAR？BigDecimal如何映射到Decimal?</p>
<p>搞清楚Hibernate一共有多少种类型是我们领域建模的最关键的点。</p>
<p><em><strong>简单的领域建模例子</strong></em></p>
<p>可以看到这个领域内有两张表，那意味着我们有两个实体类。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 联系方式</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> Contact
<span class="token punctuation">(</span>
    id      <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">first</span>   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">last</span>    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    middle  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    notes   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    starred <span class="token keyword">boolean</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    website <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment">-- 地址</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> Address
<span class="token punctuation">(</span>
    id         <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    province   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    city       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    district   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    details    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    contact_id <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>先建立地址实体类，映射到Address表。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Address"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

  <span class="token comment">// @Basic可加可不加。用来标识该字段是基本类型</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> district<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> details<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>再建立联系实体类，在这个类里面关联地址实体类。</p>
<p>同时观察发现 <code>fitst</code>, <code>middle</code>,<code>last</code>都是属于名字这一概念，所以我们可以再创建一个类把这三个字段包装起来，使得语义清晰。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Contact"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contact</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

  <span class="token comment">// 表明该字段为嵌套类型</span>
  <span class="token annotation punctuation">@Embedded</span>
  <span class="token keyword">private</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> notes<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">URL</span> website<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">boolean</span> starred<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@OneToOne</span>
  <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"address_id"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 表明该类为嵌套类型</span>
<span class="token annotation punctuation">@Embeddable</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>

  <span class="token comment">// 这边属性名称和表的字段名称不一样，需要手动指定。</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"middle"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> middleName<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上述的领域模型可以发现以下这些Hibernate类型</p>
<ol>
<li>基本类型：<code>boolean</code>（Java基础类型）</li>
<li>基本类型 ：<code>Integer</code>（Java基础类型包装类）</li>
<li>基本类型：<code>String</code>（Java字符串）</li>
<li>嵌套类型：<code>Name</code>（Java简单对象（POJO）类，没有实际的表与之相关联）</li>
<li>实体类型：<code>Address</code>（Java简单对象（POJO）类，有实际的表与之相关联）</li>
</ol>
<p>上面的这些Hibernate类型又分为两大类 <code>值类型</code>和 <code>实体类型</code></p>
<h3>1.1.1 值类型(Value Type)</h3>
<p>值类型是那些和实体类紧密关联，描述了实体状态的字段。</p>
<p>这些Hibernate类型都属于值类型：</p>
<ul>
<li>
<p>基本类型，详细看 1.2。</p>
</li>
<li>
<p>嵌套类型，Java简单对象（POJO）类，没有实际的表与之相关联。需要依附某个实体类型。</p>
<p>这个类里面又有一些基本类型，如上面的Contact中的Name字段。</p>
</li>
<li>
<p>集合类型，虽然前面没提到，但是偶尔也会用到。</p>
</li>
</ul>
<h3>1.1.2 实体类型（Entity Type）</h3>
<p>实体类型描述了Java简单对象（POJO）类与数据库之间的映射关系。通过 <code>@Entity</code>来标识。</p>
<p>当实体作为属性存在在另一个实体对象时，他们只是存在联系，却各自维护自己的状态。如上面的Contact中的address属性。他们是两个实体，却又存在联系。他们各自维护自己的修改和删除。</p>
<p>实体类和Java简单对象（POJO）类最大的区别那就是实体类是由对应的数据库表，而普通java类型没有。</p>
<h2>1.2 基本类型</h2>
<p>与基本类型搭配使用的注解：</p>
<blockquote>
<p>@Basic，@Column，@Id，@Enumerated，@Convert（自定义映射规则）</p>
</blockquote>
<p>低频次：</p>
<blockquote>
<p>@Type（自定义hibernate类型），@Lob（二进制数据），@Nationalized（国际化字符串），@Formula（计算字段），@ColumnTransformer（自定义列转化）</p>
</blockquote>
<p>下面的表格列出了Java中的哪些类型属于Hibernate的基础类型。</p>
<p>你可以通过 <code>@Basic</code>来指定属性类型为基本类型。也可以不添加该注解，上面的领域建模例子就没添加。</p>
<p>| 类别                          | 类型                                             |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>2. 动态SQL（Criteria）</title>
      <link>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/criteria.html</link>
      <guid>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/criteria.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">2. 动态SQL（Criteria）</source>
      <description>2. 动态SQL（Criteria） GitHub链接 在JPA中写SQL三种方式 JPQL 如果你的SQL语句不是动态的那建议使用JPQL，JPQL和SQL写起来差不多。主要区别是JPQL是面向实体类，SQL是直接面向底层的表。 Criteria Criteria 查询提供了用编程的形式去写JPQL，同时它也是类型安全的。通过它可以编写动态的JPQL...</description>
      <category>JPA</category>
      <pubDate>Wed, 27 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/qifan777/JPA-Hibernate-SpringDataJPA" target="_blank" rel="noopener noreferrer">GitHub链接</a></p>
<p>在JPA中写SQL三种方式</p>
<ul>
<li>JPQL<br>
如果你的SQL语句不是动态的那建议使用JPQL，JPQL和SQL写起来差不多。主要区别是JPQL是面向实体类，SQL是直接面向底层的表。</li>
<li>Criteria<br>
Criteria 查询提供了用编程的形式去写JPQL，同时它也是类型安全的。通过它可以编写动态的JPQL，比如where条件动态拼接，order by 动态字段等操作。相比于传统的字符串SQL拼接，它的优点就是类型安全。Criteria你也可以说是JPQL的编程版本。</li>
<li>NativeSQL<br>
由于JPQL提供的是所有数据库通用的写法，如果你想使用具体数据库的特性，可以写NativeSQL（原生SQL）。</li>
</ul>
<p>JPA中最难的查询方式就是criteria了，所以本章主要对criteria做介绍。</p>

<p>这张图是criteria中涉及的所有接口以及他们之间的关系。是不是看着感觉很难，不用害怕，下面我用几个例子带你看懂这张图。</p>
<h2>简单的JPQL例子</h2>
<p>下面是一段JPQL看着是不是和SQL很相似，但是仔细观察你可以发现这里面的表名是实体类名，字段名是实体类的属性。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> u<span class="token punctuation">.</span>id <span class="token keyword">from</span> <span class="token keyword">User</span> u <span class="token keyword">left</span> <span class="token keyword">join</span> UserWeChat uw <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>uw<span class="token punctuation">.</span>id <span class="token keyword">where</span> uw<span class="token punctuation">.</span>openId<span class="token operator">=</span><span class="token string">'oEheF5USRu6Y3qWjpb3wJPBfuejw'</span> <span class="token operator">and</span> u<span class="token punctuation">.</span>phonePassword<span class="token punctuation">.</span>phoneNumber <span class="token operator">like</span> <span class="token string">'136%'</span>
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>JPQL和NativeSQL操作对象的区别参考下面。<br>
<code>UserPhonePassword</code>是实体类的名字，<code>USER_PHONE_PASSWORD</code>是实体类映射到数据库的表名。<code>phoneNumber</code>是实体类的属性名，映射到数据库中的表字段是<code>phone_number</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"USER_PHONE_PASSWORD"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPhonePassword</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"phone_number"</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></div>
<h3>连接（Join）</h3>
<p>观察这段JPQL，可以看到 u 和 uw 两个别名。u在criteria里面它叫<code>Root</code>，因为它是这段sql里面的起始表。uw在criteria里面它叫<code>Join</code>，这个就很明显了因为它是通过join得到的。</p>
<p>通过图1你可以看见 <code>Root</code>和<code>Join</code>都是<code>From</code>的子类。在写SQL的时候可以知道from之后可以join别的表，join之后也可以再join别的表。因此<code>From</code>的子类就意味着它可以具备join的能力。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>知识点：<code>From</code>的子类可以Join别的表。</p>
</div>
<h3>路径导航（Path Navigation）</h3>
<p>总所周知，JPA中可以配置实体类之间的关系，形成一个图网络。网络中的每个节点就是一个实体类，实体类又有多个属性。当写查询语句的时候需要在这个图网络上进行导航这种操作就叫路径导航。</p>
<p>这段sql中 <a href="http://u.id" target="_blank" rel="noopener noreferrer">u.id</a>，<a href="http://uw.id" target="_blank" rel="noopener noreferrer">uw.id</a>，uw.openId，u.phonePassword.phoneNumber都是属于路径导航操作。u对象是<code>Root(From)</code>类型，uw是<code>Join(From)</code>类型。u.phonePassword是<code>Path</code>类型。</p>
<p>在图一中你可以看见<code>From</code>是<code>Path</code>的子类，而<code>Path</code>拥有路径导航的能力，因此不管是<code>From</code>，<code>Join</code>，<code>Root</code>，<code>Path</code>都有路径导航能力。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>知识点：<code>Path</code>的子类可以路径导航</p>
</div>
<h2>简单的Criteria例子</h2>
<p>JPQL</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> u<span class="token punctuation">.</span>id <span class="token keyword">from</span> <span class="token keyword">User</span> u <span class="token keyword">left</span> <span class="token keyword">join</span> UserWeChat uw <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>uw<span class="token punctuation">.</span>id <span class="token keyword">where</span> uw<span class="token punctuation">.</span>openId<span class="token operator">=</span><span class="token string">'oEheF5USRu6Y3qWjpb3wJPBfuejw'</span> <span class="token operator">and</span> u<span class="token punctuation">.</span>phonePassword<span class="token punctuation">.</span>phoneNumber <span class="token operator">like</span> <span class="token string">'136%'</span>
</code></pre></div><p>下面JPQL对应的Mysql原生SQL</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    u<span class="token punctuation">.</span>id 
<span class="token keyword">from</span>
    <span class="token keyword">user</span> u 
<span class="token keyword">join</span>
    user_wechat uw 
        <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>uw<span class="token punctuation">.</span>id 
<span class="token keyword">join</span>
    user_phone_password p 
        <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>id 
<span class="token keyword">where</span>
    uw<span class="token punctuation">.</span>open_id<span class="token operator">=</span>? 
    <span class="token operator">and</span> p<span class="token punctuation">.</span>phone_number <span class="token operator">like</span> ?
</code></pre></div><p>下面是用criteria的形式实现上面的JPQL。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">criteriaDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个返回类型是String的criteria查询语句</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询语句的root是User。from User u。</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> u <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Root对象可以join。由于配置关系时已经确定了外键，这步不需要写on条件。</span>
    <span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">UserWeChat</span><span class="token punctuation">&gt;</span></span> uw <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">User_</span><span class="token punctuation">.</span>weChat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// criteriaBuilder用于构造相等查询条件，条件作用的路径 uw.get(UserWeChat_.openId)。</span>
    query<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>uw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">UserWeChat_</span><span class="token punctuation">.</span>openId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"oEheF5USRu6Y3qWjpb3wJPBfuejw"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 构造like查询条件，条件作用的路径是u.get(User_.phonePassword).get(UserPhonePassword_.phoneNumber)</span>
        criteriaBuilder<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">User_</span><span class="token punctuation">.</span>phonePassword<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">UserPhonePassword_</span><span class="token punctuation">.</span>phoneNumber<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"136%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">User_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>id<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户id:{}"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre></div><p><code>Root&lt;User&gt; u = query.from(User.class);</code> 根据之前的介绍可以知道这步的<code>u</code>对象是Root类型。</p>
<p><code>Join&lt;User, UserWeChat&gt; uw = u.join(User_.weChat);</code>由于Root类型是From类型的子类，因此这步可以join。join得到的uw对象是Join类型</p>
<p><code>uw.get(UserWeChat_.openId)</code>就是之前讲的路径导航等于 uw.openId，<code>criteriaBuilder.equal(路径, 对比的值)</code> 转换成 JPQL就是uw.openId='oEheF5USRu6Y3qWjpb3wJPBfuejw'</p>
<p><code>u.get(User_.phonePassword).get(UserPhonePassword_.phoneNumber)</code> 转成JPQL就是u.phonePassword.phoneNumber，由于u.phonePassword是<code>Path</code>类型它可以继续路径导航，向下得到phoneNumber。</p>
<p>最后再select需要的数据<code>query.select(u.get(User_.id))</code>转成JPQL是<code>select u.id</code></p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>上面例子中的User_, UserPhonePassword_, UserWeChat_都是自动生成的类。UserWeChat_.openId就是相当于字符串"openId"。主要作用就是防止你直接在代码里面写死字符串，到时候实体类的属性变化时不能及时发现bug。</p>
</div>
<h2>Select</h2>
<h3>SelectExpression</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造 case when</span>
    <span class="token class-name">Expression</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> selectCase <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">selectCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// when u.avatar is null then 'avatar is null'</span>
        <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"avatar is null"</span><span class="token punctuation">)</span>
        <span class="token comment">// else u.avatar</span>
        <span class="token punctuation">.</span><span class="token function">otherwise</span><span class="token punctuation">(</span>userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">// select  upper(case when u.avatar is null then 'avatar is null' else u.avatar  end)</span>
    query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">upper</span><span class="token punctuation">(</span>selectCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resultList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>log<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  upper<span class="token punctuation">(</span><span class="token keyword">case</span>
      <span class="token keyword">when</span> u<span class="token punctuation">.</span>avatar <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token string">'avatar is null'</span>
      <span class="token keyword">else</span> u<span class="token punctuation">.</span>avatar
  <span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token keyword">from</span>
  <span class="token keyword">user</span> u
</code></pre></div><p>这个例子的主要核心是在<code>query.select</code>，写这个看起有点复杂的例子是想表达select内可以传很多类型。</p>
<p>可以看见select方法的参数必须实现Selection。根据图1可以知Selection的主要实现接口是Expression。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Selection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>SelectMultiExpression</h3>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在使用criteria时，字段名称指的是实体类上的属性名称，而不是数据库中的字段名称。<br>
比如UserPhonePassword中的phoneNumber在数据库中是phone_number，criteria中使用该字段的方法是root.get("phoneNumber")并不是root.get("phone_number")</p>
</div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectMultiExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询的返回结果是Tuple，类似jdbc中的resultSet。Tuple比较灵活，当你不想定义返回结果时可以用Tuple。</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// userRoot.get("phonePassword").get("phoneNumber") 会自动join phonePassword。</span>
    <span class="token comment">// 同时需要注意数据库中phoneNumber是phone_number，所以这边记得是填写实体类中的属性名称而不是数据库中的名称。</span>
    query<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phonePassword"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phoneNumber"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// res.get(0)对应multiselect的第一个参数，res.get(1)对应</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户昵称：{}, 手机号：{}"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h3>SelectDto1</h3>
<p>根据图一可以知道<code>query.select</code>还可以传入<code>CompoundSelection</code>（Selection的实现类）的对象。下面介绍将select的字段包装成dto。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回的结果是dto</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserSimpleResponse</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">UserSimpleResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将select的多个字段组合成一个CompoundSelection</span>
    <span class="token comment">// UserSimpleResponse的构造方法会接收nickname和phoneNumber两个参数</span>
    <span class="token class-name">CompoundSelection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserSimpleResponse</span><span class="token punctuation">&gt;</span></span> construct <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>
        <span class="token class-name">UserSimpleResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token comment">// 对应构造方法的第一个参数</span>
        userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 对应构造方法的第二个参数</span>
        userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phonePassword"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phoneNumber"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>construct<span class="token punctuation">)</span><span class="token punctuation">;</span>
    entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSimpleResponse</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">UserSimpleResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> nickname<span class="token punctuation">,</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>phoneNumber <span class="token operator">=</span> phoneNumber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    u<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>
    u<span class="token punctuation">.</span>phone_number 
<span class="token keyword">from</span>
    <span class="token keyword">user</span> u 
<span class="token keyword">join</span>
    user_phone_password p 
        <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>id
</code></pre></div><h3>SelectDto2</h3>
<p>这个例子演示了在select中可以传入Join对象通过此来实现<code>select p.*</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectDto2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPhonePasswordResponse</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
        <span class="token class-name">UserPhonePasswordResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> phonePasswordJoin <span class="token operator">=</span> userRoot<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"phonePassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompoundSelection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPhonePasswordResponse</span><span class="token punctuation">&gt;</span></span> construct <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>
        <span class="token class-name">UserPhonePasswordResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token comment">// 这个参数对应构造方法的第一个参数</span>
        userRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 这个参数对应构造方法的第二个参数</span>
        phonePasswordJoin
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>construct<span class="token punctuation">)</span><span class="token punctuation">;</span>
    entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    u1_0<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>
    p<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
<span class="token keyword">from</span>
    <span class="token keyword">user</span> u 
<span class="token keyword">join</span>
    user_phone_password p 
        <span class="token keyword">on</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>id
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPhonePasswordResponse</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">UserPhonePasswordResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> nickname<span class="token punctuation">,</span> <span class="token class-name">UserPhonePassword</span> phonePassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>phoneNumber <span class="token operator">=</span> phonePassword<span class="token punctuation">.</span><span class="token function">getPhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> phonePassword<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3>SelectRoot</h3>
<p><code>root</code>是根的意思，平常写的sql中肯定会有一个起始表，然后再join到其他的表或者子查询（里面也可以含有root）。一个sql中可以有多个起始表，这边只演示了一个。</p>
<p><code>query.from(User.class)</code>得到userRoot，在图1中得知Root也是Expression的实现接口，因此userRoot对象也可以传入select中。执行的效果就是<code>u.*</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用于构造查询语句和查询条件</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// User.class代表查询的返回结果是User类型</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// from user </span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// select u.* from user u</span>
    query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>userRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resultList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> u
</code></pre></div><h3>SelectMultiRoot</h3>
<p>上面说了一个SQL中可以包含多个Root，下面演示select多个root。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryMultiRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// from user</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// from user, role</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roleRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// select u.*, r.*</span>
    query<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>userRoot<span class="token punctuation">,</span> roleRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resultList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// res.get(0) -&gt; user, res.get(1)-&gt; role 和 multiselect参数对应</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户信息：{}，角色信息：{}"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> u<span class="token punctuation">,</span> role r
</code></pre></div><h2>条件表达式（Conditional Expressions）</h2>
<h3>比较运算</h3>
<p><code>query.where(条件1,条件2...条件n)</code>对应的sql是where 条件1 and 条件2 .... and 条件n</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> criteriaBuilder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Menu</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> menuRoot <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Menu</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 可以忽略不写select,默认就是select menuRoot</span>
    <span class="token comment">// query.select(menuRoot);</span>

    <span class="token comment">// where里面可以传多个条件 多个条件是and逻辑连接.</span>
    query<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>menuRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Menu_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        criteriaBuilder<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>menuRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Menu_</span><span class="token punctuation">.</span>orderNum<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>menu <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"菜单: {}"</span><span class="token punctuation">,</span> menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面的条件不参与where拼接</span>
    <span class="token comment">// = 运算符</span>
    criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>menuRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Menu_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// != 运算符</span>
    criteriaBuilder<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>menuRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Menu_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// </span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>3. 抓取数据（Fetch）</title>
      <link>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/fetch.html</link>
      <guid>https://mister-hope.github.io/blog/knowledge/jpa/hibernate/fetch.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">3. 抓取数据（Fetch）</source>
      <description>Hibernate中的数据懒加载和提前加载，根据需要可以动态的加载需要的数据。可以说是SQL中select ... 3. 抓取数据（Fetch） 在查询的时候返回太多的数据对于 JDBC 传输数据和 ResultSet 处理过程都是不必要的开销，抓取太少的数据会导致执行额外的查询语句也降低了执行效率。所以说调节数据抓取的深度和广度对应用的性能影响是是很...</description>
      <category>JPA</category>
      <pubDate>Sat, 01 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Hibernate中的数据懒加载和提前加载，根据需要可以动态的加载需要的数据。可以说是SQL中select ...</p>
<!-- more -->
<h1>3. 抓取数据（Fetch）</h1>
<p>在查询的时候返回太多的数据对于 JDBC 传输数据和 ResultSet 处理过程都是不必要的开销，抓取太少的数据会导致执行额外的查询语句也降低了执行效率。所以说调节数据抓取的深度和广度对应用的性能影响是是很大的。</p>
<h2>3.1 基础概念</h2>
<p>抓取数据本身的概念可以将抓取数据产生的问题分成两种问题。</p>
<ul>
<li>
<p>数据什么时候会被抓取？提前（<code>EAGER</code>）还是稍后（<code>LAZY</code>）</p>
</li>
<li>
<p>数据应该被怎么抓取</p>
</li>
</ul>
<blockquote>
<p>提前（eager）：在查询的同时返回所需要的数据</p>
<p>稍后（lazy）：在需要用到该数据时，再自动调用查询去获取数据。</p>
<p>如果百分白确定数据是一定是会被使用的，使用eager策略。如果是可能会使用则lazy。</p>
</blockquote>
<p>下面有几个范围（scope）用来定义抓取数据的行为</p>
<p><em><strong>静态（static）</strong></em></p>
<p>静态定义的抓取策略是在数据映射过程执行的，静态策略是在没有动态策略情况下的备用策略。</p>
<p>​    <strong>SELECT</strong></p>
<p>​ 执行额外的SQL去抓取数据，这种行为可以是 <code>EAGER</code>（立即发送一条SQL去抓取数据），也可以是<code>LAZY</code>（在数据被访问的时候再发送一条SQL去抓取数据）. 这种策略通常称为 <code>N+1</code>。</p>
<p>​    <strong>JOIN</strong></p>
<p>​ 这种策略是只能是<code>EAGER</code>。数据会在通过 OUT JOIN 抓取，所以这种方式只需要执行一条sql语句效率较高。</p>
<p>​    <strong>BATCH</strong></p>
<p>​ 执行额外的SQL去加载一些相关的数据通过 IN （:ids）来限制。和<code>SELECT</code>一样也分为 <code>EAGER</code>和<code>LAZY</code></p>
<p>​    <strong>SUBSELECT</strong></p>
<p>​ 执行额外的SQL加载关联的数据。和<code>SELECT</code>一样也分为 <code>EAGER</code>和<code>LAZY</code></p>
<p><em><strong>动态（dynamic）</strong></em></p>
<blockquote>
<p>动态加载：在运行时选择需要加载的数据</p>
</blockquote>
<p>​</p>
<p>​    <strong>fetch profiles</strong></p>
<p>​ 在实体类的映射上面定义，但是可以在执行查询的时候选择启用或者禁用。</p>
<p>​    <strong>JPQL / Criteria</strong></p>
<p>​ JPQL 是JPA规范的查询语句 和 JPA Criteria （JPQL的Java版本）都可以在查询的时候指定要抓取的数据。</p>
<p>​    <strong>entity graph</strong></p>
<p>​ 使用 JPA EntityGraphs</p>
<h2>3.2 直接抓取和实体查询</h2>
<p>要了解直接抓取数据和实体查询在提前地抓（<code>eagerly</code>）取关联数据上的区别，可以看下面这个例子。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Department"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Employee"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@NaturalId</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>Employee</code>拥有和<code>Department</code>的<code>@ManyToOne</code>关联并且是提前抓取该关联。</p>
<p><em>直接抓取例子</em></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 生成的sql</span>
<span class="token keyword">select</span>
    e<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_0_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>department_id <span class="token keyword">as</span> departme3_1_0_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>username <span class="token keyword">as</span> username2_1_0_<span class="token punctuation">,</span>
    d<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_0_1_
<span class="token keyword">from</span>
    Employee e
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span>
    Department d
        <span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>id
<span class="token keyword">where</span>
    e<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre></div><p>可以看见，直接抓取通过 out join 加载了关联的数据。原因是因为<code>Employee</code>配置了<code>    @ManyToOne(fetch = FetchType.EAGER)</code>，意味着需要在查找<code>Employee</code>的同时也把<code>Department</code>加载出来。</p>
<p><em>实体查询例子</em></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
		<span class="token string">"select e "</span> <span class="token operator">+</span>
		<span class="token string">"from Employee e "</span> <span class="token operator">+</span>
		<span class="token string">"where e.id = :id"</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 生成的sql</span>
<span class="token keyword">select</span>
    e<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>department_id <span class="token keyword">as</span> departme3_1_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>username <span class="token keyword">as</span> username2_1_
<span class="token keyword">from</span>
    Employee e
<span class="token keyword">where</span>
    e<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">select</span>
    d<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_0_0_
<span class="token keyword">from</span>
    Department d
<span class="token keyword">where</span>
    d<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre></div><p>可以看见一共生成了两条sql，原因是在查询的时候没有加载<code>Department</code>，而在<code>Employee</code>中又配置了它需要<code>Department</code>。所以Hibernate通过再生成一条sql查询来保证<code>@ManyToOne(fetch = FetchType.EAGER)</code>，同时又不影响第一条的sql语句。</p>
<blockquote>
<p>上面的例子提醒了我们，如果我们在关联上配置了 <code>fetch = FetchType.EAGER</code> 那么我们在写实体查询的时候就要使用<code>join fetch</code>去将配置了上诉注解的关联加载出来。要不然就会出现<code>N+1</code>的性能问题，生成了额外的查询语句。</p>
</blockquote>
<h2>3.3 不抓取数据</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Department"</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"department"</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Employee"</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@NaturalId</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pswd"</span><span class="token punctuation">)</span>
		<span class="token annotation punctuation">@ColumnTransformer</span><span class="token punctuation">(</span>
			read <span class="token operator">=</span> <span class="token string">"decrypt('AES', '00', pswd )"</span><span class="token punctuation">,</span>
			write <span class="token operator">=</span> <span class="token string">"encrypt('AES', '00', ?)"</span>
		<span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

		<span class="token keyword">private</span> <span class="token keyword">int</span> accessLevel<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"employees"</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">&gt;</span></span> projects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Project"</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToMany</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>对于登录这个场景，我们只需要<code>Employee</code>的 username 和 password，并不需要<code>Project</code>也不需要<code>Department</code>的信息。</p>
<p>针对这种情况，我们可以在关联的上配置<code>fetch = FetchType.LAZY</code>，但是我们发现为什么<code>@ManyToMany</code>没有配置<code>fetch = FetchType.LAZY</code>。那是因为 JPA规定了<code>@OneToOne</code> 和<code>@ManyToOne</code>默认是<code>fetch = FetchType.EAGER</code>，而其他的关联默认是<code>LAZY</code>。也可以说，如果关联的是一个集合（Collection），那么这个关系就是懒加载。<code>@OneToMany</code>和<code>@ManyToOne</code>都是作用在关联实体集合上所以说它们是懒加载。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
	<span class="token string">"select e "</span> <span class="token operator">+</span>
	<span class="token string">"from Employee e "</span> <span class="token operator">+</span>
	<span class="token string">"where "</span> <span class="token operator">+</span>
	<span class="token string">"	e.username = :username and "</span> <span class="token operator">+</span>
	<span class="token string">"	e.password = :password"</span><span class="token punctuation">,</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在上面的实体查询就不会触发额外的sql语句，只会从<code>Employee</code>中获取数据。</p>
<h2>3.4 动态抓取</h2>
<p>第二种场景，页面上需要显示<code>Employee</code>的<code>Projects</code>，但是不需要显示<code>Department</code>。所以我们需要加载<code>Employee</code>和它关联的<code>Projects</code></p>
<h3>3.4.1 通过查询动态抓取</h3>
<p><em><strong>通过 JPQL 动态抓取</strong></em></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// left join fetch 取得关联的数据</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
	<span class="token string">"select e "</span> <span class="token operator">+</span>
	<span class="token string">"from Employee e "</span> <span class="token operator">+</span>
	<span class="token string">"left join fetch e.projects "</span> <span class="token operator">+</span>
	<span class="token string">"where "</span> <span class="token operator">+</span>
	<span class="token string">"	e.username = :username and "</span> <span class="token operator">+</span>
	<span class="token string">"	e.password = :password"</span><span class="token punctuation">,</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><em><strong>通过 JPA Criteria动态抓取</strong></em></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// fetch 取得 projects数据</span>
root<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"projects"</span><span class="token punctuation">,</span> <span class="token class-name">JoinType</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>
	builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
		builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">,</span>
		builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>上面两个案例表单意思是一样的，写法不同。都是 JPA 规定的查询语法分表叫<code>JPQL</code> 和<code>Criteria Api </code>。通过<code>fetch</code>可以取得所需的数据，在查询的同时会生成 out join 去加载相关联的数据。通过上面这种方法动态加载，只需要一条sql语句就可以获取所需的数据。</p>
<h3>3.4.2 通过EntityGraph动态抓取</h3>
<p>JPA还支持通过一种叫<code>EntityGraphs</code>的特性来动态加载数据。通过这种方式可以更加精细化的来控制加载数据。它有两种模式可以选择</p>
<p>​    <strong>fetch mode</strong></p>
<p>​ 在<code>EntityGraph</code>中指定的所有关系都需要提前加载，没有指定的其他关系在都认为是懒加载。</p>
<p>​    <strong>load graph</strong></p>
<p>​ 在<code>EntityGraph</code>中指定的所有关系都需要提前加载，没有指定的其他关系按照静态（参考3.1）策略。</p>
<p>下面定义一个基础的<code>EntityGraph</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Employee"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@NamedEntityGraph</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"employee.projects"</span><span class="token punctuation">,</span>
	attributeNodes <span class="token operator">=</span> <span class="token annotation punctuation">@NamedAttributeNode</span><span class="token punctuation">(</span><span class="token string">"projects"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 查询的时候使用EntityGraph</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
	userId<span class="token punctuation">,</span>
	<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>
		<span class="token string">"jakarta.persistence.fetchgraph"</span><span class="token punctuation">,</span>
		entityManager<span class="token punctuation">.</span><span class="token function">getEntityGraph</span><span class="token punctuation">(</span><span class="token string">"employee.projects"</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote>
<p>如果你想对关联的实体类嵌套定义<code>EntityGraph</code>可以使用<code>@NamedSubgraph</code>。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Spring AOP</title>
      <link>https://mister-hope.github.io/blog/knowledge/spring/aop/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/spring/aop/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Spring AOP</source>
      <description>1. aop 面向切面编程（aop），是对传统面向对象编程（oop）的一种补充。 oop的最小单位是类（class），aop的最小单位是切面（aspect）。切面可以在不改变原来代码的情况下，对某些类进行功能加强。比如：spring事务管理，仅仅只要在需要事务的方法上加上@Transactional就可以得到加强。 1.1 aop概念 Aspect：在...</description>
      <category>Spring</category>
      <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>面向切面编程（aop），是对传统面向对象编程（oop）的一种补充。<br>
oop的最小单位是类（class），aop的最小单位是切面（aspect）。切面可以在不改变原来代码的情况下，对某些类进行功能加强。比如：spring事务管理，仅仅只要在需要事务的方法上加上@Transactional就可以得到加强。</p>
<h2>1.1 aop概念</h2>
<ul>
<li><code>Aspect</code>：在spring里面，一个切面相当于一个类带上<code>@Aspect</code>注解。在这个切面里面写你想增强哪些类，以及增强的内容。</li>
<li><code>Join point</code>：连接点就是代表具体要增强的方法，比如方法A加上了@Transactional，那么方法A在事务切面眼中就是一个连接点。</li>
<li><code>Advice</code>: advice代表的是增强，在上面那个例子中，方法A需要事务增强，那么这个<code>事务</code><br>
就是advice了。通过在连接点执行前后将增强分为前置（before），后置（after），环绕（around）增强。所以说可以把增强（advice）理解为拦截器（interceptor）。</li>
<li><code>Pointcut</code>：切入点就像正则表达式，它匹配了一组连接点。advice就是作用在Pointcut匹配的一组Join point上。</li>
<li><code>Target object</code>：目标对象是指被一个或者多个切面增强的对象，又称<code>增强对象</code>。这些对象是通过动态代理实现的，所以说本质上是代理对象。</li>
<li><code>AOP proxy</code>：spring为了实现aop，使用了jdk动态代理和cglib代理来创建增强对象。</li>
</ul>
<h2>1.2 编写切面</h2>
<p>现在编写一个打印请求参数例子来理解aop的一些概念</p>
<p>依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>1.2.1 声明切面（Aspect）</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><h3>1.2.2 声明切入点（Pointcut）</h3>
<h4>创建LogApi注解</h4>
<p>在需要增强的方法（Join point）上添加这个注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LogApi</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>定义Pointcut表达式</h4>
<p>这个表达式匹配了带有LogApi注解的方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(logApi)"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">needLog</span><span class="token punctuation">(</span><span class="token class-name">LogApi</span> logApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><h3>1.2.3 声明增强（Advice）</h3>
<p>日志信息类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverIp<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverHost<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> env<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> remoteIp<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userAgent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> requestUri<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodClass<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> params<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><p>这边以around advice为例子</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonProcessingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

    <span class="token comment">// 匹配带有 @LogApi注解的join point</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(logApi)"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">needLog</span><span class="token punctuation">(</span><span class="token class-name">LogApi</span> logApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在needLog（pointcut）匹配的join point执行前后做以下操作</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"needLog(logApi)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">LogApi</span> logApi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 上面是 join point 执行前</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面是 join point 执行后</span>
        
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
        <span class="token class-name">LogInfo</span> logInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录类名</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setMethodClass</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录方法名</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setMethodName</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录ip</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setRemoteIp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录用户设备</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setUserAgent</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录请求路径</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录请求方法</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 记录请求参数</span>
            logInfo<span class="token punctuation">.</span><span class="token function">setParams</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"请求参数记录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h2>1.3 测试</h2>
<h3>1.3.1 编写 controler</h3>
<p>在 hello 方法上添加 @LogApi</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@LogApi</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3>1.3.2 测试结果</h3>
<p>发送请求</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>http://localhost:8080/hello?name=起凡
</code></pre></div><p>查看控制台输出</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>LogInfo(id=null, serviceId=null, serverIp=null, serverHost=null, env=null, remoteIp=0:0:0:0:0:0:0:1, userAgent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.62, requestUri=/hello, method=GET, methodClass=com.example.springaop.controller.UserController, methodName=hello, params={"name":["起凡"]}, time=0)

</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>HTTP各种参数发送</title>
      <link>https://mister-hope.github.io/blog/knowledge/spring/http/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/spring/http/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">HTTP各种参数发送</source>
      <description>利用Idea的HttpClient向SpringBoot发起各种请求参数。后端使用@RequestParam，@ModelAttribute，@PathVariable，@RequestBody，@RequestPart去接收。 HTTP各种参数发送 1. spring mvc 中的参数接受之 GET 请求 Get 请求是没有 body 的，参数都是放...</description>
      <category>IDEA技巧</category>
      <pubDate>Fri, 01 Oct 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>利用Idea的HttpClient向SpringBoot发起各种请求参数。后端使用<code>@RequestParam</code>，<code>@ModelAttribute</code>，<code>@PathVariable</code>，<code>@RequestBody</code>，<code>@RequestPart</code>去接收。</p>
<!-- more -->
<h1>HTTP各种参数发送</h1>
<h2>1. spring mvc 中的参数接受之 GET 请求</h2>
<p>Get 请求是没有 body 的，参数都是放在 url 上面。<br>
根据在 url 参数格式不同，一共有下面这几种</p>
<ol>
<li>Path Variable</li>
<li>Query</li>
<li>Matrix Variable（不常用）</li>
</ol>
<h2>1.1 path variable</h2>
<h3>1.1.1 使用 <code>@PathVariable</code></h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET http://localhost:7720/user/find/123/起凡
                                    \ /
                                这里的"123"和"起凡"是参数
</code></pre></div><p>这种传参格式就如同名字一样"路径变量"，参数在路径上。</p>
<p>针对这种传参方式后端可以这么接受。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 在路径中用id占位，代表这个地方将会是参数</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"find/{id}/{username}"</span><span class="token punctuation">)</span>
    <span class="token comment">// 方法上面通过占位名称得到参数</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>1.2 query 传参</h2>
<h3>1.2.1 使用 <code>@RequestParam</code></h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>###
GET http://localhost:7720/user/find?username=起凡&amp;password=123456

</code></pre></div><p>在路径的最后用 "?" 隔开要传输的参数。 通过 "&amp;" 分割多个 <code>key=value</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"find"</span><span class="token punctuation">)</span>
    <span class="token comment">// 通过key接受参数</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>1.2.2 使用 <code>@ModelAttribute</code></h3>
<p>如果现在需要做一个用户搜索功能，前端会传 pageNum（页数）, pageSize（每页大小）, keyword（关键词），startTime（创建日期）。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET http://localhost:7720/user/search?pageNum=1&amp;pageSize=10
&amp;keyword=起凡&amp;startTime=Fri Apr 29 2022 21:16:50
</code></pre></div><p>使用 <code>@RequestParam</code>，我们需要在接口上接受四个参数，这样会显得接口过于庞大，不雅观。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Integer</span> pageNum<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> keyword<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>改造一下，我们可以创建一个 SearchDto</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchDto</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> pageNum<span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> pageSize<span class="token punctuation">;</span>
    <span class="token class-name">String</span> keyword<span class="token punctuation">;</span>
    <span class="token class-name">Date</span> startTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>通过 <code>@ModelAttribute</code> 就可以接受多个 query 参数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> <span class="token class-name">SearchDto</span> searchDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>searchDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>1.2.3 使用 <code>@ModelAttribute</code> 和 <code>@RequestParam</code></h3>
<p>刚刚我们做的是用户搜索功能，现在假设我们需要做文章搜索功能。文章搜索的过滤条件比用户搜索多了一个 category（文章类别）。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET http://localhost:7720/article/search?pageNum=1&amp;pageSize=10
&amp;keyword=spring boot&amp;startTime=Fri Apr 29 2022 21:16:50&amp;category=科技
</code></pre></div><p>这时我们可以再创建一个 ArticleSearchDto 然后继承 SearchDto</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleSearchDto</span> <span class="token keyword">extends</span> <span class="token class-name">SearchDto</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> category<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后在文章搜索接口上接受 ArticleSearchDto</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> <span class="token class-name">ArticleSearchDto</span> searchDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>searchDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>但是这样真的方便吗？因为多出一个字段就要再建立一个类，是不是有点麻烦了。我们完全可以把<code>@ModelAttribute</code> 和 <code>@RequestParam</code><br>
结合起来使用</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token comment">// @RequestParam 获取新增的过滤条件</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> <span class="token class-name">SearchDto</span> searchDto<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>searchDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>2. spring mvc 中的参数接受之 POST 请求</h2>
<p>POST 请求的参数可以放在 url 上，也可以放在 body 种。<br>
POST 请求的 body 格式大概可以分为两种，</p>
<ol>
<li>一种是只能传输一个对象</li>
<li>一种是可以传输多个对象。</li>
</ol>
<p>application/json，application/x-www-form-urlencoded 属于第一种</p>
<p>multipart/form-data 属于第二种。</p>
<h2>2.1 application/x-www-form-urlencoded 传参</h2>
<h3>2.1.1 <code>@RequestParam</code> 和 <code>@ModelAttribute</code></h3>
<p>通过上面的例子可以知道，<code>@RequestParam</code> 和 <code>@ModelAttribute</code>可以获取 query 里面的参数。</p>
<p>实际上这两个注解还可以获取 application/x-www-form-urlencoded 里面的参数。</p>
<p>之前是通过 get 请求进行文章搜索。现在改造一下，前端通过 post 请求进行文章搜索。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>POST http://localhost:7720/article/search?author=起凡&amp;pageSize=10
Content-Type: application/x-www-form-urlencoded

pageNum=1&amp;keyword=spring boot&amp;startTime=Fri Apr 29 2022 21:16:50&amp;category=科技
</code></pre></div><p>我特意把 author 和 pageSize 放在 query 里面，看看 springboot 是否能接受到参数。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> <span class="token class-name">SearchDto</span> searchDto<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>searchDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"category = "</span> <span class="token operator">+</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"author = "</span> <span class="token operator">+</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>SearchDto(pageNum=1, pageSize=10, keyword=spring boot, startTime=Fri Apr 29 21:16:50 CST 2022)
category = 科技
author = 起凡
</code></pre></div><p>结果分析：</p>
<ol>
<li>pageSize 和 pageNum 分别在 query 和 form 里面，但是依然被 <code>@ModelAttribute</code> 正确绑定到 SearchDto 的 pageSize 和<br>
pageNum 属性上。</li>
<li>category 和 author 分别在 query 和 form 里面， 但是依然被 <code>@RequestParam</code> 正确的获取到。</li>
</ol>
<h2>2.2 application/json 传参</h2>
<h3>2.2.1 <code>@RequestBody</code> 和 <code>@RequestParam</code></h3>
<p>还是上面的文章搜索功能，但是这次前端会把搜索条件用 json 格式发送</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>###
POST http://localhost:7720/article/search?category=科技
Content-Type: application/json
jctoken: bef84c6b-e160-4590-82a9-191f0c8a17fa

{
  "pageNum": 1,
  "pageSize": 10,
  "startTime": "2022-04-29T22:52:00",
  "keyword": "spring boot"
}
</code></pre></div><p>后台接收</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span>
    <span class="token comment">// 通过@RequestParam获取query中的额外参数</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SearchDto</span> searchDto<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>searchDto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"category = "</span> <span class="token operator">+</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>因为文章搜索多出了 category 这个参数，后端的 SearchDto 中没有这个属性，如果放在 json 里面 <code>@RequestBody</code> 就无法接收这个参数。所以把<br>
category 放在 query 中然后通过 <code>@RequestParam</code> 接收。</p>
<p><code>@RequestBody</code> 还可以接收嵌套的 json对象，只需要后端创建相应的类就可以了</p>
<h2>2.3 multipart/form-data</h2>
<p>这种格式的 body 有许多 part，每个 part 通过一个分隔符分割。<br>
body 格式如下</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">## boundary 参数告诉请求接受者，要使用 "aBoundaryString" 对 body 进行分割。</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>aBoundaryString

<span class="token comment">## 发送请求时，使用 "aBoundaryString" 进行分割，</span>
<span class="token comment">## 这个分隔符一定要和上面规定的一样</span>
<span class="token operator">-</span><span class="token operator">-</span>aBoundaryString
<span class="token comment">## name是每一部分的名称，后端可以通过@RequestParam("myFile") 获取到这个部分</span>
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"myFile"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"img.jpg"</span>
<span class="token comment">## 二进制数据的格式是什么</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> image<span class="token operator">/</span>jpeg

<span class="token punctuation">(</span>二进制数据<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span>aBoundaryString
<span class="token comment">## name是每一部分的名称，后端可以通过@RequestParam("text") 获取到这个部分</span>
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"text"</span>

<span class="token punctuation">(</span>二进制文本数据，可以是json，xml，文本<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span>aBoundaryString
<span class="token punctuation">(</span>more subparts<span class="token punctuation">)</span>
<span class="token comment">## 结尾分割符 需要在末尾加上 "--"</span>
<span class="token operator">-</span><span class="token operator">-</span>aBoundaryString<span class="token operator">-</span><span class="token operator">-</span>
</code></pre></div><h3>2.3.1 <code>@RequestParam</code> 单个接受文件</h3>
<p>现在前端想要上传一张图片，图片的名称为 123.png，接受参数为 file。</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>POST http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">7720</span><span class="token operator">/</span>test<span class="token operator">/</span>upload1
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>起凡分隔符

<span class="token operator">-</span><span class="token operator">-</span>起凡分隔符
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"123.png"</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> image<span class="token operator">/</span>png

<span class="token punctuation">(</span>文件数据<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span>起凡分隔符<span class="token operator">-</span><span class="token operator">-</span>
</code></pre></div><p>后端接收</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> multipartFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>2.3.2 <code>@RequestParam</code> 接受多个文件</h3>
<p>前端现在想批量上传文件，后端应该如何接受呢？</p>
<p>因为文件的数量是不固定的，并且 name<br>
参数也是未知的，后端不能像上面那样以这种方式接收 <code> @RequestParam("file1")</code>，<code>@RequestParam("file2")</code> ...</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>POST http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">7720</span><span class="token operator">/</span>test<span class="token operator">/</span>upload2
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>起凡分隔符

<span class="token operator">-</span><span class="token operator">-</span>起凡分隔符
<span class="token comment">## name 随机取值</span>
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"asdasdas"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"123.png"</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> image<span class="token operator">/</span>png

<span class="token punctuation">(</span>二进制数据<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span>起凡分隔符
<span class="token comment">## name 随机取值</span>
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"asdasdasssdasdsada"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"mytext.txt"</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>plain

<span class="token punctuation">(</span>二进制数据<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span>起凡分隔符<span class="token operator">-</span><span class="token operator">-</span>
</code></pre></div><p>后端接收</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">upload2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">&gt;</span></span> multipartFileMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        multipartFileMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"filename = "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>name = asdasdas
filename = 123.png
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot+Axios文件下载</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/download/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/download/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">SpringBoot+Axios文件下载</source>
      <description>@slidestart 后端返回二进制流 @SneakyThrows 不想处理的异常可以使用@SneakyThrows，它可以让你不使用throws也能抛出异常 -- byte[] 返回文件的二进制数组 -- try-with-resources在传统的 try-catch-finally 结构中，通常需要在 finally 块中手动关闭这些资源以避免...</description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[<p>@slidestart</p>
<!-- slide1 -->
<!-- # SpringBoot+Axios文件下载 -->
<!-- ![文件下载](/assets/images/knowledge/tips/download/image.png) -->
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@SneakyThrows</span>
  <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>
        <span class="token string">"C:\\Users\\a1507\\Desktop\\远程开发.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/mall-api/download'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> responseType<span class="token operator">:</span> <span class="token string">'blob'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
  link<span class="token punctuation">.</span>href <span class="token operator">=</span> url
  link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'test.jpg'</span> <span class="token comment">// 设置文件名</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token comment">// 一定要添加到DOM中</span>
  <span class="token comment">// 触发点击下载</span>
  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 下载完成后清理</span>
  window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://mister-hope.github.io/blog/assets/images/knowledge/tips/download/image.png" type="image/png"/>
    </item>
    <item>
      <title>上传Excel并解析</title>
      <link>https://mister-hope.github.io/blog/knowledge/tips/excel-read/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/tips/excel-read/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">上传Excel并解析</source>
      <description> @slidestart @slideend </description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[<!-- # 上传Excel并解析

:::center
![excel数据](./excel.png)

![解析展示](./table.png)
::: -->
<p>@slidestart</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"read-user-excel"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserExcelModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">readUserExcel</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserExcelModel</span><span class="token punctuation">&gt;</span></span> models <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">UserExcelModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">PageReadListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserExcelModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>dataList <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    models<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserExcelModel</span> demoData <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"读取到一条数据{}"</span><span class="token punctuation">,</span> demoData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span><span class="token constant">XLSX</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> models<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserExcelModel</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"手机号"</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>@slideend</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> type <span class="token punctuation">{</span> UploadFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"element-plus/es/components/upload/src/upload"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> userList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleFileChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> UploadFile</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/api/read-user-excel"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> file<span class="token punctuation">.</span>raw <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"multipart/form-data"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    userList<span class="token punctuation">.</span>value <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">justify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>end<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>excel-upload<span class="token punctuation">"</span></span>
        <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.xlsx,.xls<span class="token punctuation">"</span></span>
        <span class="token attr-name">:show-file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
        <span class="token attr-name">:auto-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
        <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>
        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleFileChange<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>导入excel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>手机号<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.xxxx</span> <span class="token punctuation">{</span>
  <span class="token selector">.bbbb</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.red</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>ESLint</title>
      <link>https://mister-hope.github.io/blog/knowledge/vite/eslint/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/vite/eslint/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">ESLint</source>
      <description>ESLint ESLint可以做两件事 语法校验。扫描你代码中的一些不规范写法提出意见。 比如for循环渲染数据时忘记加key。vue的eslint插件就会对这种影响性能的写法提出意见。 代码整理。每个eslint插件都可以增加自己的代码整理规则。 概念 ESLint 插件：定义一系列的校验规则，常以 eslint-plugin-* 命名，在 ESLi...</description>
      <category>前端工程化</category>
      <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>ESLint可以做两件事</p>
<ol>
<li>语法校验。扫描你代码中的一些不规范写法提出意见。<br>
比如for循环渲染数据时忘记加key。vue的eslint插件就会对这种影响性能的写法提出意见。</li>
<li>代码整理。每个eslint插件都可以增加自己的代码整理规则。</li>
</ol>
<h2>概念</h2>
<ul>
<li>ESLint 插件：定义一系列的校验规则，常以 eslint-plugin-* 命名，在 ESLint 配置文件中通过 plugins 选项引入。<br>
需要注意的是，插件仅定义规则，并不启用规则。规则是由 ESLint 配置的 rules 选项启用的。</li>
<li>可共享配置（ Shareable Configs ）：每个 ESLint 配置文件都可以复用其他配置，这些配置称为可共享配置。可共享配置一共有两种形式：
<ul>
<li>ESLint Config：纯粹的配置，包含各个 ESLint 配置选项，常用 eslint-config-* 命名发布</li>
<li>ESLint 插件带配置（ Plugins with configs ） ：在原先的 ESLint 插件上导出 configs 对象，configs 等价于<br>
ESLint Config。拓展此类插件的可共享配置时需要在前面增加 plugin: 前缀，比如 plugin:<br>
prettier/recommended</li>
</ul>
</li>
</ul>
<h2>安装</h2>
<p><strong>@vue/eslint-config-standard</strong></p>
<p>这是Vue官方提供的共享配置。里面包含了eslint标准配置和eslint-plugin-vue插件。</p>
<ul>
<li>
<p>eslint标准配置。eslint标准配置依赖了eslint官方插件。</p>
</li>
<li>
<p>eslint-plugin-vue插件。eslint-plugin-vue包含了vue语法的校验规则和少量的vue代码整理。<br>
eslint-plugin-vue中又包含了好几个共享配置。</p>
</li>
</ul>
<p><strong>@vue/eslint-config-prettier</strong></p>
<p>前面介绍了eslint提供了html/css/js的校验和整理规则，但是eslint自带的整理规则不太好看。<br>
所以我这边使用了prettier的规则。</p>
<p><strong>@rushstack/eslint-patch</strong></p>
<p>eslint为什么配置起来很麻烦？主要原因是当我们在安装eslint-config时还需要手动去安装这些config对应的plugin。<br>
eslint没办法逐层的加载依赖。</p>
<p>eslint-patch就是为了解决这一问题。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @rushstack/eslint-patch <span class="token parameter variable">-D</span>
<span class="token function">npm</span> i @vue/eslint-config-prettier <span class="token parameter variable">-D</span>
<span class="token function">npm</span> i @vue/eslint-config-standard <span class="token parameter variable">-D</span>
</code></pre></div><h2>配置</h2>
<p>由于ESLint是运行在Node.js上，所以它的模块结构是CommonJS。而我们的前端项目<br>
.js文件默认是ESM模块（.mjs），为了让ESLint可以正确导入模块这边使用.cjs声明该js文件的模块是 CommonJS<br>
格式。</p>
<p><code>.eslintrc.cjs</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用CommonJS是使用 require 导入，ESM是使用 import 导入</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rushstack/eslint-patch/modern-module-resolution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// Vue语法的ESLint插件</span>
    <span class="token string">"plugin:vue/vue3-recommended"</span><span class="token punctuation">,</span>
    <span class="token comment">// 继承Vue官方提供的ESLint标准配置</span>
    <span class="token string">"@vue/eslint-config-standard"</span><span class="token punctuation">,</span>
    <span class="token comment">// 继承Vue官方提供的ESLintPrettier标准配置</span>
    <span class="token string">"@vue/eslint-config-prettier"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre></div><p><code>.gitignore</code></p>
<div class="language-ignorelang" data-ext="ignorelang" data-title="ignorelang"><pre class="language-ignorelang"><code>### IntelliJ IDEA ###
/.idea/
*.iws
*.iml
*.ipr
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist
dist-ssr
coverage
*.local

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

</code></pre></div><p>新增了两个script，format和lint分别用于整理代码和修复eslint报错。lint的同时也会整理所有代码。如果你仅仅只想整理代码可以使用format。</p>
<p><code>package.json</code></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span><span class="token punctuation">,</span>
    <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">,</span>
    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"prettier --write ."</span><span class="token punctuation">,</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"^4.4.9"</span><span class="token punctuation">,</span>
    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^3.3.4"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"^4.4.9"</span><span class="token punctuation">,</span>
    <span class="token property">"@vitejs/plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^4.3.4"</span><span class="token punctuation">,</span>
    <span class="token property">"@rushstack/eslint-patch"</span><span class="token operator">:</span> <span class="token string">"^1.3.3"</span><span class="token punctuation">,</span>
    <span class="token property">"@vue/eslint-config-prettier"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"@vue/eslint-config-standard"</span><span class="token operator">:</span> <span class="token string">"^8.0.1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://mister-hope.github.io/blog/knowledge/vite/typescript/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/vite/typescript/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Typescript</source>
      <description>Typescript vite对typescript的支持是内置的，因此不需要配置typescript的编译，只需要在代码中增加tsconfig.json控制typescript的提示效果。 配置 修改package.json中的依赖，然后执行npm install。 package.json @vue/tsconfig是Vue官方提供的typescr...</description>
      <category>前端工程化</category>
      <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>vite对typescript的支持是内置的，因此不需要配置typescript的编译，只需要在代码中增加tsconfig.json控制typescript的提示效果。</p>
<h2>配置</h2>
<p>修改package.json中的依赖，然后执行<code>npm install</code>。</p>
<p><code>package.json</code></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"^4.4.9"</span><span class="token punctuation">,</span>
    <span class="token property">"@vitejs/plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^4.3.4"</span><span class="token punctuation">,</span>
    <span class="token property">"@rushstack/eslint-patch"</span><span class="token operator">:</span> <span class="token string">"^1.3.3"</span><span class="token punctuation">,</span>
    <span class="token property">"@vue/eslint-config-prettier"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"@vue/eslint-config-standard-with-typescript"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"@vue/tsconfig"</span><span class="token operator">:</span> <span class="token string">"^0.4.0"</span>
  <span class="token punctuation">}</span>
</code></pre></div><p><code>@vue/tsconfig</code>是Vue官方提供的typescript配置，所以我们只需要继承整个配置就可以在代码里面写typescript了。</p>
<p><code>tsconfig.json</code></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"@vue/tsconfig/tsconfig.dom.json"</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>@vue/eslint-config-standard-with-typescript</code>是Vue官方提供的ESLint+TypeScript+Vue共享配置，里面已经配置了这三个插件并解决了冲突的规则。</p>
<p><code>.eslintrc.cjs</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用CommonJS是使用 require 导入，ESM是使用 import 导入</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rushstack/eslint-patch/modern-module-resolution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// Vue语法的ESLint插件</span>
    <span class="token string">"plugin:vue/vue3-recommended"</span><span class="token punctuation">,</span>
    <span class="token comment">// ESLint+TypeScript Lint+Vue Lint三个插件的集合与配置 </span>
    <span class="token string">"@vue/eslint-config-standard-with-typescript"</span><span class="token punctuation">,</span>
    <span class="token comment">// 继承Vue官方提供的ESLintPrettier标准配置</span>
    <span class="token string">"@vue/eslint-config-prettier"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre></div><h2>代码</h2>
<p><code>vite.config.js</code>-&gt;<code>vite.config.ts</code></p>
<p><code>index.js</code>-&gt; 删除</p>
<p><code>index.html</code>-&gt;</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.ts<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>src/main.js</code> -&gt; <code>src/main.ts</code></p>
<p><code>App.vue</code> -&gt;</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>当前计数器：{{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCounterChange(counter + 1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCounterChange(counter - 1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击减少<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> ref<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> handleCounterChange <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  counter<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Vue</title>
      <link>https://mister-hope.github.io/blog/knowledge/vite/vue/</link>
      <guid>https://mister-hope.github.io/blog/knowledge/vite/vue/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">Vue</source>
      <description>Vue 现在我们开始在vite上加入vue框架。vue我就不多介绍了相信大家都懂。 安装 插件安装 在 vscode 插件市场中搜索Vue Volar extension Pack 依赖安装 配置 新建 vite.config.js。引用vue编译插件，使得我们写的.vue文件经过编译后可以被浏览器识别。 vite.config.js 代码 vue作为...</description>
      <category>前端工程化</category>
      <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>现在我们开始在vite上加入vue框架。vue我就不多介绍了相信大家都懂。</p>
<h2>安装</h2>
<p><strong>插件安装</strong></p>
<p>在 vscode 插件市场中搜索<code>Vue Volar extension Pack</code></p>

<p><strong>依赖安装</strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 运行时依赖</span>
<span class="token function">npm</span> i vue
<span class="token comment"># vue语法转html+js+css</span>
<span class="token function">npm</span> i @vitejs/plugin-vue <span class="token parameter variable">-D</span>
</code></pre></div><h2>配置</h2>
<p>新建 vite.config.js。引用vue编译插件，使得我们写的.vue文件经过编译后可以被浏览器识别。</p>
<p><code>vite.config.js</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>代码</h2>
<p>vue作为一个单页面应用，我们会将vue的入口组件（App.vue）挂载到html元素下。<br>
因此首先，我们先在index.html中创建一个唯一的元素用于挂载vue的入口组件。</p>
<p><code>index.html</code></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!--忽略...--&gt;</span>
<span class="token comment">&lt;!--引用main.js中返回的vue入口组件--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--忽略...--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--用于挂载vue入口组件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--忽略...--&gt;</span>
</code></pre></div><p>下面我在App.vue中编写了一个简单的计数器用于验证vue的功能。</p>
<p><code>src/App.vue</code></p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">&gt;</span></span>当前计数器：{{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>()=&gt;counter++<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>()=&gt;counter--<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击减少<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counter<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在main.js我们指定了入口组件返回了一个vue单页面应用实例。并将该组件挂载到index.html的#app元素上。</p>
<p><code>src/main.js</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>
<span class="token keyword">const</span> app<span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>
</code></pre></div><h2>运行</h2>
<p><code>npm run dev</code></p>

]]></content:encoded>
    </item>
    <item>
      <title>第十期 消息发送和markdown显示消息记录</title>
      <link>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter10/</link>
      <guid>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter10/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">第十期 消息发送和markdown显示消息记录</source>
      <description>第十期 消息发送和markdown显示消息记录 本期内容 消息发送和消息订阅 等待回复的加载动画（animation+ @keyframes） markdown 格式消息展示 消息列表切换过渡（&amp;lt;transition-group&amp;gt;&amp;lt;/transition-group&amp;gt;） 代码实现 等待加载动画 当用户发送完消息等待 ChatGPT 回复的过程中有一些延...</description>
      <category>ChatGPT</category>
      <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>本期内容</h2>
<ol>
<li>消息发送和消息订阅</li>
<li>等待回复的加载动画（<code>animation</code>+ <code>@keyframes</code>）</li>
<li>markdown 格式消息展示</li>
<li>消息列表切换过渡（<code>&lt;transition-group&gt;&lt;/transition-group&gt;</code>）</li>
</ol>

<h2>代码实现</h2>
<h3>等待加载动画</h3>
<p>当用户发送完消息等待 ChatGPT 回复的过程中有一些延迟，我们需要写一个文字加载的动画告知用户等待回复。</p>
<p>主要思路是创建三个黑点，然后第一个和第三个同频率的放大缩小且伴随着颜色深淡变化。第二个播放的也是同样的动画，但是慢了0.5。这样使得整体有一种波浪感，展现出了加载的效果。</p>

<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--  三个 div 三个黑点 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.loading</span> <span class="token punctuation">{</span>
    // 三个黑点水平展示
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    // 三个黑点均匀分布在54px中
    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 54px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>

    <span class="token selector">div</span> <span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 0 solid currentColor<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
      // 变成黑色圆点
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
      // 播放我们下面定义的动画，每次动画持续0.7s且循环播放。
      <span class="token property">animation</span><span class="token punctuation">:</span> ball-beat 0.7s -0.15s infinite linear<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">div:nth-child(2n-1)</span> <span class="token punctuation">{</span>
      // 慢0.5秒
      <span class="token property">animation-delay</span><span class="token punctuation">:</span> -0.5s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  // 动画定义
  <span class="token atrule"><span class="token rule">@keyframes</span> ball-beat</span> <span class="token punctuation">{</span>
    <span class="token selector">// 关键帧定义，在50%的时候是颜色变透明，且缩小。
    50%</span> <span class="token punctuation">{</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.75<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">// 在100%时是回到正常状态，浏览器会自动在这两个关键帧间平滑过渡。
    100%</span> <span class="token punctuation">{</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><h3>聊天消息展示</h3>
<br>
<br>

<p>时间格式化，后面 for 循环渲染消息组件的时候，使用的 key 是 createdAt 而不是 id。因此我们需要将 date 对象格式化成时间字符串。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> dayjs
</code></pre></div><p>ChatGPT 回复的消息是 Markdown 格式，如果直接显示在页面上格式会乱掉。因此我们需要引入 Markdown 编辑器来展示 ChatGPT 回复的消息。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> md-editor-v3
</code></pre></div><p>在 main.ts 中定义 MdPreview 和引入 markdown 样式</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>MdPreview<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"md-editor-v3"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"md-editor-v3/lib/preview.css"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"MdPreview"</span><span class="token punctuation">,</span> MdPreview<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>消息展示从角色上可以分为 <code>User</code>代表用户发送的消息，应该显示在右侧。角色为<code>Assistant</code>代表 ChatGPT 回复的消息，因此显示在左侧。除了位置不同之外，头像也有差别。用户发送的消息显示用户的头像，ChatGPT 回复的消息显示的是LOGO。</p>
<p>新建<code>home/components/MessageRow.vue</code></p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>PropType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ChatMessage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../typings"</span><span class="token punctuation">;</span>

  <span class="token comment">// message：接受消息对象，展示消息内容和头像，并且根据角色调整消息位置。</span>
  <span class="token comment">// avatar：用户头像，如果角色是 Assistant则使用 logo。</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Object <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>ChatMessage<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"https://www.jarcheng.top/images/logo.jpg"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 整个div是用来调整内部消息的位置，每条消息占的空间都是一整行，然后根据right还是left来调整内部的消息是靠右边还是靠左边 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['message-row', message.role === 'user' ? 'right' : 'left']<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 消息展示，分为上下，上面是头像，下面是消息 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 头像， --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-avatar</span>
            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.role === 'user'<span class="token punctuation">"</span></span>
            <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>
            <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span>
        <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-avatar</span> <span class="token attr-name">v-else</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 发送的消息或者回复的消息 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 预览模式，用来展示markdown格式的消息 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MdPreview</span>
            <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>preview-only'<span class="token punctuation">"</span></span>
            <span class="token attr-name">:preview-theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>smart-blue'<span class="token punctuation">"</span></span>
            <span class="token attr-name">:model-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.content<span class="token punctuation">"</span></span>
            <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{
            backgroundColor:
              message.role === 'user' ? 'rgb(231, 248, 255)' : '#f4f4f5',
          }<span class="token punctuation">"</span></span>
            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.content<span class="token punctuation">"</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MdPreview</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 如果消息的内容为空则显示加载动画 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextLoading</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextLoading</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.message-row</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>

    <span class="token selector">&amp;.right</span> <span class="token punctuation">{</span>
      // 消息显示在右侧
      <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>

      <span class="token selector">.row</span> <span class="token punctuation">{</span>
        <span class="token selector">// 头像也要靠右侧
        .avatar-wrapper</span> <span class="token punctuation">{</span>
          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
          <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">// 用户回复的消息和ChatGPT回复的消息背景颜色做区分
        .message</span> <span class="token punctuation">{</span>
          <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>231<span class="token punctuation">,</span> 248<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector">// 默认靠左边显示
    .row</span> <span class="token punctuation">{</span>
      <span class="token selector">.avatar-wrapper</span> <span class="token punctuation">{</span>
        <span class="token selector">.avatar</span> <span class="token punctuation">{</span>
          <span class="token property">box-shadow</span><span class="token punctuation">:</span> 20px 20px 20px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.03<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.message</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 1.5px<span class="token punctuation">;</span>
        // 限制消息展示的最大宽度
        <span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
        // 圆润一点
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>
        // 给消息框加一些描边，看起来更加实一些，要不然太扁了轻飘飘的。
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        // 增加一些阴影看起来更加立体
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 20px 20px 20px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.01<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token selector">// 调整markdown组件的一些样式，deep可以修改组件内的样式，正常情况是scoped只能修改本组件的样式。
  :deep(.md-editor-preview-wrapper)</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>

    <span class="token selector">.smart-blue-theme p</span> <span class="token punctuation">{</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>测试效果</p>
<p><code>HomeView.vue</code></p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-view<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 省略... --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 省略... --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-divider</span> <span class="token attr-name">:border-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>solid'<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageRow</span>
              <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ content: '你好', role: 'user' } as ChatMessage<span class="token punctuation">"</span></span>
              <span class="token attr-name">:avatar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>https://www.jarcheng.top/images/logo.jpg'<span class="token punctuation">"</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageRow</span><span class="token punctuation">&gt;</span></span>

          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageRow</span>
              <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{content:'',role:'assistant'} as ChatMessage<span class="token punctuation">"</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageRow</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>消息输入框</h3>
<br>

在element-ui的文本域组件基础上，我们添加了一个发送按钮和发送事件。点击按钮时向外部发送文本域的内容并且清楚掉文本域的内容。
<p>新建 <code>home/components/MessageInput.vue</code></p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

  <span class="token comment">// 发送消息消息事件</span>
  <span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token literal-property property">send</span><span class="token operator">:</span> <span class="token punctuation">[</span>message<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 输入框内的消息</span>
  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">sendMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送完清除</span>
    message<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-input<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 按回车键发送，输入框高度三行 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
          <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>
          <span class="token attr-name">:autosize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
          <span class="token attr-name">:rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span>
          <span class="token attr-name">resize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span>
          <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMessage<span class="token punctuation">"</span></span>
      <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMessage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon--left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Position</span><span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          发送
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.message-input</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.07<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.07<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.07<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.button-wrapper</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>消息发送</h3>
<p>我们发出一条消息肯定还对应着一条ChatGPT的回复消息。因此当我们发送消息时需要创建两条消息，第一条消息是我们的提问通过websocket发送给后端。第二条是ChatGPT的回复，由于websocket会把结果一个token一个token推送回来，因此我们需要订阅消息并且将每次收到的token追加到第二条消息中。</p>
<p><code>HomeView.vue</code></p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 省略</span>
  <span class="token comment">// 连接后端的websocekt服务</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">brokerURL</span><span class="token operator">:</span> <span class="token string">"ws://localhost:8080/handshake"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onConnect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 连接成功后订阅ChatGPT回复地址</span>
      client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"/user/queue/chatMessage/receive"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将每次回复的结果追加到回复结果中</span>
        responseMessage<span class="token punctuation">.</span>value<span class="token punctuation">.</span>content <span class="token operator">+=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 发起连接</span>
  client<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ChatGPT的回复</span>
  <span class="token keyword">const</span> responseMessage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ChatMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSendMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">message</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建一个ChatGPT回复对象，不能重复使用同一个对象。</span>
    responseMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token comment">// 因为回复的消息没有id，所以统一将创建时间+index当作key</span>
      <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> ChatMessage<span class="token punctuation">;</span>
    <span class="token comment">// 用户的提问</span>
    <span class="token keyword">const</span> chatMessage <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">session</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> activeSession<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">content</span><span class="token operator">:</span> message<span class="token punctuation">,</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> ChatMessage<span class="token punctuation">;</span>
    <span class="token comment">// 防止循环依赖，会导致json序列化失败</span>
    chatMessage<span class="token punctuation">.</span>session<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">"/socket/chatMessage/send"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将两条消息显示在页面中</span>
    activeSession<span class="token punctuation">.</span>value<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span>chatMessage<span class="token punctuation">,</span> responseMessage<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-view<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 省略... --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 省略... --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-divider</span> <span class="token attr-name">:border-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>solid'<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token comment">&lt;!-- 过渡效果 --&gt;</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message-row</span>
                <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(message, index) in activeSession.messages<span class="token punctuation">"</span></span>
                <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message.createdAt + index<span class="token punctuation">"</span></span>
                <span class="token attr-name">:avatar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession.createdBy.avatar<span class="token punctuation">"</span></span>
                <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>
            <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message-row</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 监听发送事件 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message-input</span> <span class="token attr-name">@send</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSendMessage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message-input</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.home-view</span> <span class="token punctuation">{</span>
    <span class="token selector">// 省略...
    .chat-panel</span> <span class="token punctuation">{</span>
      // 省略...

      <span class="token comment">/* 右侧消息记录面板*/</span>
      <span class="token selector">.message-panel</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>
        <span class="token selector">// 这边删除掉高度 height
        // height: 800px

        // 省略...

        .message-list</span> <span class="token punctuation">{</span>
          <span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>
          <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
          // 消息条数太多时，溢出部分滚动
          <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>
          <span class="token selector">// 当切换聊天会话时，消息记录也随之切换的过渡效果
          .list-enter-active,
          .list-leave-active</span> <span class="token punctuation">{</span>
            <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token selector">.list-enter-from,
          .list-leave-to</span> <span class="token punctuation">{</span>
            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>30px<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在 app.vue 中全局修改滚动条的默认样式</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>
    <span class="token property">--bar-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>第八期 Stream 请求 ChatGPT/WebSocket 推送响应</title>
      <link>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter8/</link>
      <guid>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter8/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">第八期 Stream 请求 ChatGPT/WebSocket 推送响应</source>
      <description>第八期 Stream 请求 ChatGPT/WebSocket 推送响应 本期内容 使用 Websocket Stomp 协议配合@MessageMapping和@Payload 开放消息接口，和接收 JSON 请求体。 实现私有订阅，服务器将请求的结果响应给对应的用户，而不是广播给所有用户。 使用 Proxy 将请求转发给 OpenAI。 对代码进行...</description>
      <category>ChatGPT</category>
      <pubDate>Thu, 22 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>本期内容</h2>
<ol>
<li>使用 Websocket Stomp 协议配合<code>@MessageMapping</code>和<code>@Payload</code> 开放消息接口，和接收 JSON 请求体。</li>
<li>实现私有订阅，服务器将请求的结果响应给对应的用户，而不是广播给所有用户。</li>
<li>使用 Proxy 将请求转发给 OpenAI。</li>
<li>对代码进行逻辑分层，让代码更清晰。</li>
</ol>
<h2>代码实现</h2>
<h3>1. WebsocketController 接收消息</h3>
<p>与 MVC 中的 Controller 不同，这边不能使用<code>@RestController</code>需要用<code>@Controller</code>。<code>@AllArgsConstructor</code>是 lombok 提供的一个为类中的属性生成构成器的注解。这样我们可以方便的使用 Spring 推荐的构造器依赖注入。</p>
<p><code>@MessageMapping</code>类似于<code>@RequestMapping</code>用来标识消息路由。它不仅可以加在方法上，也可以加载类上。加在类上那就表名类中的所有消息路由都会拼接上这个路径。</p>
<p>在被<code>@MessageMapping</code>标识的方法中（如下的 chat 方法），可以使用<code>@Payload</code>解析 JSON 格式的消息体和<code>@RequestBody</code>一样。同时也可以配合<code>@Valid</code>或者<code>@Validated</code>做参数校验。</p>
<p>chat()方法的第二个参数接收了<code>Principle</code>。它代表着在 websocket 的 handshake 阶段获取到的用户信息。可以参考<code>io.qifan.chatgpt.assistant.infrastructure.websocket.UserHandshakeHandler#determineUser</code>这个方法。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketChatMessageController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageService</span> chatMessageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/chatMessage/send"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">ChatMessageCreateRequest</span> requestMessage<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chatMessageService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p>此外，在被<code>@MessageMapping</code>标识的方法中还可以接收</p>
<ol>
<li><code>@Headers</code>或者<code>@Header</code>获取 Stomp 协议中的消息头，和 http 协议中的请求头类似。</li>
<li><code>@DestinationVariable</code>获取<code>@MessageMapping("/chat/{id}")</code>的 id 变量。和<code>@PathVariable</code>一样</li>
<li>接受完整的<code>Message</code>对象，其中包含消息头和消息体消息目标路由等。</li>
</ol>
<p>详细可以参考<a href="https://docs.spring.io/spring-framework/reference/web/websocket/stomp/handle-annotations.html" target="_blank" rel="noopener noreferrer">Spring WebSocket</a></p>
</blockquote>
<h3>2 发送消息</h3>
<p>发送消息的逻辑包含下面四个步骤。</p>
<ol>
<li>GPT 配置校验</li>
<li>创建 OpenAIService 用于调用 OpenAI 接口。</li>
<li>构造请求参数，将用户发送的内容以及用户的 GPT 配置填充到请求中。</li>
<li>发送请求并将响应的结果通过私有订阅地址推送给响应的用户。</li>
</ol>
<h4>2.1 GPT 配置校验</h4>
<p>在正式调用 OpenAI 的 GPT 接口之前，需要做一些基础配置的校验。只有这些基础数据校验通过后才能保障后面的代码正常运行。如果不存在 API Key 则无法调用 OpenAI 的 GPT 接口。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 校验用户是否存在GPT配置以及GPT配置中是否已经配置了API Key
     *
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span> 握手阶段得到的用户信息
     * <span class="token keyword">@return</span> 该用户的GPT配置
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"GPT配置校验，当前用户：{}"</span><span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatConfig</span> chatConfig <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"createdBy.id"</span><span class="token punctuation">)</span>
                                                                                              <span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                          <span class="token class-name">ChatConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span>
                                                                                 <span class="token string">"请配置API Key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> <span class="token string">"请配置API Key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"GPT配置校验通过，配置内容：{}"</span><span class="token punctuation">,</span> chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>2.2 创建 OpenAIService</h4>
<p>配置 proxy，通过 proxy 转发给 OpenAI。先定义 Property 配置类，spring boot 会自动读取 application.yml 中的配置信息到配置类中。在代码中注入该配置类就可以获取到 yml 中的配置信息了。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"gpt"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GPTProperty</span> <span class="token punctuation">{</span>
    <span class="token class-name">Proxy</span> proxy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># 下面是我的代理信息，你们可以根据自己的实际情况更换host和port</span>
<span class="token key atrule">gpt</span><span class="token punctuation">:</span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7890</span>
</code></pre></div><p>引入封装好的OpenAI API。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.theokanning.openai-gpt3-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>下面开始创建 OpenAIService，用于发送请求。在创建 OpenAIService 时我们配置了它底层的代理，API Key 以及 Jackson 序列化和反序列化。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">chatConfig</span> 用户的GPT配置
     * <span class="token keyword">@return</span> OpenAIService用于调用OpenAI接口
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始创建OpenAIService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token function">defaultObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">,</span>
                                <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>gptProperty<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                      gptProperty<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token function">defaultClient</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token function">defaultRetrofit</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OpenAiApi</span> api <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">OpenAiApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAiService</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>2.3 构造 ChatGPT 请求</h4>
<p>构造的 ChatGPT 请求参数需要包含用户的历史发送消息和 GPT 的历史回复消息，这样它才能记住你们之前的对话内容。所以可以看见我开始的时候根据聊天会话查询该会话内的聊天记录，然后将最新的消息插入到历史消息的尾部。还需要填写要使用的 GPT 模型，默认是 3.5。还有随机性，话题新鲜度，最大回复数。最后我们选择了请求方式是 stream，这样可以一个个字的得到 ChatGPT 的响应，而不是长时间的等待最后得到一个结果。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 构造ChatGPT请求参数
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatMessage</span> 用户的发送内容
     * <span class="token keyword">@param</span> <span class="token parameter">chatConfig</span>  用户的GPT配置信息
     * <span class="token keyword">@return</span> 返回包含用户发送内容+配置信息的ChatGPT请求参数。
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatCompletionRequest</span> <span class="token function">createChatRequest</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span> <span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatMessage</span><span class="token punctuation">&gt;</span></span> chatMessageList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"session.id"</span><span class="token punctuation">)</span>
                                                                                   <span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                                                  <span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                               <span class="token class-name">ChatMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        chatMessageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest <span class="token operator">=</span> <span class="token class-name">ChatCompletionRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>chatMessageList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                                                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatMessageMapper<span class="token operator">::</span><span class="token function">entityToMessage</span><span class="token punctuation">)</span>
                                                                                                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
                                                                                                            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">presencePenalty</span><span class="token punctuation">(</span>
                                                                                   chatConfig<span class="token punctuation">.</span><span class="token function">getPresencePenalty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">temperature</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">maxTokens</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getMaxTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求体：{}"</span><span class="token punctuation">,</span> chatCompletionRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatCompletionRequest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>还需要在 ChatMessageMapper 中添加我们的 ChatMessage 实体类和第三方包中的 ChatMessage 映射，这样我们可以方便的构造请求参数。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatMessageMapper</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>theokanning<span class="token punctuation">.</span>openai<span class="token punctuation">.</span>completion<span class="token punctuation">.</span>chat<span class="token punctuation">.</span></span>ChatMessage</span> <span class="token function">entityToMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>2.4 发送请求和推送消息</h4>
<p>在<code>io.qifan.chatgpt.assistant.gpt.session.ChatSession.Statistic</code>新增 plusChat 和 plusToken 方法。方便统计用户调用 GPT 接口时的消耗情况。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Statistic</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> charCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> tokenCount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Statistic</span> <span class="token function">plusChar</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> charCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>charCount <span class="token operator">+=</span> charCount<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Statistic</span> <span class="token function">plusToken</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> tokenCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokenCount <span class="token operator">+=</span> tokenCount<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>先获取已有的统计数量，在上面累加本次用户发送消息的长度。新建一个 ChatGPT 回答消息对象<code>responseMessage</code>用于记录回答的消息。由于本次的请求是 stream 类型，所以每次响应是一个 Token（一个单词或者一个中文字）的，这边就需要阻塞一个按顺序调用<code>convertAndSendToUser</code>推送给前端。回答完毕后将用户发送的消息和 GPT 回答的消息都插入到数据库，并且更新会话消耗 Token 的统计数量。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">ChatCompletionRequest</span> <span class="token function">createChatRequest</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span> <span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 向OpenAI发起ChatGPT请求，并将响应的结果推送给前端。
     * <span class="token keyword">@param</span> <span class="token parameter">openAiService</span> 封装好的OpenAI的服务，调用就可以发起请求。
     * <span class="token keyword">@param</span> <span class="token parameter">chatCompletionRequest</span> ChatGPT请求参数
     * <span class="token keyword">@param</span> <span class="token parameter">chatMessage</span> 用户发送的消息内容
     * <span class="token keyword">@param</span> <span class="token parameter">chatSession</span> 消息归属的会话
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span> 当前用户信息
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">OpenAiService</span> openAiService<span class="token punctuation">,</span>
                            <span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest<span class="token punctuation">,</span>
                            <span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span>
                            <span class="token class-name">ChatSession</span> chatSession<span class="token punctuation">,</span>
                            <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatSession<span class="token punctuation">.</span>Statistic</span> statistic <span class="token operator">=</span> chatSession<span class="token punctuation">.</span><span class="token function">getStatistic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                     <span class="token punctuation">.</span><span class="token function">plusChar</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                     <span class="token punctuation">.</span><span class="token function">plusToken</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ChatMessage</span> responseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token string">"assistant"</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>chatSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
        openAiService<span class="token punctuation">.</span><span class="token function">streamChatCompletion</span><span class="token punctuation">(</span>chatCompletionRequest<span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token operator">::</span><span class="token function">printStackTrace</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">blockingForEach</span><span class="token punctuation">(</span>chunk <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                         log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         <span class="token class-name">String</span> text <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">getChoices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                             <span class="token keyword">return</span><span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                         statistic<span class="token punctuation">.</span><span class="token function">plusToken</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                                  <span class="token punctuation">.</span><span class="token function">plusChar</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                <span class="token string">"/queue/chatMessage/receive"</span><span class="token punctuation">,</span>
                                                                text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                         responseMessage<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>responseMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatMessageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatMessageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>responseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatSessionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>chatSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>3. 组合各个步骤发送消息</h3>
<p>依次按照配置校验，创建 OpenAIService，ChatGPT 请求参数，发送请求的顺序调用实现消息发送逻辑。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatSessionRepository</span> chatSessionRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageRepository</span> chatMessageRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageMapper</span> chatMessageMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SendMessageService</span> sendMessageService<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageCreateRequest</span> requestMessage<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatSession</span> chatSession <span class="token operator">=</span> chatSessionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatMessage</span> chatMessage <span class="token operator">=</span> chatMessageMapper<span class="token punctuation">.</span><span class="token function">createRequest2Entity</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatConfig</span> chatConfig <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">checkConfig</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OpenAiService</span> openAIService <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">createOpenAIService</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatCompletionRequest</span> chatRequest <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">createChatRequest</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">,</span> chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sendMessageService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>openAIService<span class="token punctuation">,</span> chatRequest<span class="token punctuation">,</span> chatMessage<span class="token punctuation">,</span> chatSession<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>代码测试</h2>
<h3>创建会话</h3>
<p>调用创建聊天会话接口，得到会话 id。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>POST http://localhost:8080/chatSession/create
Content-Type: application/json

{}
</code></pre></div><p>复制你调用后得到的 result。</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span>
  <span class="token comment">//   会话id</span>
  <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"6495a20647fbac571764c984"</span><span class="token punctuation">,</span>
  <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>发送消息</h3>
<p>安装 stompjs 和 websocket。stompjs 是在 websocket 建立的连接上用特定的协议去通信。也就是说单单安装 stompjs 无法使用，需要有 websocket 的连接才能使用。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @stomp/stompjs ws
</code></pre></div><p><code>HomeView.vue</code>中编写如下的测试代码，先是向后端发起 websocket 连接，如果握手成功则订阅<code>/user/queue/chatMessage/receive</code>。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@stomp/stompjs"</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">brokerURL</span><span class="token operator">:</span> <span class="token string">"ws://localhost:8080/handshake"</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onConnect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
                    <span class="token string">"/user/queue/chatMessage/receive"</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">+=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleSend</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">"/socket/chatMessage/send"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">session</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"6495a20647fbac571764c984"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">content</span><span class="token operator">:</span> prompt<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        prompt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>结果<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提问<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prompt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSend<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>要注意，后端推送的订阅地址是<code>/queue/chatMessage/receive</code>，而用户的订阅地址是<code>/user/queue/chatMessage/receive</code>。但是为什么依然可以推送给对应的用户呢？</p>
<p>可以这么理解，当用户发送订阅消息<code>/user/queue/chatMessage/receive</code>时，其中的<code>/user</code>被替换成了用户 id 如：<code>/queue/chatMessage/receive-1234</code>。然后在服务端推送消息时，使用的是<code>convertAndSendToUser</code>推送给这个订阅地址<code>/queue/chatMessage/receive</code>，实际上会推送给<code>/queue/chatMessage/receive-1234</code>。这样推送和订阅的最终地址都达到了一致，并且这个地址是用户私有的。</p>
<p>那为什么<code>/user</code>可以被替换成用户 id 呢？因为我们之前在 <code>io.qifan.chatgpt.assistant.infrastructure.websocket.WebSocketConfig#configureMessageBroker</code>里面配置了<code>.setUserDestinationPrefix("/user")</code>。这行配置就是告诉 SpringWebSocket 遇到 <code>/user</code>开头的订阅地址要替换成用户 id，变成改用户的私有订阅地址。</p>
]]></content:encoded>
    </item>
    <item>
      <title>第九期 Vue3/ElementUI Plus 实现聊天面板</title>
      <link>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter9/</link>
      <guid>https://mister-hope.github.io/blog/project/chatgpt-assistant/chapter9/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">第九期 Vue3/ElementUI Plus 实现聊天面板</source>
      <description>第九期 Vue3/ElementUI Plus 实现聊天面板 本期内容 详细讲述布局划分，组件抽取，一步步实现下面的结果图。左侧蓝色区域是会话列表，右侧是消息记录。蓝色区域内的一个个小卡片是聊天会话组件，在组件内定义了相关的交互，删除，点击，鼠标悬浮。 点击左侧的会话，右侧的内容也会随之发生改变。 鼠标放在会话上会弹出删除按钮，点击可以发起删除请求同时...</description>
      <category>ChatGPT</category>
      <pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>本期内容</h2>
<p>详细讲述布局划分，组件抽取，一步步实现下面的结果图。左侧蓝色区域是会话列表，右侧是消息记录。蓝色区域内的一个个小卡片是聊天会话组件，在组件内定义了相关的交互，删除，点击，鼠标悬浮。</p>
<ol>
<li>点击左侧的会话，右侧的内容也会随之发生改变。</li>
<li>鼠标放在会话上会弹出删除按钮，点击可以发起删除请求同时发送事件从会话列表中剔除该会话。</li>
<li>点击新地聊天可以新增会话。</li>
<li>点击右上角的修改按钮可以修改会话名称。</li>
</ol>
<div style="text-align: center;">
  
  <div>图1. 最终结果</div>
</div>
<h2>代码实现</h2>
<h3>1. 搭建聊天面板骨架</h3>
<div style="text-align: center;">
  
  <div>图2. 聊天面板骨架</div>
</div>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 最外层页面于窗口同宽，使聊天面板居中 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-view<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 整个聊天面板 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 左侧的会话列表 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ChatGPT助手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>构建你的AI助手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 右侧的消息记录 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.home-view</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token comment">/* 与窗口同宽 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
    <span class="token comment">/* 水平方向上剧中 */</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

    <span class="token selector">.chat-panel</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 聊天面板flex布局，让会话列表和聊天记录左右展示 */</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token comment">/* 让聊天面板圆润一些 */</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
      <span class="token comment">/* 给一些阴影 */</span>
      <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 20px 20px <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 与上方增加一些间距 */</span>
      <span class="token property">margin-top</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>
      <span class="token comment">/* 左侧聊天会话面板*/</span>
      <span class="token selector">.session-panel</span> <span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>231<span class="token punctuation">,</span> 248<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
        <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.07<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 标题*/</span>
        <span class="token selector">.title</span> <span class="token punctuation">{</span>
          <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
          <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* 描述*/</span>
        <span class="token selector">.description</span> <span class="token punctuation">{</span>
          <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
          <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">/* 右侧消息记录面板*/</span>
      <span class="token selector">.message-panel</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>2. 聊天会话小卡片</h3>
<div style="text-align: center;">
  
  <div>图3. 会话卡片</div>
</div>
聊天会话可以封装成组件，分散首页的代码逻辑。
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>CircleClose<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@element-plus/icons-vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ChatSession<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../typings"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>deleteChatSession<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api/chat-session"</span><span class="token punctuation">;</span>
  <span class="token comment">// active：用来标记当前会话是否处于选中状态</span>
  <span class="token comment">// session：用于展示的会话信息</span>
  <span class="token keyword">const</span> prop <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">active</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span> session<span class="token operator">:</span> ChatSession <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 定义删除事件，当触发删除事件时会向外部发送被删除的会话。</span>
  <span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">[</span>session<span class="token operator">:</span> ChatSession<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 当鼠标放到会话上时，会弹出删除图标，点击删除图标调用删除接口并发送删除事件。</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteSession</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">deleteChatSession</span><span class="token punctuation">(</span><span class="token punctuation">[</span>prop<span class="token punctuation">.</span>session<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送删除事件</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> prop<span class="token punctuation">.</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 如果处于激活状态则增加 active class --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['session-item', active ? 'active' : '']<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 会话的名称 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ session.topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 会话内的消息数量和最近修改的时间 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count-time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        {{ session.messages ? session.messages.length : 0 }}条对话
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ session.updatedAt }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 当鼠标放在会话上时会弹出遮罩 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 当鼠标放在会话上时会弹出删除按钮 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-popconfirm</span>
            <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>是否确认永久删除该聊天会话？<span class="token punctuation">"</span></span>
            <span class="token attr-name">@confirm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDeleteSession<span class="token punctuation">"</span></span>
        <span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#reference</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CircleClose</span><span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-popconfirm</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.session-item</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 加一下padding不要让会话内容靠边界太近 */</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token comment">/* 给边界一些圆角看起来圆润一些 */</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token comment">/* 固定宽度 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>
    <span class="token comment">/* 父相子绝，父元素是相对布局的情况下，子元素的绝对布局是相当于父元素绝对布局。 */</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token comment">/* 当鼠标放在会话上时改变鼠标的样式，暗示用户可以点击。目前还没做拖动的效果，以后会做。 */</span>
    <span class="token property">cursor</span><span class="token punctuation">:</span> grab<span class="token punctuation">;</span>
    <span class="token comment">/* 子元素的遮罩一开始会在外面，让溢出的遮罩不显示 */</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>

    <span class="token selector">.name</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 会话名称字体要大一些 */</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
      <span class="token comment">/* 凸显名称，加粗 */</span>
      <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token comment">/* 加粗后颜色淡一些 */</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.count-time</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 增加一些距离 */</span>
      <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
      <span class="token comment">/* 让字体小一些不能比会话名称要大（14px） */</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 让消息数量和最近更新时间显示水平显示 */</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token comment">/* 让消息数量和最近更新时间分布在水平方向的两端 */</span>
      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 当处于激活状态时增加蓝色描边 */</span>
    <span class="token selector">&amp;.active</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 增加一些过渡 */</span>
      <span class="token property">transition</span><span class="token punctuation">:</span> all 0.12s linear<span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #1d93ab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 当鼠标放在会话上时触发下面的css样式*/</span>
    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 遮罩入场，从最左侧滑进去，渐渐变得不透明 */</span>
      <span class="token selector">.mask</span> <span class="token punctuation">{</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.btn-wrapper</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 暗示用户这个按钮可以点击 */</span>
        <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
          <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* 按钮入场，从最右侧滑进去，渐渐变得不透明 */</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
        <span class="token property">right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.mask</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 渐变样式 */</span>
      <span class="token property">transition</span><span class="token punctuation">:</span> all 0.2s ease-out<span class="token punctuation">;</span>
      <span class="token comment">/* 相当于父亲绝对布局 */</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 和父亲元素一样宽盖住父元素 */</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
      <span class="token comment">/* 和父亲元素一样高 */</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
      <span class="token comment">/*位置移到父元素的最上面 */</span>
      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token comment">/* 向父元素的最左侧再增加一个父亲元素当前宽度的距离 */</span>
      <span class="token property">left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>
      <span class="token comment">/* 透明度为0 */</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 删除按钮样式的逻辑和mask类似 */</span>
    <span class="token selector">.btn-wrapper</span> <span class="token punctuation">{</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">transition</span><span class="token punctuation">:</span> all 0.2s ease-out<span class="token punctuation">;</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
      <span class="token property">right</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>
      <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>

      <span class="token selector">.edit</span> <span class="token punctuation">{</span>
        <span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>3. 侧边会话列表展示和会话创建</h3>
<p>点击会话列表中的会话小卡片会切换当前激活的会话。鼠标放在会话小卡片上会弹出删除按钮。点击新的聊天按钮之后会话列表会新增会话小卡片。</p>

<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>onMounted<span class="token punctuation">,</span> ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ChatSession<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../typings"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>
    findChatSessionById<span class="token punctuation">,</span>
    queryChatSession<span class="token punctuation">,</span>
    saveChatSession<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api/chat-session"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> SessionItem <span class="token keyword">from</span> <span class="token string">"@/views/home/components/SessionItem.vue"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>CirclePlus<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@element-plus/icons-vue"</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> isEdit <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> activeSession <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ChatSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sessionList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> ChatSession<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询自己的聊天会话</span>
    <span class="token function">queryChatSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 讲会话添加到列表中</span>
      sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 默认选中的聊天会话是第一个</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 切换会话</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSessionSwitch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">session</span><span class="token operator">:</span> ChatSession</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    activeSession<span class="token punctuation">.</span>value <span class="token operator">=</span> session<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 从会话列表中删除会话</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteSession</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">session</span><span class="token operator">:</span> ChatSession</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span>id <span class="token operator">===</span> session<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 新增会话</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleCreateSession</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">saveChatSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">topic</span><span class="token operator">:</span> <span class="token string">"新的聊天"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">findChatSessionById</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-view<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 省略... --&gt;</span>

        <span class="token comment">&lt;!-- 会话列表 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token comment">&lt;!-- for循环遍历会话列表用会话组件显示，并监听点击事件和删除事件。点击时切换到被点击的会话，删除时从会话列表中提出被删除的会话。 --&gt;</span>
          <span class="token comment">&lt;!--  --&gt;</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SessionItem</span>
              <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(session, index) in sessionList<span class="token punctuation">"</span></span>
              <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session.id<span class="token punctuation">"</span></span>
              <span class="token attr-name">:active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session.id === activeSession.id<span class="token punctuation">"</span></span>
              <span class="token attr-name">:session</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionList[index]<span class="token punctuation">"</span></span>
              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span>
              <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSessionSwitch(session)<span class="token punctuation">"</span></span>
              <span class="token attr-name">@delete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDeleteSession<span class="token punctuation">"</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SessionItem</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-session<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCreateSession<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon--left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CirclePlus</span><span class="token punctuation">/&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
              新的聊天
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 省略... --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.home-view</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 省略... */</span>
    <span class="token selector">.chat-panel</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 省略... */</span>
      <span class="token selector">.session-panel</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 省略... */</span>
        <span class="token selector">.session-list</span> <span class="token punctuation">{</span>
          <span class="token selector">.session</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 每个会话之间留一些间距 */</span>
            <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.button-wrapper</span> <span class="token punctuation">{</span>
          <span class="token comment">/* session-panel是相对布局，这边的button-wrapper是相对它绝对布局 */</span>
          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
          <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
          <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
          <span class="token comment">/* 让内部的按钮显示在右侧 */</span>
          <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
          <span class="token comment">/* 宽度和session-panel一样宽*/</span>
          <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>

          <span class="token comment">/* 按钮于右侧边界留一些距离 */</span>
          <span class="token selector">.new-session</span> <span class="token punctuation">{</span>
            <span class="token property">margin-right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 省略... */</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>4. 会话编辑</h3>
<p>未编辑状态，点击右侧按钮开始编辑。</p>

<p>编辑状态，可以点击右侧按钮取消编辑。也按回车键确认编辑</p>

<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 省略...</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>CirclePlus<span class="token punctuation">,</span> Close<span class="token punctuation">,</span> EditPen<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@element-plus/icons-vue"</span><span class="token punctuation">;</span>

  <span class="token comment">// 省略...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleUpdateSession</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">saveChatSession</span><span class="token punctuation">(</span>activeSession<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    isEdit<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home-view<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 省略... --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-panel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 会话名称 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>front<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 如果处于编辑状态则显示输入框让用户去修改 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isEdit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token comment">&lt;!-- 按回车代表确认修改 --&gt;</span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
                  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeSession.topic<span class="token punctuation">"</span></span>
                  <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleUpdateSession<span class="token punctuation">"</span></span>
              <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 否则正常显示标题 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ activeSession.topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
              与ChatGPT的{{ activeSession.messages.length }}条对话
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          <span class="token comment">&lt;!-- 尾部的编辑按钮 --&gt;</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rear<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token comment">&lt;!-- 不处于编辑状态显示编辑按钮 --&gt;</span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditPen</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isEdit = true<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!isEdit<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
              <span class="token comment">&lt;!-- 处于编辑状态显示取消编辑按钮 --&gt;</span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Close</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isEdit = false<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Close</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-divider</span> <span class="token attr-name">:border-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>solid'<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.home-view</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 省略... */</span>

    <span class="token selector">.chat-panel</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 省略... */</span>

      <span class="token selector">.message-panel</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 省略... */</span>

        <span class="token selector">.header</span> <span class="token punctuation">{</span>
          <span class="token property">padding</span><span class="token punctuation">:</span> 20px 20px 0 20px<span class="token punctuation">;</span>
          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
          <span class="token comment">/* 会话名称和编辑按钮在水平方向上分布左右两边 */</span>
          <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>

          <span class="token comment">/* 前部的标题和消息条数 */</span>
          <span class="token selector">.front</span> <span class="token punctuation">{</span>
            <span class="token selector">.title</span> <span class="token punctuation">{</span>
              <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token selector">.description</span> <span class="token punctuation">{</span>
              <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
              <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>black<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token comment">/* 尾部的编辑和取消编辑按钮 */</span>
          <span class="token selector">.rear</span> <span class="token punctuation">{</span>
            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://mister-hope.github.io/blog/project/post-letter/springboot/</link>
      <guid>https://mister-hope.github.io/blog/project/post-letter/springboot/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml"></source>
      <description>技术栈 sa-token 权限认证框架 mybati-plus springboot mysql redis rabbitmq 项目运行 环境要求 redis，mysql5.7以上，rabbitmq3.8（需要启动延迟消息插件） 建议rabbitmq通过以下命令安装，不要手动安装 环境配置 1. 修改数据库密码 修改admin/src/main/res...</description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[<h2>技术栈</h2>
<ul>
<li><code>sa-token</code> 权限认证框架</li>
<li><code>mybati-plus</code></li>
<li><code>springboot</code></li>
<li><code>mysql</code></li>
<li><code>redis</code></li>
<li><code>rabbitmq</code></li>
</ul>
<h2>项目运行</h2>
<h3>环境要求</h3>
<p>redis，mysql5.7以上，rabbitmq3.8（需要启动延迟消息插件）</p>
<p>建议rabbitmq通过以下命令安装，不要手动安装</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rabbitmq <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>root <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-v</span> rabbitmq-data:/var/lib/rabbitmq circleci/rabbitmq-delayed:3.8.9-management-38
</code></pre></div><h3>环境配置</h3>
<h4>1. 修改数据库密码</h4>
<p>修改admin/src/main/resources/application-dev.yml</p>
<h4>2. 配置阿里云oss</h4>
<p>修改admin/src/main/resources/application.yml</p>
<p>要改成你自己的阿里云oss<br>
最终格式如下：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">oss</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>beijing.aliyuncs.com
  <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> LTAI5t6DcTaSUFLSX6YwBGxx
  <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> eiUTDvGwCg11GR118njEXjIoSX2fi9
  <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> letter<span class="token punctuation">-</span>post
</code></pre></div><h4>3. 配置微信支付信息和小程序信息</h4>
<p>修改admin/src/main/resources/application-dev.yml</p>
<p>需要在微信支付后台生成的配置信息如下：</p>
<p><code>apiclient_key</code>, <code>apiclient_cert.pem</code>, <code>apiclient_cert.p12</code>,<code>api-key3</code></p>
<p>最终格式如下，</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">wechat</span><span class="token punctuation">:</span>
  <span class="token key atrule">api-key</span><span class="token punctuation">:</span> <span class="token string">""</span>
  <span class="token key atrule">app-id</span><span class="token punctuation">:</span> <span class="token string">"wxe6cas450d2dff083"</span>
  <span class="token key atrule">app-secret</span><span class="token punctuation">:</span> <span class="token string">"69f493f6dec2a6agc5ebh1l37821919d"</span>
  <span class="token key atrule">mch-id</span><span class="token punctuation">:</span> <span class="token string">"1619421445"</span>
  <span class="token key atrule">key-path</span><span class="token punctuation">:</span> <span class="token string">"apiclient_key.pem"</span>
  <span class="token key atrule">cert-path</span><span class="token punctuation">:</span> <span class="token string">"apiclient_cert.pem"</span>
  <span class="token key atrule">cert-p12-path</span><span class="token punctuation">:</span> <span class="token string">"apiclient_cert.p12"</span>
  <span class="token key atrule">api-key3</span><span class="token punctuation">:</span> <span class="token string">"kklcklaxjiijjjkjkjlkjsuhauy4abcd"</span>
  <span class="token key atrule">platform-cert-path</span><span class="token punctuation">:</span> <span class="token string">"wx_cert.pem"</span>
  <span class="token key atrule">notify-url</span><span class="token punctuation">:</span> <span class="token string">"https://www.jarcheng.top/test-api/order/notify"</span>
</code></pre></div><h3>运行步骤</h3>
<ol>
<li>导入doc目录下的sql到mysql</li>
<li>启动redis，mysql，rabbitmq</li>
<li>启动AdminApplication</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://mister-hope.github.io/blog/project/post-letter/uni-app/</link>
      <guid>https://mister-hope.github.io/blog/project/post-letter/uni-app/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml"></source>
      <description>技术栈 vue2 uni-app typescript 运行步骤 1. 安装依赖包 出现提示按 enter 等待下载完成 2. 修改 appid 在 manifest.json 中修改 mp-wexin-&amp;gt; appId 3. 运行到微信小程序 运行下面这个命令 然后会生成 dist 文件夹，在微信开发者工具打开导入 dist/dev/mp-weixin </description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[<h2>技术栈</h2>
<ul>
<li><code>vue2</code></li>
<li><code>uni-app</code></li>
<li><code>typescript</code></li>
</ul>
<h2>运行步骤</h2>
<h3>1. 安装依赖包</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">install</span>
</code></pre></div><p>出现提示按 enter 等待下载完成</p>
<h3>2. 修改 appid</h3>
<p>在 manifest.json 中修改 mp-wexin-&gt; appId</p>
<h3>3. 运行到微信小程序</h3>
<p>运行下面这个命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dev:mp-weixin
</code></pre></div><p>然后会生成 dist 文件夹，在微信开发者工具打开导入</p>
<p><code>dist/dev/mp-weixin</code></p>
<figure><figcaption></figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://mister-hope.github.io/blog/project/post-letter/vue3/</link>
      <guid>https://mister-hope.github.io/blog/project/post-letter/vue3/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml"></source>
      <description>技术栈 vue3 element-ui typescript vuex router 运行项目 管理员账号 admin，123456 环境配置 1.修改阿里云oss 修改 src\utils\oss.ts 2.安装node16 运行 </description>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
      <content:encoded><![CDATA[<h2>技术栈</h2>
<ul>
<li><code>vue3</code></li>
<li><code>element-ui</code></li>
<li><code>typescript</code></li>
<li><code>vuex</code></li>
<li><code>router</code></li>
</ul>
<h2>运行项目</h2>
<p>管理员账号 admin，123456</p>
<h3>环境配置</h3>
<h4>1.修改阿里云oss</h4>
<p>修改 src\utils\oss.ts</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> OSSParams <span class="token operator">=</span> <span class="token punctuation">{</span>
    region<span class="token operator">:</span> <span class="token string">'oss-cn-beijing'</span><span class="token punctuation">,</span>
    accessKeyId<span class="token operator">:</span> <span class="token string">'LTAI5t6DcTaSUFLSX6YwBGxx'</span><span class="token punctuation">,</span>
    accessKeySecret<span class="token operator">:</span> <span class="token string">'eiUTDvGwCg11GR118njEXjIoSX2fi9'</span><span class="token punctuation">,</span>
    bucket<span class="token operator">:</span> <span class="token string">'letter-post'</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>2.安装node16</h4>
<h3>运行</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">install</span>
</code></pre></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> serve
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>地址</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/address/</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/address/</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址</source>
      <pubDate>Sun, 04 Feb 2024 11:55:25 GMT</pubDate>
    </item>
    <item>
      <title>地址列表</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/address/address-list.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/address/address-list.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址列表</source>
      <description>地址列表 地址列表页面地址列表页面 后端 建表 实体类 生成代码 请参照 用户地址查询/设置默认地址 小程序端 地址展示 相关信息 地址删除和编辑跳转 新增地址跳转 地址复制和默认 </description>
      <category>起凡商城</category>
      <pubDate>Thu, 25 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>地址列表页面</figcaption></figure>
<h2>后端</h2>
<h3>建表</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- auto-generated definition</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> address
<span class="token punctuation">(</span>
    id           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span>
        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    created_time <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    edited_time  <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    creator_id   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    editor_id    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    latitude     <span class="token keyword">double</span>       <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    longitude    <span class="token keyword">double</span>       <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    address      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    province     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    city         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    district     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    phone_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    real_name    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">top</span>          <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    details      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>实体类</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@GenEntity</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Address</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"维度"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span><span class="token constant">INPUT_NUMBER</span><span class="token punctuation">)</span>
  <span class="token keyword">double</span> <span class="token function">latitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"经度"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span><span class="token constant">INPUT_NUMBER</span><span class="token punctuation">)</span>
  <span class="token keyword">double</span> <span class="token function">longitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"地址信息"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"地址详情"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"省份"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">province</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"城市"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">city</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"区县"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">district</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"电话"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">phoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">realName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@GenField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否置顶"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">)</span>
  <span class="token keyword">boolean</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>生成代码</h3>
<p>请参照<a href="/blog/project/qifan-mall/start/develop.html" target="_blank">开发流程</a></p>
<h3>用户地址查询/设置默认地址</h3>

<h2>小程序端</h2>
<h3>地址展示</h3>

<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p><a href="/blog/project/qifan-mall/reference/mp/address-row.html" target="_blank">地址详情展示组件(address-row)</a></p>
</div>
<h3>地址删除和编辑跳转</h3>

<h3>新增地址跳转</h3>

<h3>地址复制和默认</h3>

]]></content:encoded>
    </item>
    <item>
      <title>地址保存</title>
      <link>https://mister-hope.github.io/blog/project/qifan-mall/address/address-save.html</link>
      <guid>https://mister-hope.github.io/blog/project/qifan-mall/address/address-save.html</guid>
      <source url="https://mister-hope.github.io/blog/rss.xml">地址保存</source>
      <description>地址保存 地址保存页面地址保存页面 腾讯地图插件配置 相关信息 请参照腾讯地图小程序插件接入指南 源码解析 地图标点 :markers=&amp;quot;[marker]&amp;quot;：传入一个包含单个标记（marker）的数组，代表地图上的某个特定地点标记。 地址表单 地图选点 提交表单/回显表单 </description>
      <category>起凡商城</category>
      <pubDate>Thu, 25 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><figcaption>地址保存页面</figcaption></figure>
<h2>腾讯地图插件配置</h2>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre ts="" class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  pages<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>
    <span class="token string">"pages/user/index"</span><span class="token punctuation">,</span>
    <span class="token string">"pages/address/address-list"</span><span class="token punctuation">,</span>
    <span class="token string">"pages/address/address-save"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 忽略...</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">{</span>
    chooseLocation<span class="token operator">:</span> <span class="token punctuation">{</span>
      version<span class="token operator">:</span> <span class="token string">"1.0.10"</span><span class="token punctuation">,</span>
      provider<span class="token operator">:</span> <span class="token string">"wx76a9a06e5b4e693e"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  permission<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">"scope.userLocation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      desc<span class="token operator">:</span> <span class="token string">"你的位置将用于确认收货地址"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  requiredPrivateInfos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"getLocation"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>请参照<a href="https://lbs.qq.com/miniProgram/plugin/pluginGuide/locationPicker" target="_blank" rel="noopener noreferrer">腾讯地图小程序插件接入指南</a></p>
</div>
<h2>源码解析</h2>
<h3>地图标点</h3>
<ul>
<li><code>:markers="[marker]"</code>：传入一个包含单个标记（marker）的数组，代表地图上的某个特定地点标记。</li>
</ul>

<h3>地址表单</h3>

<h3>地图选点</h3>

<h3>提交表单/回显表单</h3>

]]></content:encoded>
    </item>
  </channel>
</rss>