import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,d as n,e as s,b as t,w as e,a as l}from"./app-8K2j9FKU.js";const u={},d=n("h1",{id:"向量数据库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#向量数据库"},[n("span",null,"向量数据库")])],-1),r=n("p",null,"向量数据库是AI记忆的核心组件，AI记忆除了历史的对话信息之外就是向量数据库中存储文档了，也就是大家常说的知识库。本节内容介绍如何向量数据库中存储文档和检索文档。为接下来的知识库(RAG)搭建做铺垫",-1),k=n("h2",{id:"基础模型的接入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础模型的接入"},[n("span",null,"基础模型的接入")])],-1),m=n("br",null,null,-1),v=n("br",null,null,-1),b=l(`<p>kimi和星火目前不支持文档嵌入。</p><h2 id="安装redisstack" tabindex="-1"><a class="header-anchor" href="#安装redisstack"><span>安装RedisStack</span></a></h2><p>需要先禁用掉自己原本的redis，防止端口冲突。访问<code>localhost:8001</code>查看数据库的信息。用户名：<code>default</code>,密码：<code>123456</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-stack <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  <span class="token parameter variable">-v</span> redis-data:/data <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token parameter variable">-e</span> <span class="token assign-left variable">REDIS_ARGS</span><span class="token operator">=</span><span class="token string">&quot;--requirepass 123456&quot;</span> redis/redis-stack:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h2><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-redis-store<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置连接" tabindex="-1"><a class="header-anchor" href="#配置连接"><span>配置连接</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
        <span class="token key atrule">pool</span><span class="token punctuation">:</span>
          <span class="token comment"># 连接池最大连接数</span>
          <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>
          <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
          <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
          <span class="token comment"># 连接池中的最大空闲连接</span>
          <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
          <span class="token comment"># 连接池中的最小空闲连接</span>
          <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token key atrule">repositories</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置向量数据库" tabindex="-1"><a class="header-anchor" href="#配置向量数据库"><span>配置向量数据库</span></a></h2><p>如果你的项目里面有用到redis，需要先禁用<code>RedisVectorStoreAutoConfiguration</code>。这是SpringAI自动配置RedisStack的向量数据库连接，会导致Redis的连接配置冲突。</p><p><code>VectorStore</code>对象需要提供<code>EmbeddingModel</code>，这个案例提供的是阿里灵积的<code>EmbeddingModel</code>。可以切换换成其他厂家的EmbeddingModel。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 禁用SpringAI提供的RedisStack向量数据库的自动配置，会和Redis的配置冲突。</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RedisVectorStoreAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 读取RedisStack的配置信息</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RedisVectorStoreProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisVectorConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 创建RedisStack向量数据库
     *
     * <span class="token keyword">@param</span> <span class="token parameter">embeddingModel</span> 嵌入模型
     * <span class="token keyword">@param</span> <span class="token parameter">properties</span>     redis-stack的配置信息
     * <span class="token keyword">@return</span> vectorStore 向量数据库
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">VectorStore</span> <span class="token function">vectorStore</span><span class="token punctuation">(</span><span class="token class-name">DashScopeAiEmbeddingModel</span> embeddingModel<span class="token punctuation">,</span>
                                   <span class="token class-name">RedisVectorStoreProperties</span> properties<span class="token punctuation">,</span>
                                   <span class="token class-name">RedisConnectionDetails</span> redisConnectionDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisVectorStore<span class="token punctuation">.</span>RedisVectorStoreConfig</span> config <span class="token operator">=</span> <span class="token class-name">RedisVectorStore<span class="token punctuation">.</span>RedisVectorStoreConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIndexName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPrefix</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisVectorStore</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> embeddingModel<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">JedisPooled</span><span class="token punctuation">(</span>redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getStandalone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getStandalone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">,</span> redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        redisConnectionDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                properties<span class="token punctuation">.</span><span class="token function">isInitializeSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文档嵌入" tabindex="-1"><a class="header-anchor" href="#文档嵌入"><span>文档嵌入</span></a></h2><p>在上面的<code>VectorStore</code>配置中我们提供了<code>DashScopeAiEmbeddingModel</code>，调用<code>vectorStore.add(splitDocuments)</code>底层会把文档给<code>DashScopeAiEmbeddingModel</code>把文本变成向量然后再存入向量数据库。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
     * 嵌入文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">file</span> 待嵌入的文件
     * <span class="token keyword">@return</span> 是否成功
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;embedding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">embedding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存入向量数据库，这个过程会自动调用embeddingModel,将文本变成向量再存入。</span>
        vectorStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>splitDocuments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文档查询" tabindex="-1"><a class="header-anchor" href="#文档查询"><span>文档查询</span></a></h2><p>调用<code>vectorStore.similaritySearch(query)</code>时同样会先把用户的提问给<code>EmbeddingModel</code>，将提问变成向量，然后与向量数据库中的文档向量进行相似度计算（cosine值）。</p><p>要注意：此时向量数据库不会回答用户的提问。要回答用户的提问请参考后面的<code>RAG</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * 查询向量数据库
     *
     * <span class="token keyword">@param</span> <span class="token parameter">query</span> 用户的提问
     * <span class="token keyword">@return</span> 匹配到的文档
     */</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> vectorStore<span class="token punctuation">.</span><span class="token function">similaritySearch</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function g(h,f){const a=o("RouterLink");return c(),i("div",null,[d,r,k,n("p",null,[s("本案例使用的是阿里的灵积AI服务请参考"),t(a,{to:"/project/spring-ai/config/dash-scope.html"},{default:e(()=>[s("灵积接入")]),_:1}),s("。")]),n("p",null,[s("其他AI厂商接入方式请参考下面的链接："),m,t(a,{to:"/project/spring-ai/config/qian-fan.html"},{default:e(()=>[s("百度千帆")]),_:1}),v,t(a,{to:"/project/spring-ai/config/zhi-pu.html"},{default:e(()=>[s("智谱清言")]),_:1})]),b])}const w=p(u,[["render",g],["__file","vector-database.html.vue"]]);export{w as default};
