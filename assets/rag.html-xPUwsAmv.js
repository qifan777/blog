import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c as p,d as n,e as s,b as c,w as i,a as l}from"./app-SySdZ7h1.js";const u={},r=n("h1",{id:"rag-检索增强生成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rag-检索增强生成"},[n("span",null,"RAG(检索增强生成)")])],-1),d=n("p",null,"要搭建自己的知识库除了文档嵌入到向量数据库之外，就是RAG了。当用户提问的时候先从想来数据库搜索相关的资料，再把相关的资料拼接到用户的提问中，再让模型生成答案。",-1),k=n("h2",{id:"文档嵌入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文档嵌入"},[n("span",null,"文档嵌入")])],-1),v=l(`<h2 id="questionansweradvisor" tabindex="-1"><a class="header-anchor" href="#questionansweradvisor"><span>QuestionAnswerAdvisor</span></a></h2><p><code>QuestionAnswerAdvisor</code>可以在用户发起的提问时，先向数据库查询相关的文档，再把相关的文档拼接到用户的提问中，再让模型生成答案。那就是<code>RAG</code>的实现了。</p><p><code>RAG</code>的实现过程：</p><ol><li><code>query</code> = 用户的提问；<code>template</code> = 提示词模板</li><li><code>QuestionAnswerAdvisor</code>会在运行时替换模板中的占位符<code>question_answer_context</code>，替换成向量数据库中查询到的文档，即<code>context=template.replace(&quot;question_answer_context&quot;,查询到的文档)</code>。此时的<code>contextQuery</code>=<code>query</code>+<code>context</code>;</li><li><code>contextQuery</code>发送给大模型得到答案</li></ol><p>正常的提问过程是<code>query</code>=用户的提问;<code>query</code>发送给大模型得到答案。<br> 对比<code>RAG</code>的提问过程可以发现多了提示词模板和向量数据库查询的过程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 从向量数据库中查找文档，并将查询的文档作为上下文回答。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户的提问
     * <span class="token keyword">@return</span> SSE流响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;chat/stream/database&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithDatabase</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 定义提示词模板，question_answer_context会被替换成向量数据库中查询到的文档。</span>
        <span class="token class-name">String</span> promptWithContext <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
                下面是上下文信息
                ---------------------
                {question_answer_context}
                ---------------------
                给定的上下文和提供的历史信息，而不是事先的知识，回复用户的意见。如果答案不在上下文中，告诉用户你不能回答这个问题。
                &quot;&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
                <span class="token comment">// 2. QuestionAnswerAdvisor会在运行时替换模板中的占位符\`question_answer_context\`，替换成向量数据库中查询到的文档。此时的query=用户的提问+替换完的提示词模板;</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QuestionAnswerAdvisor</span><span class="token punctuation">(</span>vectorStore<span class="token punctuation">,</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> promptWithContext<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 3. query发送给大模型得到答案</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function m(b,_){const a=e("RouterLink");return o(),p("div",null,[r,d,k,n("p",null,[s("请参考"),c(a,{to:"/project/spring-ai/vector-database.html#%E6%96%87%E6%A1%A3%E5%B5%8C%E5%85%A5"},{default:i(()=>[s("文档嵌入")]),_:1}),s("，向数据库中插入一些自己的文档。")]),v])}const f=t(u,[["render",m],["__file","rag.html.vue"]]);export{f as default};
