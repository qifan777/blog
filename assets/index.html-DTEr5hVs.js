import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,a as s}from"./app-DBzXIwFd.js";const t={},o=s(`<h1 id="api-controller层" tabindex="-1"><a class="header-anchor" href="#api-controller层"><span>API(Controller层)</span></a></h1><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>@Controller</span></a></h2><p>在SpringMVC中 Controller层可以提供WEB服务，返回视图结果（ViewResult）、JSON、重定向等，通常用来渲染完整的HTML页面或者片段。</p><h2 id="restcontroller" tabindex="-1"><a class="header-anchor" href="#restcontroller"><span>@RestController</span></a></h2><p>针对专门提供JSON的WEB服务，可以使用SpringMVC提供的RESTful风格的Controller即@RestController，也就是人们常说的API。</p><h2 id="requestmapping-getmapping-postmapping-putmapping-deletemapping等" tabindex="-1"><a class="header-anchor" href="#requestmapping-getmapping-postmapping-putmapping-deletemapping等"><span>@RequestMapping(GetMapping/PostMapping/PutMapping/DeleteMapping等)</span></a></h2><p>既可以应用在类级别也可以应用在方法级别</p><ul><li>在类级别上代表的是所有方法的路径都加上前缀。</li><li>在方法级别上用于映射HTTP请求到相应的处理方法上。</li><li>可以指定请求的路径、HTTP方法（GET, POST等）、以及请求参数约束等。</li></ul><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam"><span>@RequestParam</span></a></h2><p><code>@RequestParam</code> 注解在 Spring MVC 及 Spring Boot 应用程序中主要用于从不同的HTTP请求方法（GET、POST等）的请求参数中获取参数值。具体来说，它可以：</p><ol><li><p><strong>从URL查询字符串</strong> 中获取参数，对于GET请求尤其常见，例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>GET /api/users?name=John&amp;age=30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在后端控制器方法中可以通过 <code>@RequestParam(&quot;name&quot;) String name</code> 来获取 &quot;John&quot;。</p></li><li><p><strong>从POST表单数据</strong> 中获取参数，特别是当Content-Type设置为<code>application/x-www-form-urlencoded</code>时：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>POST /api/users
Content-Type: application/x-www-form-urlencoded
name=John&amp;age=30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于 <code>multipart/form-data</code> 类型的请求，虽然通常用于文件上传，但也包含非文件字段，这些字段也可以通过 <code>@RequestParam</code> 获取。</p></li></ol><p>因此，<code>@RequestParam</code> 主要作用于标准HTTP请求中的查询字符串或编码为 <code>x-www-form-urlencoded</code> 格式的请求主体内容。而对于JSON或者其他复杂格式的数据，通常需要使用 <code>@RequestBody</code> 注解来处理。</p><h2 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody"><span>@RequestBody</span></a></h2><p>Spring会利用HttpMessageConverter接口实现类（如MappingJackson2HttpMessageConverter）将HTTP请求体中的JSON或XML数据转换为Java对象，并将其注入到标记了@RequestBody的方法参数中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将HTTP请求体中的JSON或XML数据反序列化为User对象</span>
    <span class="token comment">// 然后在此处对User对象进行业务逻辑处理...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validate-和-valid" tabindex="-1"><a class="header-anchor" href="#validate-和-valid"><span>@Validate 和 @Valid</span></a></h2>`,16),p=[o];function i(r,l){return a(),n("div",null,p)}const u=e(t,[["render",i],["__file","index.html.vue"]]);export{u as default};
