const n=JSON.parse(`{"key":"v-80ef2c12","path":"/project/spring-ai/graph/graph-rag.html","title":"GraphRag案例","lang":"zh-CN","frontmatter":{"order":6,"description":"GraphRag案例 Chunk RAG 为了防止大模型的context过大，我们一般会把原始的文本切割成小块然后嵌入到向量数据库中。当用户提问的时候就去向量数据库中查询相关的Chunk，这样就可以只取出原始文本的一小部分作为上下文信息给AI。 这样也会产生一个弊端，就是原始文本的结构丢失了，比如有些信息在这个Chunk的上面或者下面，但是被切割了导致...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/project/spring-ai/graph/graph-rag.html"}],["meta",{"property":"og:site_name","content":"起凡Code闲聊"}],["meta",{"property":"og:title","content":"GraphRag案例"}],["meta",{"property":"og:description","content":"GraphRag案例 Chunk RAG 为了防止大模型的context过大，我们一般会把原始的文本切割成小块然后嵌入到向量数据库中。当用户提问的时候就去向量数据库中查询相关的Chunk，这样就可以只取出原始文本的一小部分作为上下文信息给AI。 这样也会产生一个弊端，就是原始文本的结构丢失了，比如有些信息在这个Chunk的上面或者下面，但是被切割了导致..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T14:30:19.000Z"}],["meta",{"property":"article:author","content":"起凡"}],["meta",{"property":"article:modified_time","content":"2024-07-18T14:30:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GraphRag案例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-18T14:30:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"起凡\\",\\"url\\":\\"https://www.jarcheng.top\\"}]}"]]},"headers":[{"level":2,"title":"Chunk RAG","slug":"chunk-rag","link":"#chunk-rag","children":[{"level":3,"title":"关联上下游Chunk Cypher","slug":"关联上下游chunk-cypher","link":"#关联上下游chunk-cypher","children":[]},{"level":3,"title":"Chunk RAG实现","slug":"chunk-rag实现","link":"#chunk-rag实现","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"投资方（Manager） RAG","slug":"投资方-manager-rag","link":"#投资方-manager-rag","children":[{"level":3,"title":"关联投资方Cypher","slug":"关联投资方cypher","link":"#关联投资方cypher","children":[]},{"level":3,"title":"Manager RAG实现","slug":"manager-rag实现","link":"#manager-rag实现","children":[]},{"level":3,"title":"测试","slug":"测试-1","link":"#测试-1","children":[]}]}],"git":{"createdTime":1721286856000,"updatedTime":1721313019000,"contributors":[{"name":"linjiacheng","email":"1507906763@qq.com","commits":4}]},"readingTime":{"minutes":5.62,"words":1686},"filePathRelative":"project/spring-ai/graph/graph-rag.md","localizedDate":"2024年7月18日","excerpt":"\\n<h2>Chunk RAG</h2>\\n<p>为了防止大模型的context过大，我们一般会把原始的文本切割成小块然后嵌入到向量数据库中。当用户提问的时候就去向量数据库中查询相关的Chunk，这样就可以只取出原始文本的一小部分作为上下文信息给AI。</p>\\n<p>这样也会产生一个弊端，就是原始文本的结构丢失了，比如有些信息在这个Chunk的上面或者下面，但是被切割了导致信息丢失。下面我们借助图数据库的关系查询能力将Chunk结合上下游还原文本。</p>\\n<h3>关联上下游Chunk Cypher</h3>\\n<div class=\\"language-cypher\\" data-ext=\\"cypher\\" data-title=\\"cypher\\"><pre class=\\"language-cypher\\"><code><span class=\\"token keyword\\">CALL</span> db<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">index</span><span class=\\"token punctuation\\">.</span>vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queryNodes</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'form_10k_chunks'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token variable\\">$embedding</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">yield</span> <span class=\\"token keyword\\">node</span><span class=\\"token punctuation\\">,</span> score\\n<span class=\\"token keyword\\">match</span> window<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">:</span><span class=\\"token class-name\\">Chunk</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span><span class=\\"token relationship property\\">NEXT</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">..</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">node</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span><span class=\\"token relationship property\\">NEXT</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">..</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">:</span><span class=\\"token class-name\\">Chunk</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">with</span> <span class=\\"token function\\">nodes</span><span class=\\"token punctuation\\">(</span>window<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> chunkList<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">node</span><span class=\\"token punctuation\\">,</span> score\\n<span class=\\"token keyword\\">unwind</span> chunkList <span class=\\"token keyword\\">as</span> chunkRows\\n<span class=\\"token keyword\\">with</span> <span class=\\"token function\\">collect</span><span class=\\"token punctuation\\">(</span>chunkRows<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> textList<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">node</span><span class=\\"token punctuation\\">,</span> score\\n<span class=\\"token keyword\\">return</span> apoc<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">join</span><span class=\\"token punctuation\\">(</span>textList<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\" \\\\n \\"</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{n as data};
