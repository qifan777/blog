import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as i,c as u,d as n,e as s,b as a,w as p,a as t}from"./app-2Uyej-67.js";const r={},d=n("h1",{id:"functioncall",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#functioncall"},[n("span",null,"FunctionCall")])],-1),k=n("p",null,[s("本节的内容是：编写文档解析函数来学习"),n("code",null,"SpringAi"),s("风格的"),n("code",null,"Function Call")],-1),m=n("p",null,"我们知道 AI 的能力是文本生成，但是遇到一些复杂的需求时如何让 ai 可以回答出用户的提问。比如我想让 ai 读取本地的某个文件然后回答文件里面的内容，那读取文件这个操作 ai 明显不会。因此我们可以编写函数来拓展 ai 的能力。",-1),v=n("h2",{id:"结构描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结构描述"},[n("span",null,"结构描述")])],-1),b=n("p",null,"下面是一个简单的函数描述，把我们代码里面已有的函数转化成这种格式的描述。这样 ai 就可以知道什么时候去调用函数，以及调用函数时需要填哪些参数。",-1),h={href:"https://json-schema.org/understanding-json-schema/",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;function&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;documentAnalyzerFunction&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;文档解析函数&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;parameters&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;需要解析的文档路径&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;required&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写函数" tabindex="-1"><a class="header-anchor" href="#编写函数"><span>编写函数</span></a></h2><p>引入依赖，用于读取本地的文档</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写函数的步骤</p>`,5),f=n("li",null,"定义函数的入参和返回结果",-1),_=n("li",null,[s("实现"),n("code",null,"java.util.function.Function"),s("表示它的一个可以被AI调用的函数")],-1),q=n("a",{href:"#function-call"},"function call",-1),y=t("<li><code>function.name</code>：<code>@Service</code>将该类注册为 spring bean，bean的名字会作为函数的名称。</li><li><code>function.description</code>: <code>@Description</code>可以描述函数的用途</li><li><code>function.parameters.properties.xxx</code>: <code>@JsonProperty</code>描述参数的属性名称</li><li><code>function.parameters.required</code>: <code>@JsonProperty</code>是否必填</li><li><code>function.parameters.properties.xxx.description</code>: <code>@JsonPropertyDescription</code>描述参数的作用</li>",5),x=n("code",null,"function.parameters.properties.xxx.type",-1),w={href:"https://json-schema.org/understanding-json-schema/reference/type",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"string",-1),j=n("code",null,"Integer",-1),A=n("code",null,"List",-1),R=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 通过@Description描述函数的用途，这样ai在多个函数中可以根据描述进行选择。
 */</span>
<span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">&quot;文档解析函数&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocumentAnalyzerFunction</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DocumentAnalyzerFunction<span class="token punctuation">.</span>Request</span><span class="token punctuation">,</span> <span class="token class-name">DocumentAnalyzerFunction<span class="token punctuation">.</span>Response</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 通过@JsonProperty声明属性名称和是否必填
     * 通过@JsonPropertyDescription描述属性的用途，这样ai可以提取出符合参数描述的内容。
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;需要解析的文档路径&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> path<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ai解析用户的提问得到path参数，使用tika读取本地文件获取内容。把读取到的内容再返回给ai作为上下文去回答用户的问题。</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用函数" tabindex="-1"><a class="header-anchor" href="#使用函数"><span>使用函数</span></a></h2>`,2),D=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),I=n("code",null,"function call",-1),C=n("br",null,null,-1),E=n("br",null,null,-1),F=n("br",null,null,-1),J=n("br",null,null,-1),N=n("code",null,"function call",-1),T=t(`<p>在实际的开发中可以接收多个函数，通过<code>functions</code>参数传入。然后ai会根据提问从这些函数中选择一个执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 调用自定义函数回答用户的提问
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span>       用户的提问
     * <span class="token keyword">@param</span> <span class="token parameter">functionName</span> 函数名称（bean的名称，类名小写）
     * <span class="token keyword">@return</span> SSE流式响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;chat/stream/function&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithFunction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> functionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>kimiAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// spring ai会从已注册为bean的function中查找函数，将它添加到请求中。如果成功触发就会调用函数</span>
                <span class="token punctuation">.</span><span class="token function">functions</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求调用实例：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>GET http://localhost:9902/message/chat/stream/function?prompt=D:\\简历.pdf，这份简历的亮点是什么？&amp;functionName=documentAnalyzerFunction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function M(P,z){const o=c("ExternalLinkIcon"),e=c("RouterLink");return i(),u("div",null,[d,k,m,v,b,n("p",null,[s("更加详细的结构请参考"),n("a",h,[s("JSON Scheme reference"),a(o)])]),g,n("ol",null,[f,_,n("li",null,[s("描述函数，SpringAi会自动将下面的Java注解转换成"),q,s("格式的描述 "),n("ul",null,[y,n("li",null,[x,s(": String类型会自动生成"),n("a",w,[s("JSON Scheme reference"),a(o)]),s("下的"),S,s("类型，其他的"),j,s(","),A,s("等类型也一样。")])])])]),R,n("p",null,[s("注入AI模型基座，可以切换不同的AI厂商模型。本案例使用的是阿里的灵积AI服务请参考"),a(e,{to:"/project/config/dash-scope.html"},{default:p(()=>[s("灵积接入")]),_:1}),s("。")]),D,n("p",null,[s("具体哪些模型可以支持"),I,s("请阅读各个AI厂商的文档。其他AI厂商接入方式请参考下面的链接："),C,a(e,{to:"/project/config/qian-fan.html"},{default:p(()=>[s("百度千帆")]),_:1}),E,a(e,{to:"/project/config/zhi-pu.html"},{default:p(()=>[s("智谱清言")]),_:1}),F,a(e,{to:"/project/config/kimi.html"},{default:p(()=>[s("kimi")]),_:1}),J,s(" 星火模型目前还未适配"),N,s("功能。")]),T])}const B=l(r,[["render",M],["__file","function-call.html.vue"]]);export{B as default};
