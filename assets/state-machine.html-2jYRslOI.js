import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as p,d as c,e as n,b as o,w as l,a as i}from"./app-U26bgBfD.js";const u={},k=i(`<h1 id="订单状态机" tabindex="-1"><a class="header-anchor" href="#订单状态机"><span>订单状态机</span></a></h1><p>订单有待支付/待发货/待收货/待评价/已完成/已关闭/退款中等状态，每个状态下的操作结果都不一样。<br> 比如待支付状态下取消订单不需要退款，而待发货状态下取消订单需要退款。待收货时就不能取消订单，需要走退款流程。<br> 因此状态机就是为了实现，不同的状态下操作不一样，同样的操作在不同的状态下执行不同的逻辑。</p><h2 id="上下文对象" tabindex="-1"><a class="header-anchor" href="#上下文对象"><span>上下文对象</span></a></h2><p>每个处理器的上下文，可以是任意对象，比如订单id，支付详情，创建订单表单等等。因此<code>StateContext</code>中的<code>context</code>是泛型<code>C</code>。除此之外还有固定的操作事件对象，用于寻找对应的订单处理器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 订单操作事件
   */</span>
  <span class="token keyword">private</span> <span class="token class-name">StateEvent</span> stateEvent<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 业务可定义的上下文泛型对象
   */</span>
  <span class="token keyword">private</span> <span class="token class-name">C</span> context<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">StateContext</span><span class="token punctuation">(</span><span class="token class-name">StateEvent</span> stateEvent<span class="token punctuation">,</span> <span class="token class-name">C</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stateEvent <span class="token operator">=</span> stateEvent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 订单状态迁移事件
   */</span>
  <span class="token annotation punctuation">@Data</span>
  <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Builder</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StateEvent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 订单状态
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderState<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 触发事件
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> eventType<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 业务编码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> businessCode<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 业务场景
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sceneId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="订单处理器" tabindex="-1"><a class="header-anchor" href="#订单处理器"><span>订单处理器</span></a></h2><h3 id="处理器接口" tabindex="-1"><a class="header-anchor" href="#处理器接口"><span>处理器接口</span></a></h3><p>订单状态处理器接受一个上下文，返回处理结果。</p><ol><li><strong>泛型参数：</strong><ul><li><code>T</code>: 表示处理器执行的操作返回的数据类型。</li><li><code>C</code>: 表示处理器接受数据的类型。</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="细化处理步骤" tabindex="-1"><a class="header-anchor" href="#细化处理步骤"><span>细化处理步骤</span></a></h3><p>上面的处理器接口只是定义了逻辑入口，我们可以使用模板模式在内部将action细化为<code>prepare</code>, <code>check</code>, <code>getNextState</code>, <code>action</code>, <code>save</code>, <code>after</code>.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StateActionStep</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 准备数据
   */</span>
  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 校验
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 获取当前状态处理器处理完毕后，所处于的下一个状态
   */</span>
  <span class="token class-name">String</span> <span class="token function">getNextState</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态动作方法，主要状态迁移逻辑
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态数据持久化
   */</span>
  <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextState<span class="token punctuation">,</span> <span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 状态迁移成功，持久化后执行的后续处理
   */</span>
  <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象处理器模板模式编排步骤" tabindex="-1"><a class="header-anchor" href="#抽象处理器模板模式编排步骤"><span>抽象处理器模板模式编排步骤</span></a></h3><p>抽象的订单状态处理器类 <code>AbstractStateProcessor</code>，实现了 <code>StateActionStep</code> 和 <code>StateProcessor</code> 接口，并提供了一个模板方法 <code>action</code>。</p><ol><li><p><strong>泛型参数：</strong></p><ul><li><code>T</code>: 表示处理器执行的操作返回的数据类型。</li><li><code>C</code>: 表示处理器接受数据的类型。</li></ul></li><li><p><strong><code>@SneakyThrows</code> 注解：</strong></p><ul><li>这是 Lombok 提供的注解，它可以自动处理 checked exceptions，减少了代码中异常处理的冗余。但要注意，它会将 checked exception 转换为 unchecked exception，因此需要谨慎使用。</li></ul></li><li><p><strong>模板方法 <code>action</code>：</strong></p><ul><li>这是一个具体的订单状态处理逻辑的模板方法。它按照一定的顺序调用了 <code>prepare</code>、<code>check</code>、<code>getNextState</code>、<code>action</code>、<code>save</code> 和 <code>after</code> 方法，以完成订单状态的处理过程。</li><li>在 <code>prepare</code> 方法中准备数据，<code>check</code> 方法中进行校验，<code>getNextState</code> 获取下一个状态，<code>action</code> 执行具体业务逻辑，<code>save</code> 进行持久化，最后调用 <code>after</code> 完成处理后的操作。</li><li>在每个步骤中，如果有错误发生，会立即返回错误结果，中止后续步骤的执行。</li></ul></li><li><p><strong>方法调用顺序：</strong></p><ul><li>调用顺序是 <code>prepare</code> -&gt; <code>check</code> -&gt; <code>getNextState</code> -&gt; <code>action</code> -&gt; <code>save</code> -&gt; <code>after</code>。</li><li>这个顺序保证了在执行业务逻辑前进行了数据准备和校验，并在最后进行了持久化和后续处理。</li></ul></li><li><p><strong>异常处理：</strong></p><ul><li>使用了 <code>@SneakyThrows</code> 注解，对异常进行了简化处理，将 checked 异常转换为 unchecked 异常。在实际应用中需要确保异常处理的正确性和可维护性。</li></ul></li></ol><p>这个抽象类提供了一个通用的订单状态处理模板，具体的订单状态处理器只需要继承这个抽象类并实现相应的方法即可，方便了订单状态机的扩展和定制。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">StateActionStep</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">OrderStateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">// 数据准备</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 串行校验器</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// getNextState不能在prepare前，因为有的nextState是根据prepare中的数据转换而来</span>
        <span class="token class-name">String</span> nextState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextState</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 业务逻辑</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 持久化</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// after</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理器注解" tabindex="-1"><a class="header-anchor" href="#处理器注解"><span>处理器注解</span></a></h3><p>在处理器上添加<code>@OrderStateProcessor</code>代表该处理器处理的状态+事件+（场景和业务）。默认情况业务和场景是<code>*</code>的，表示所有场景和业务都处理。</p><p>例如：<code>@OrderStateProcessor(state = &quot;TO_BE_PAID&quot;, event = &quot;PREPAY&quot;, sceneId = &quot;WE_CHAT_PAY&quot;)</code>处理的是待支付状态下的订单，预支付事件，场景是微信支付。通过这种方式可以细力度区分各种状态和事件还要场景。体现了单一职责的设计原理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 状态机引擎的处理器注解标识
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">OrderStateProcessor</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 指定状态
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 业务
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bizCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 场景
   */</span>
  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 事件
   */</span>
  <span class="token class-name">String</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在<code>OrderStateProcessor</code>上添加 <code>@Component</code>，使得被<code>@OrderStateProcessor</code>标记的处理器会被识别为<code>bean</code>。</p></div><h2 id="处理器注册" tabindex="-1"><a class="header-anchor" href="#处理器注册"><span>处理器注册</span></a></h2><p><code>StateProcessorRegistry</code> 它实现了 <code>BeanPostProcessor</code> 接口，用于在Spring bean初始化之后进行处理。</p><ol><li><p><strong><code>stateProcessorMap</code> 静态成员变量：</strong></p><ul><li>使用 <code>ConcurrentHashMap</code> 来存储订单状态处理器的注册信息。结构是三层嵌套的 Map，第一层 key 是订单状态，第二层 key 是订单状态对应的事件，第三层 key 是业务码和场景的组合，值是对应的处理器列表。</li></ul></li><li><p><strong><code>acquireStateProcessor</code> 方法：</strong></p><ul><li>根据订单状态、事件类型、业务码和场景获取对应的订单状态处理器列表。</li></ul></li><li><p><strong><code>postProcessAfterInitialization</code> 方法：</strong></p><ul><li>是 <code>BeanPostProcessor</code> 接口的方法，用于在 bean 初始化后进行处理。</li><li>对于实现了 <code>AbstractStateProcessor</code> 类并使用了 <code>OrderStateProcessor</code> 注解的 bean，会从注解中获取状态、事件、业务码和场景等信息，然后调用 <code>initProcessorMap</code> 方法进行注册。</li></ul></li><li><p><strong><code>initProcessorMap</code> 方法：</strong></p><ul><li>通过并行流处理状态、业务码和场景的组合，调用 <code>registerStateProcessor</code> 方法进行注册。</li></ul></li><li><p><strong><code>registerStateProcessor</code> 方法：</strong></p><ul><li>用于将订单状态处理器注册到 <code>stateProcessorMap</code> 中，按照订单状态、事件、业务码和场景的组合进行存储。</li></ul></li></ol><p>这个类的作用是提供一个中心化的地方，用于管理订单状态处理器的注册和获取。通过注解方式标记了订单状态处理器，将其注册到 <code>stateProcessorMap</code> 中。这样，状态机引擎在进行状态转换时可以根据订单状态、事件、业务码和场景快速查找到对应的处理器列表，方便进行后续的状态转换逻辑。使用并发安全的集合类，确保在多线程环境下的安全性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateProcessorRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 第一层key是订单状态。 第二层key是订单状态对应的事件，一个状态可以有多个事件。 第三层key是具体场景code，场景下对应的多个处理器，需要后续进行过滤选择出一个具体的执行。
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stateProcessorMap <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> <span class="token function">acquireStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderState<span class="token punctuation">,</span>
      <span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">String</span> businessCode<span class="token punctuation">,</span>
      <span class="token class-name">String</span> sceneId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> abstractStateProcessors <span class="token operator">=</span>
        stateProcessorMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderState<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>businessCode <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> sceneId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> abstractStateProcessors<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AbstractStateProcessor</span> <span class="token operator">&amp;&amp;</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>
        <span class="token class-name">OrderStateProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">OrderStateProcessor</span> annotation <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">OrderStateProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> states <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> event <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bizCodes <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">bizCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sceneIds <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">sceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">initProcessorMap</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> event<span class="token punctuation">,</span> bizCodes<span class="token punctuation">,</span> sceneIds<span class="token punctuation">,</span> stateProcessorMap<span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token class-name">AbstractStateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">StateProcessor</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">initProcessorMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> states<span class="token punctuation">,</span> <span class="token class-name">String</span> event<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bizCodes<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sceneIds<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span>
      <span class="token class-name">E</span> processor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> bizCode <span class="token operator">:</span> bizCodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sceneId <span class="token operator">:</span> sceneIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>orderStateEnum <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">registerStateProcessor</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">,</span> event<span class="token punctuation">,</span> bizCode<span class="token punctuation">,</span> sceneId<span class="token punctuation">,</span> map<span class="token punctuation">,</span> processor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 初始化状态机处理器
   */</span>
  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">StateProcessor</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">registerStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderStateEnum<span class="token punctuation">,</span> <span class="token class-name">String</span> event<span class="token punctuation">,</span>
      <span class="token class-name">String</span> bizCode<span class="token punctuation">,</span>
      <span class="token class-name">String</span> sceneId<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span>
      <span class="token class-name">E</span> processor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// state维度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stateTransformEventEnumMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderStateEnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// event维度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// bizCode and sceneId</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> processorMap <span class="token operator">=</span> stateTransformEventEnumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> bizCodeAndSceneId <span class="token operator">=</span> bizCode <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> sceneId<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processorMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      processorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    processorMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bizCodeAndSceneId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机"><span>状态机</span></a></h2><p><code>StateMachine</code>接收状态事件上下文，并根据当前状态事件找到对应的状态处理器，然后执行处理逻辑。通过调用 <code>StateProcessorRegistry</code> 类的方法，获取状态处理器列表，并进行相关的异常处理，确保状态机引擎的正常运行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateMachine</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前事件处理器</span>
    <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> stateProcessor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStateProcessor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行处理逻辑</span>
    <span class="token keyword">return</span> stateProcessor<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">StateProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token function">getStateProcessor</span><span class="token punctuation">(</span><span class="token class-name">StateContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StateEvent</span> stateEvent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据状态+事件对象获取所对应的业务处理器集合</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractStateProcessor</span><span class="token punctuation">&gt;</span></span> processorList <span class="token operator">=</span>
        <span class="token class-name">StateProcessorRegistry</span><span class="token punctuation">.</span><span class="token function">acquireStateProcessor</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            stateEvent<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stateEvent<span class="token punctuation">.</span><span class="token function">getBusinessCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            stateEvent<span class="token punctuation">.</span><span class="token function">getSceneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processorList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 订单状态发生改变</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stateEvent<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>TransferStatusError</span><span class="token punctuation">,</span> <span class="token string">&quot;订单状态不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">&quot;状态处理器未找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>processorList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span> <span class="token string">&quot;状态处理器未找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processorList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> <span class="token string">&quot;状态处理器超过1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> processorList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例"><span>使用案例</span></a></h2>`,32);function r(d,v){const s=t("RouterLink");return e(),p("div",null,[k,c("p",null,[n("请参考"),o(s,{to:"/project/qifan-mall/order/order-create.html#%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3"},{default:l(()=>[n("订单创建流程")]),_:1})])])}const g=a(u,[["render",r],["__file","state-machine.html.vue"]]);export{g as default};
