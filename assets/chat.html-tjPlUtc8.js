import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as u,c,d as n,e as a,b as t,w as e,a as l}from"./app-x9EYbRoQ.js";const i={},d=n("h1",{id:"chatclient发送消息",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#chatclient发送消息"},[n("span",null,"ChatClient发送消息")])],-1),r=n("p",null,"下面是一个简单的ChatClient结合ChatModel的消息发送实例。",-1),k=n("h2",{id:"ai厂商接入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ai厂商接入"},[n("span",null,"AI厂商接入")])],-1),m=n("br",null,null,-1),v=n("br",null,null,-1),q=n("br",null,null,-1),b=n("br",null,null,-1),h=l(`<h2 id="注入ai模型" tabindex="-1"><a class="header-anchor" href="#注入ai模型"><span>注入AI模型</span></a></h2><p>我这边使用的阿里的灵积模型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="非流式消息发送" tabindex="-1"><a class="header-anchor" href="#非流式消息发送"><span>非流式消息发送</span></a></h2><p>需要注意<code>ChatResponse</code>来自<code>org.springframework.ai.chat.model</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// AI模型基座，可以切换不同的AI厂商模型</span>
    <span class="token comment">// 阿里灵积</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 讯飞星火</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SparkAiChatModel</span> sparkAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 百度千帆</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">QianFanChatModel</span> qianFanChatModel<span class="token punctuation">;</span>
    <span class="token comment">// Kimi</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MoonshotChatModel</span> moonshotChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 智谱清言</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> zhiPuAiChatModel<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 非流式问答
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户提问
     * <span class="token keyword">@return</span> org.springframework.ai.chat.model.ChatResponse
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;chat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatClient</span> chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 输入单条提示词</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
                <span class="token comment">// call代表非流式问答，返回的结果可以是ChatResponse，也可以是Entity（转成java类型），也可以是字符串直接提取回答结果。</span>
                <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应结果</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> <span class="token string">&quot;你好！有什么我能为你效劳的吗？&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;success&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流式消息发送" tabindex="-1"><a class="header-anchor" href="#流式消息发送"><span>流式消息发送</span></a></h2><p>声明该接口的返回类型是文本流，然后将回答结果转成SSE格式的文本流，再配合前端sse请求，就可以实现流式问答了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;chat/stream&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 流式问答
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span> 用户提问
     * <span class="token keyword">@return</span> Flux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ServerSentEvent</span> <span class="token attr-name">&lt;</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span>&gt; 流式响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;chat/stream&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStream</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 输入多条消息，可以将历史记录传入</span>
                <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span><span class="token string">&quot;你是一个Java智能助手，应用你的Java知识帮助用户解决问题或者编写程序&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 流式返回</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 构造SSE（ServerSendEvent）格式返回结果</span>
                <span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">toJson</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将流式回答结果转json字符串
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatResponse</span> 流式回答结果
     * <span class="token keyword">@return</span> String json字符串
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token class-name">ChatResponse</span> chatResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到接口流式的响应，并且系统指令生效，AI知道自己是一个Java助手。</p><p>注意：灵积会把之前的响应内容累加起来。其他的AI厂家模型不会。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>event:message
data:{&quot;result&quot;:{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;null&quot;,&quot;contentFilterMetadata&quot;:null}},&quot;metadata&quot;:{},&quot;results&quot;:[{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;null&quot;,&quot;contentFilterMetadata&quot;:null}}]}

event:message
data:{&quot;result&quot;:{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好！很高兴&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;null&quot;,&quot;contentFilterMetadata&quot;:null}},&quot;metadata&quot;:{},&quot;results&quot;:[{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好！很高兴&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;null&quot;,&quot;contentFilterMetadata&quot;:null}}]}

....省略
event:message
data:{&quot;result&quot;:{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好！很高兴能在这里帮助你。如果你有任何关于Java编程的问题、需要解决特定问题的代码示例或是想要了解Java某个概念，请随时告诉我。无论是基础语法、面向对象编程、集合框架、多线程、网络编程还是其他高级话题，我都乐于协助。你现在需要帮助吗？&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;stop&quot;,&quot;contentFilterMetadata&quot;:null}},&quot;metadata&quot;:{},&quot;results&quot;:[{&quot;output&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;,&quot;media&quot;:[],&quot;metadata&quot;:{&quot;messageType&quot;:&quot;ASSISTANT&quot;},&quot;content&quot;:&quot;你好！很高兴能在这里帮助你。如果你有任何关于Java编程的问题、需要解决特定问题的代码示例或是想要了解Java某个概念，请随时告诉我。无论是基础语法、面向对象编程、集合框架、多线程、网络编程还是其他高级话题，我都乐于协助。你现在需要帮助吗？&quot;},&quot;metadata&quot;:{&quot;finishReason&quot;:&quot;stop&quot;,&quot;contentFilterMetadata&quot;:null}}]}
.....
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function g(S,f){const s=p("RouterLink");return u(),c("div",null,[d,r,k,n("p",null,[a("本案例使用的是阿里的灵积AI服务请参考"),t(s,{to:"/project/spring-ai/config/dash-scope.html"},{default:e(()=>[a("灵积接入")]),_:1}),a("。")]),n("p",null,[a("其他AI厂商接入方式请参考下面的链接："),m,t(s,{to:"/project/spring-ai/config/qian-fan.html"},{default:e(()=>[a("百度千帆")]),_:1}),v,t(s,{to:"/project/spring-ai/config/zhi-pu.html"},{default:e(()=>[a("智谱清言")]),_:1}),q,t(s,{to:"/project/spring-ai/config/spark.html"},{default:e(()=>[a("讯飞星火")]),_:1}),b,t(s,{to:"/project/spring-ai/config/kimi.html"},{default:e(()=>[a("kimi")]),_:1})]),h])}const A=o(i,[["render",g],["__file","chat.html.vue"]]);export{A as default};
