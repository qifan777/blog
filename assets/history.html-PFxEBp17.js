import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,d as n,e as s,b as e,w as t,a as l}from"./app-0nW1dKW7.js";const u={},r=n("h1",{id:"对话记录-内存存储",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#对话记录-内存存储"},[n("span",null,"对话记录（内存存储）")])],-1),d=n("p",null,[s("为了让AI记住你和它的对话，需要把对话信息存储起来。当你N+1次和AI聊天的时候，需要把之前的N次对话都带上这样AI才能记住你和它的对话。"),n("br"),s(" 不过有时候为了节省"),n("code",null,"Token"),s("，并不一定把所有的对话都带上，可以只携带前面几条对话。")],-1),k=n("h2",{id:"基础模型的接入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础模型的接入"},[n("span",null,"基础模型的接入")])],-1),m=n("br",null,null,-1),v=n("br",null,null,-1),h=n("br",null,null,-1),b=n("br",null,null,-1),y=l(`<h2 id="messagechatmemoryadvisor" tabindex="-1"><a class="header-anchor" href="#messagechatmemoryadvisor"><span>MessageChatMemoryAdvisor</span></a></h2><p><code>MessageChatMemoryAdvisor</code>会读取会话id对应的消息列表，并把消息列表拼接到历史的消息中。</p><p>历史消息的实现过程：</p><ol><li>提供ChatMemory，通过会话id查找历史消息。下面的例子提供的是<code>InMemoryChatMemory</code>，内存存储。</li><li><code>MessageChatMemoryAdvisor</code>会在运行时调用<code>ChatMemory</code>，通过会话id查找历史消息。然后把消息列表拼接到历史的消息中。</li><li>发送消息给大模型得到答案</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// AI模型基座，可以切换不同的AI厂商模型</span>
    <span class="token comment">// 阿里灵积</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DashScopeAiChatModel</span> dashScopeAiChatModel<span class="token punctuation">;</span>
    <span class="token comment">// 模拟数据库存储会话和消息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMemory</span> chatMemory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryChatMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 根据会话id，从数据库中查找历史消息，并将消息作为上下文回答。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">prompt</span>    用户的提问
     * <span class="token keyword">@param</span> <span class="token parameter">sessionId</span> 会话id
     * <span class="token keyword">@return</span> SSE流响应
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;chat/stream/history&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">chatStreamWithHistory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> prompt<span class="token punctuation">,</span>
                                                               <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> sessionId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 如果需要存储会话和消息到数据库，自己可以实现ChatMemory接口，</span>
        <span class="token comment">//    这里使用InMemoryChatMemory，内存存储。</span>
        <span class="token comment">// 2. 传入会话id，MessageChatMemoryAdvisor会根据会话id去查找消息。</span>
        <span class="token comment">// 3. 只需要携带最近10条消息</span>
        <span class="token keyword">var</span> messageChatMemoryAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dashScopeAiChatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
                <span class="token comment">// MessageChatMemoryAdvisor会在消息发送给大模型之前，从ChatMemory中获取会话的历史消息，</span>
                <span class="token comment">// 然后一起发送给大模型。</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>messageChatMemoryAdvisor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatResponse <span class="token operator">-&gt;</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatResponse<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function _(f,g){const a=p("RouterLink");return c(),i("div",null,[r,d,k,n("p",null,[s("本案例使用的是阿里的灵积AI服务请参考"),e(a,{to:"/project/spring-ai/config/dash-scope.html"},{default:t(()=>[s("灵积接入")]),_:1}),s("。")]),n("p",null,[s("其他AI厂商接入方式请参考下面的链接："),m,e(a,{to:"/project/spring-ai/config/qian-fan.html"},{default:t(()=>[s("百度千帆")]),_:1}),v,e(a,{to:"/project/spring-ai/config/zhi-pu.html"},{default:t(()=>[s("智谱清言")]),_:1}),h,e(a,{to:"/project/spring-ai/config/spark.html"},{default:t(()=>[s("讯飞星火")]),_:1}),b,e(a,{to:"/project/spring-ai/config/kimi.html"},{default:t(()=>[s("kimi")]),_:1})]),y])}const A=o(u,[["render",_],["__file","history.html.vue"]]);export{A as default};
