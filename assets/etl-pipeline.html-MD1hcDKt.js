import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as l,c as i,d as a,e as n,b as t,w as u,a as s}from"./app-uzLfdybG.js";const d="/blog/assets/etl-pipeline-tlEpEE9G.jpg",r={},k=s('<h1 id="etl-pipeline" tabindex="-1"><a class="header-anchor" href="#etl-pipeline"><span>ETL Pipeline</span></a></h1><p>ETL是提取、转换、加载的缩写，从原始的文档到数据库需要经历提取（.doc、.ppt、.xlsx等）、转换（数据结构化、清理数据、数据分块）、写入向量数据库。这个过程可以进行多种处理，确保最后的数据适合AI问答。</p><p>SpringAI提供了ETL框架。它是搭建知识库框架的基石。</p><h2 id="框架介绍" tabindex="-1"><a class="header-anchor" href="#框架介绍"><span>框架介绍</span></a></h2><ol><li>DocumentReader：文档读取器，读取文档，比如PDF、Word、Excel等。如：<code>JsonReader</code>（读取JSON）,<code>TextReader</code>（读取文本）,<code>PagePdfDocumentReader</code>（读取PDF）,<code>TikaDocumentReader</code>（读取各种文件，大部分都可以支持.pdf,.xlsx,.docx,.pptx,.md,.json等）。上诉的这些reader都是<code>DocumentReader</code>的实现类。</li><li>DocumentTransformer：文档转换器，处理文档。<code>TextSplitter</code>（文档切割成小块），<code>ContentFormatTransformer</code>（将文档变成键值对），<code>SummaryMetadataEnricher</code>（使用大模型总结文档），<code>KeywordMetadataEnricher</code>（使用大模型提取文档关键词）。</li><li>DocumentWriter: 文档写入器，将文档写入向量数据库或者本地文件。<code>VectorStore</code>（向量数据库写入器），<code>FileDocumentWriter</code>（文件写入器）。</li></ol><figure><img src="'+d+'" alt="ETL 流水线结构图" tabindex="0" loading="lazy"><figcaption>ETL 流水线结构图</figcaption></figure><h2 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件"><span>读取文件</span></a></h2>',7),m=a("code",null,"TikaDocumentReader",-1),v={href:"https://tika.apache.org/2.9.0/formats.html",target:"_blank",rel:"noopener noreferrer"},g=a("code",null,"Reader",-1),b=s(`<p>引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-tika-document-reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先要明白<code>DocumentReader</code>会从<code>Resource</code>中读取文件。<code>Resource</code>是SpringIO中的一个接口，它表示一个资源，可以是文件、网络资源、内存资源等。<br> 下面举几个读取文件的例子</p><ol><li><p>从输入流中读取文件。像后端接收前端文件时，就可以使用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SneakyThrows</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;read/multipart-file&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readMultipartFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从IO流中读取文件</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从本地文件读取文件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\简历.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从网络资源读取文件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SneakyThrows</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost/简历.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>为了体现资源的统一性我特意用<code>Resource</code>表示<code>InputStreamResource</code>、<code>FileSystemResource</code>、<code>UrlResource</code>。对于文档读取器来说，它不在乎文档来自哪里，只要它是一个<code>Resource</code>，它都可以读取。</p><h2 id="转换文档" tabindex="-1"><a class="header-anchor" href="#转换文档"><span>转换文档</span></a></h2><p><code>Document</code>对象是<code>ETL Pipeline</code>的核心对象，它包含了文档的元数据和内容。</p><p>内容转换器：</p><ul><li><code>TokenTextSplitter</code>：可以把内容切割成更小的块方便<code>RAG</code>的时候提升响应速度节省<code>Token</code>。</li><li><code>ContentFormatTransformer</code>：可以把元数据的内容变成键值对字符串。</li></ul><p>元数据转换器：</p><ul><li><code>SummaryMetadataEnricher</code>：使用大模型总结文档。会在元数据里面增加一个<code>summary</code>字段。</li><li><code>KeywordMetadataEnricher</code>：使用大模型提取文档关键词。可以在元数据里面增加一个<code>keywords</code>字段。</li></ul><p>从前端传来文件，使用<code>TikaDocumentReader</code>读取文件，然后使用<code>TokenTextSplitter</code>将文本内容划分成更小的块。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储文档" tabindex="-1"><a class="header-anchor" href="#存储文档"><span>存储文档</span></a></h2><p>经过前面的步骤，我们得到了一个文档列表，然后就可以将其存储到向量数据库或者本地文件中了。</p>`,15),h=s(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 注入向量数据库。</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">VectorStore</span> vectorStore<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;embedding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">embedding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从IO流中读取文件</span>
        <span class="token class-name">TikaDocumentReader</span> tikaDocumentReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TikaDocumentReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将文本内容划分成更小的块</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> splitDocuments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenTextSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>tikaDocumentReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存入向量数据库，这个过程会自动调用embeddingModel,将文本变成向量再存入。</span>
        vectorStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>splitDocuments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function f(w,R){const p=e("ExternalLinkIcon"),o=e("RouterLink");return l(),i("div",null,[k,a("p",null,[m,n("比较全能大部分文件都可以读取，支持的文件格式可以参考"),a("a",v,[n("官方文档"),t(p)]),n("。如果是比较个性化文档的场景，最好自己实现一个"),g,n("，比如我们公司的有些excel里面存了各种的表格数据这种只能自己去读取处理。使用读取器读出来的数据乱乱的。")]),b,a("p",null,[n("向量数据库的依赖和创建请参考"),t(o,{to:"/project/spring-ai/vector-database.html"},{default:u(()=>[n("向量数据库")]),_:1}),n("。")]),h])}const T=c(r,[["render",f],["__file","etl-pipeline.html.vue"]]);export{T as default};
